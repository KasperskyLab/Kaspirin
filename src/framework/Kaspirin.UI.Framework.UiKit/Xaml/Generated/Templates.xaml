<!--
    Copyright Â© 2024 AO Kaspersky Lab.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:booleanConverters="clr-namespace:Kaspirin.UI.Framework.UiKit.Converters.BooleanConverters"
                    xmlns:controls="clr-namespace:Kaspirin.UI.Framework.UiKit.Controls"
                    xmlns:equalityConverters="clr-namespace:Kaspirin.UI.Framework.UiKit.Converters.EqualityConverters"
                    xmlns:focus="clr-namespace:Kaspirin.UI.Framework.UiKit.Input.Focus"
                    xmlns:fonts="clr-namespace:Kaspirin.UI.Framework.UiKit.Fonts"
                    xmlns:icons="clr-namespace:Kaspirin.UI.Framework.UiKit.Icons"
                    xmlns:internals="clr-namespace:Kaspirin.UI.Framework.UiKit.Controls.Internals"
                    xmlns:markupBinding="clr-namespace:Kaspirin.UI.Framework.UiKit.MarkupExtensions.DataBinding"
                    xmlns:markupCommon="clr-namespace:Kaspirin.UI.Framework.UiKit.MarkupExtensions.Common"
                    xmlns:markupItemIndex="clr-namespace:Kaspirin.UI.Framework.UiKit.MarkupExtensions.ItemIndex"
                    xmlns:notifications="clr-namespace:Kaspirin.UI.Framework.UiKit.Notifications"
                    xmlns:numberConverters="clr-namespace:Kaspirin.UI.Framework.UiKit.Converters.NumberConverters"
                    xmlns:properties="clr-namespace:Kaspirin.UI.Framework.UiKit.Controls.Properties"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:thicknessConverters="clr-namespace:Kaspirin.UI.Framework.UiKit.Converters.ThicknessConverters"
                    xmlns:uikit="clr-namespace:Kaspirin.UI.Framework.UiKit"
                    xmlns:vs="clr-namespace:Kaspirin.UI.Framework.UiKit.Controls.VisualStates"
                    xmlns:xi="clr-namespace:Kaspirin.UI.Framework.UiKit.Localization.Markup.Extensions.Images"
                    xmlns:xl="clr-namespace:Kaspirin.UI.Framework.UiKit.Localization.Markup.Extensions.Strings"
                    xmlns:xr="clr-namespace:Kaspirin.UI.Framework.UiKit.Localization.Markup.Extensions.Xaml">

    <controls:ContextMenu x:Key="InputContextMenu">
        <controls:MenuItem Command="ApplicationCommands.Cut"
                           Header="{xl:Loc InputContextMenu_Cut,
                                           Scope=UiKit}"
                           Icon="{x:Static icons:UIKitIcon_16.Cut}" />
        <controls:MenuItem Command="ApplicationCommands.Copy"
                           Header="{xl:Loc InputContextMenu_Copy,
                                           Scope=UiKit}"
                           Icon="{x:Static icons:UIKitIcon_16.Copy}" />
        <controls:MenuItem Command="ApplicationCommands.Paste"
                           Header="{xl:Loc InputContextMenu_Paste,
                                           Scope=UiKit}"
                           Icon="{x:Static icons:UIKitIcon_16.Paste}" />
    </controls:ContextMenu>
    <controls:ContextMenu x:Key="InputReadOnlyContextMenu">
        <controls:MenuItem Command="ApplicationCommands.Copy"
                           Header="{xl:Loc InputContextMenu_Copy,
                                           Scope=UiKit}"
                           Icon="{x:Static icons:UIKitIcon_16.Copy}" />
    </controls:ContextMenu>

    <Style x:Key="TextWrappingTextBlock"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>

    <Style x:Key="TextTrimmingTextBlock"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="properties:TextBlockProps.ShowToolTipOnTrim" Value="True" />
    </Style>

    <Style x:Key="TextWrappingTrimmingTextBlock"
           TargetType="{x:Type TextBlock}">
        <Setter Property="TextWrapping" Value="Wrap" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="properties:TextBlockProps.ShowToolTipOnTrim" Value="True" />
    </Style>

    <!--  region Badge  -->

    <Style x:Key="BadgeUniversal"
           TargetType="{x:Type controls:Badge}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Badge}">
                    <Border Background="{uikit:UIKitBinding Badge_Background}"
                            CornerRadius="{uikit:UIKitBinding Badge_CornerRadius}"
                            Height="{uikit:UIKitBinding Badge_Height}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="{Binding Height,
                                            RelativeSource={RelativeSource Self}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region BadgeCounter  -->

    <Style x:Key="BadgeCounterUniversal"
           TargetType="{x:Type controls:BadgeCounter}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:BadgeCounter}">
                    <Border Background="{uikit:UIKitBinding BadgeCounter_Background}"
                            CornerRadius="{uikit:UIKitBinding BadgeCounter_CornerRadius}"
                            Height="{uikit:UIKitBinding BadgeCounter_Height}"
                            HorizontalAlignment="Center"
                            MinWidth="{Binding Height,
                                               RelativeSource={RelativeSource Self}}"
                            VerticalAlignment="Center">
                        <StackPanel HorizontalAlignment="Center"
                                    Margin="{uikit:UIKitBinding BadgeCounter_Padding}"
                                    Orientation="Horizontal"
                                    VerticalAlignment="Center">
                            <TextBlock x:Name="PART_Counter"
                                       Foreground="{uikit:UIKitBinding BadgeCounter_Foreground}"
                                       Style="{uikit:UIKitBinding BadgeCounter_TextStyle}" />
                            <TextBlock x:Name="PART_Overflow"
                                       Foreground="{uikit:UIKitBinding BadgeCounter_Foreground}"
                                       Style="{uikit:UIKitBinding BadgeCounter_TextStyle}"
                                       Text="+"
                                       Visibility="Collapsed" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflow" Value="True">
                            <Setter Property="ToolTip" TargetName="PART_Counter" Value="{markupCommon:UIKitTemplateBinding Counter}" />
                            <Setter Property="Visibility" TargetName="PART_Overflow" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region BadgeText  -->

    <Style x:Key="BadgeTextUniversal"
           TargetType="{x:Type controls:BadgeText}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:BadgeText}">
                    <Border Background="{uikit:UIKitBinding BadgeText_Background}"
                            CornerRadius="{uikit:UIKitBinding BadgeText_CornerRadius}"
                            Height="{uikit:UIKitBinding BadgeText_Height}"
                            HorizontalAlignment="Center"
                            MinWidth="{Binding Height,
                                               RelativeSource={RelativeSource Self}}"
                            VerticalAlignment="Center">
                        <TextBlock properties:TextBlockProps.ShowToolTipOnTrim="True"
                                   Foreground="{uikit:UIKitBinding BadgeText_Foreground}"
                                   HorizontalAlignment="Center"
                                   Margin="{uikit:UIKitBinding BadgeText_Padding}"
                                   Style="{uikit:UIKitBinding BadgeText_TextStyle}"
                                   Text="{markupCommon:UIKitTemplateBinding Text}"
                                   TextTrimming="CharacterEllipsis"
                                   VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Bullet  -->

    <Style x:Key="BulletUniversal"
           TargetType="{x:Type controls:Bullet}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--  Constant values  -->
        <Setter Property="Icon" Value="{x:Static uikit:UIKitConstants.BulletIcon}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Bullet}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <controls:Icon12 x:Name="PART_Bullet"
                                         Grid.Column="0"
                                         Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                         IconForeground="{markupBinding:ConditionalBinding True={uikit:UIKitBinding Bullet_Color,
                                                                                                                    Type={x:Type Brush},
                                                                                                                    Mode=TemplatedParent},
                                                                                           False={markupCommon:UIKitTemplateBinding IconBrush},
                                                                                           Condition={markupCommon:UIKitTemplateBinding IconBrush,
                                                                                                                                        Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                                                        ConverterParameter={x:Null}}}"
                                         Margin="{uikit:UIKitBinding Bullet_Margin}" />

                        <uikit:UIKitContentPresenter Grid.Column="1"
                                                     Margin="{markupCommon:UIKitTemplateBinding Padding}">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Bullet_TextStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:Bullet}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="PART_Bullet" Value="0" />
                            <Setter Property="VerticalAlignment" TargetName="PART_Bullet" Value="Center" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Button  -->

    <Style x:Key="ButtonUniversal"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding Button_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />
        <!--  Constant values  -->
        <Setter Property="MinWidth" Value="{x:Static uikit:UIKitConstants.ButtonMinWidth}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid x:Name="PART_Container"
                          Height="{uikit:UIKitBinding Button_Height}"
                          MaxHeight="{uikit:UIKitBinding Button_Height}"
                          MinHeight="{uikit:UIKitBinding Button_Height}"
                          MinWidth="{markupCommon:UIKitTemplateBinding MinWidth}"
                          Opacity="{uikit:UIKitBinding Button_Opacity}"
                          SnapsToDevicePixels="{markupCommon:UIKitTemplateBinding SnapsToDevicePixels}"
                          UseLayoutRounding="{markupCommon:UIKitTemplateBinding UseLayoutRounding}">
                        <Border x:Name="PART_Container_Background"
                                Background="{uikit:UIKitBinding Button_Container_Background}"
                                CornerRadius="{uikit:UIKitBinding Button_Container_CornerRadius}"
                                Effect="{uikit:UIKitBinding Button_Container_Shadow}" />
                        <Border x:Name="PART_Container_Border"
                                BorderBrush="{uikit:UIKitBinding Button_Container_BorderBrush}"
                                BorderThickness="{uikit:UIKitBinding Button_Container_BorderThickness}"
                                CornerRadius="{uikit:UIKitBinding Button_Container_CornerRadius}" />
                        <Grid x:Name="PART_Content"
                              HorizontalAlignment="{markupCommon:UIKitTemplateBinding HorizontalContentAlignment}"
                              Margin="{uikit:UIKitBinding Button_Padding}"
                              VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <controls:Spinner x:Name="PART_Spinner"
                                              Grid.Column="0"
                                              Margin="{uikit:UIKitBinding Button_Icon_MarginLeft}"
                                              Style="{uikit:UIKitBinding Button_Spinner_Style}"
                                              VerticalAlignment="Center"
                                              Visibility="Collapsed" />

                            <Grid x:Name="PART_IconLeft"
                                  Grid.Column="0"
                                  Margin="{uikit:UIKitBinding Button_Icon_MarginLeft}"
                                  Opacity="{uikit:UIKitBinding Button_Icon_Opacity}"
                                  VerticalAlignment="Center">
                                <controls:Icon16 Icon="{markupCommon:UIKitTemplateBinding internals:ButtonBaseInternals.LeftIcon16}"
                                                 IconForeground="{uikit:UIKitBinding Button_Icon_Foreground}" />
                                <controls:Icon24 Icon="{markupCommon:UIKitTemplateBinding internals:ButtonBaseInternals.LeftIcon24}"
                                                 IconForeground="{uikit:UIKitBinding Button_Icon_Foreground}" />
                            </Grid>

                            <uikit:UIKitContentPresenter x:Name="PART_Presenter"
                                                         Grid.Column="1"
                                                         HorizontalAlignment="Stretch"
                                                         VerticalAlignment="Center">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Button_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextTrimmingTextBlock},
                                                                                                StateAwareAncestorType={x:Type ButtonBase}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>

                            <Grid x:Name="PART_IconRight"
                                  Grid.Column="2"
                                  Margin="{uikit:UIKitBinding Button_Icon_MarginRight}"
                                  Opacity="{uikit:UIKitBinding Button_Icon_Opacity}"
                                  VerticalAlignment="Center">
                                <controls:Icon16 Icon="{markupCommon:UIKitTemplateBinding internals:ButtonBaseInternals.RightIcon16}"
                                                 IconForeground="{uikit:UIKitBinding Button_Icon_Foreground}" />
                                <controls:Icon24 Icon="{markupCommon:UIKitTemplateBinding internals:ButtonBaseInternals.RightIcon24}"
                                                 IconForeground="{uikit:UIKitBinding Button_Icon_Foreground}" />
                            </Grid>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="MinWidth" Value="0" />
                            <Setter Property="Visibility" TargetName="PART_Presenter" Value="Collapsed" />
                            <Setter Property="Grid.Column" TargetName="PART_IconLeft" Value="1" />
                            <Setter Property="Grid.Column" TargetName="PART_IconRight" Value="1" />
                            <Setter Property="Grid.Column" TargetName="PART_Spinner" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="internals:ButtonBaseInternals.LeftIcon16" Value="{x:Static icons:UIKitIcon_16.UIKitUnset}" />
                                <Condition Property="internals:ButtonBaseInternals.LeftIcon24" Value="{x:Static icons:UIKitIcon_24.UIKitUnset}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_IconLeft" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="internals:ButtonBaseInternals.RightIcon16" Value="{x:Static icons:UIKitIcon_16.UIKitUnset}" />
                                <Condition Property="internals:ButtonBaseInternals.RightIcon24" Value="{x:Static icons:UIKitIcon_24.UIKitUnset}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_IconRight" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="internals:ButtonBaseInternals.RightIcon16" Value="{x:Static icons:UIKitIcon_16.UIKitUnset}" />
                                <Condition Property="internals:ButtonBaseInternals.RightIcon24" Value="{x:Static icons:UIKitIcon_24.UIKitUnset}" />
                                <Condition Property="internals:ButtonBaseInternals.LeftIcon16" Value="{x:Static icons:UIKitIcon_16.UIKitUnset}" />
                                <Condition Property="internals:ButtonBaseInternals.LeftIcon24" Value="{x:Static icons:UIKitIcon_24.UIKitUnset}" />
                                <Condition Property="Content" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="MinWidth" TargetName="PART_Container" Value="{markupCommon:UIKitTemplateBinding ActualHeight}" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="internals:ButtonBaseInternals.IsBusy" Value="True">
                            <Setter Property="Visibility" TargetName="PART_IconLeft" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_Spinner" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ButtonGhostUniversal"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <!--  Constant values  -->
        <Setter Property="MinWidth" Value="{x:Static uikit:UIKitConstants.ButtonGhostMinWidth}" />
    </Style>

    <!--  endregion  -->

    <!--  region Carousel  -->

    <Style x:Key="CarouselUniversal"
           TargetType="{x:Type controls:Carousel}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Carousel}">
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region CarouselItem  -->

    <Style x:Key="CarouselItemUniversal"
           TargetType="{x:Type controls:CarouselItem}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <!--  Constant values  -->
        <Setter Property="Margin" Value="{x:Static uikit:UIKitConstants.CarouselItemMargin}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:CarouselItem}">
                    <Border Background="{uikit:UIKitAnimatedBinding CarouselItem_Background,
                                                                    Properties={x:Static uikit:UIKitConstants.CarouselItemAnimationProperties}}"
                            BorderBrush="{uikit:UIKitBinding CarouselItem_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding CarouselItem_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding CarouselItem_CornerRadius}"
                            Height="{uikit:UIKitBinding CarouselItem_Height}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Width="{uikit:UIKitAnimatedBinding CarouselItem_Width,
                                                               Properties={x:Static uikit:UIKitConstants.CarouselItemAnimationProperties}}" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="vs:StateService.SelectableState" Value="Normal" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Hover" />
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                            <Setter Property="Focusable" Value="False" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Arrow" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.SelectableState" Value="Disabled" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedDisabled" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region CheckBox & RadioButton  -->

    <Style x:Key="CheckableUniversal"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding Checkable_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Grid Grid.Column="0"
                              controls:Popup.IsPopupTarget="True"
                              Height="{uikit:UIKitBinding Checkable_MarkContainer_Height}"
                              Margin="{uikit:UIKitBinding Checkable_MarkContainer_Margin}"
                              VerticalAlignment="Top">
                            <Rectangle Effect="{uikit:UIKitBinding Checkable_MarkContainer_Shadow}"
                                       Fill="{uikit:UIKitBinding Checkable_MarkContainer_Background}"
                                       Height="{uikit:UIKitBinding Checkable_MarkContainer_Height}"
                                       HorizontalAlignment="Center"
                                       Panel.ZIndex="1"
                                       RadiusX="{uikit:UIKitBinding Checkable_MarkContainer_CornerRadius}"
                                       RadiusY="{uikit:UIKitBinding Checkable_MarkContainer_CornerRadius}"
                                       Stroke="{uikit:UIKitBinding Checkable_MarkContainer_BorderBrush}"
                                       StrokeThickness="{uikit:UIKitBinding Checkable_MarkContainer_BorderThickness}"
                                       VerticalAlignment="Center"
                                       Width="{uikit:UIKitBinding Checkable_MarkContainer_Width}" />

                            <Image x:Name="PART_Mark"
                                   properties:ImageProps.SvgBrush="{uikit:UIKitBinding Checkable_Mark_Brush}"
                                   FlowDirection="LeftToRight"
                                   HorizontalAlignment="Center"
                                   Panel.ZIndex="2"
                                   Source="{uikit:UIKitBinding Checkable_Mark_Source}"
                                   Stretch="None"
                                   VerticalAlignment="Center" />
                        </Grid>

                        <StackPanel x:Name="PART_ContentContainer"
                                    Grid.Column="1"
                                    Margin="{uikit:UIKitBinding Checkable_Padding}"
                                    VerticalAlignment="Top">
                            <uikit:UIKitContentPresenter x:Name="PART_Content"
                                                         HorizontalAlignment="Left">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Checkable_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type ToggleButton}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>

                            <uikit:UIKitContentPresenter x:Name="PART_Description"
                                                         Content="{markupCommon:UIKitTemplateBinding internals:CheckableInternals.Description}"
                                                         HorizontalAlignment="Left"
                                                         Margin="{uikit:UIKitBinding Checkable_Description_Margin}">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Checkable_DescriptionStyle,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type ToggleButton}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </StackPanel>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Mark" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Content" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="internals:CheckableInternals.Description" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Description" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Content" Value="{x:Null}" />
                                <Condition Property="internals:CheckableInternals.Description" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_ContentContainer" Value="Collapsed" />
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Mark" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ChipsControl  -->

    <Style x:Key="ChipsControlUniversal"
           TargetType="{x:Type controls:ChipsControl}">
        <Style.Resources>
            <ControlTemplate x:Key="TemplateWrap"
                             TargetType="{x:Type controls:ChipsControl}">
                <ItemsPresenter />
            </ControlTemplate>
            <ControlTemplate x:Key="TemplateFade"
                             TargetType="{x:Type controls:ChipsControl}">
                <controls:FadeLine Style="{uikit:UIKitBinding ChipsControl_FadeLineStyle}">
                    <ItemsPresenter />
                </controls:FadeLine>
            </ControlTemplate>
        </Style.Resources>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ItemContainerStyle" Value="{uikit:UIKitBinding ChipsControl_ItemContainerStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="Mode" Value="Fade">
                <Setter Property="Template" Value="{StaticResource TemplateFade}" />
            </Trigger>
            <Trigger Property="Mode" Value="Wrap">
                <Setter Property="Template" Value="{StaticResource TemplateWrap}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  endregion  -->

    <!--  region ChipsItem  -->

    <Style x:Key="ChipsItemUniversal"
           TargetType="{x:Type controls:ChipsItem}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding ChipsItem_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ChipsItem}">
                    <Border Background="{uikit:UIKitBinding ChipsItem_Container_Background}"
                            BorderBrush="{uikit:UIKitBinding ChipsItem_Container_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding ChipsItem_Container_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding ChipsItem_Container_CornerRadius}"
                            Height="{uikit:UIKitBinding ChipsItem_Container_Height}"
                            Padding="{uikit:UIKitBinding ChipsItem_Container_Padding}">
                        <StackPanel Orientation="Horizontal"
                                    VerticalAlignment="Center">
                            <controls:Icon16 x:Name="PART_Icon"
                                             Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                             IconForeground="{uikit:UIKitBinding ChipsItem_Icon_Fill}"
                                             Margin="{uikit:UIKitBinding ChipsItem_Icon_Margin}"
                                             VerticalAlignment="Center" />

                            <uikit:UIKitContentPresenter VerticalAlignment="Center">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle ChipsItem_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextTrimmingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:ChipsItem}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>

                            <controls:BadgeCounter x:Name="PART_Counter"
                                                   Counter="{markupCommon:UIKitTemplateBinding Counter}"
                                                   Margin="{uikit:UIKitBinding ChipsItem_BadgeCounter_Margin}"
                                                   MaxCounter="{markupCommon:UIKitTemplateBinding MaxCounter}"
                                                   Style="{uikit:UIKitBinding ChipsItem_BadgeCounter_Style}"
                                                   VerticalAlignment="Center" />

                            <controls:Icon16 x:Name="PART_Close"
                                             Icon="Clear"
                                             IconForeground="{uikit:UIKitBinding ChipsItem_CloseIcon_Fill}"
                                             Margin="{uikit:UIKitBinding ChipsItem_CloseIcon_Margin}"
                                             VerticalAlignment="Center"
                                             Visibility="Collapsed" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasIcon" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Icon" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasCounter" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Counter" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMultiSelect" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_Close" Value="Visible" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Normal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Hover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedHover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMultiSelect" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                            <Setter Property="Cursor" Value="Arrow" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Disabled" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedDisabled" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ContentButton  -->

    <Style x:Key="ContentButtonUniversal"
           TargetType="{x:Type controls:ContentButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding ContentButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ContentButton}">
                    <Border Background="{uikit:UIKitBinding ContentButton_Background}"
                            BorderBrush="{uikit:UIKitBinding ContentButton_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding ContentButton_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding ContentButton_CornerRadius}"
                            Padding="{markupCommon:UIKitTemplateBinding Padding}">
                        <uikit:UIKitContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ContextMenu  -->

    <Style x:Key="ContextMenuUniversal"
           TargetType="{x:Type controls:ContextMenu}">
        <Setter Property="Grid.IsSharedSizeScope" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="True"
                                            VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ContextMenu}">
                    <controls:ContextMenuPopupDecorator Style="{uikit:UIKitBinding ContextMenu_PopupDecoratorStyle}">
                        <ScrollViewer properties:ScrollViewerProps.OuterVerticalScrollBar="True"
                                      CanContentScroll="True">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </controls:ContextMenuPopupDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ContextMenuButton  -->

    <Style x:Key="ContextMenuButtonUniversal"
           TargetType="{x:Type controls:ContextMenuButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ContextMenuButton}">
                    <ToggleButton x:Name="PART_ToggleButton"
                                  internals:ButtonBaseInternals.LeftIcon16="{markupCommon:UIKitTemplateBinding Icon}"
                                  Content="{markupCommon:UIKitTemplateBinding Content}"
                                  ContentTemplate="{markupCommon:UIKitTemplateBinding ContentTemplate}"
                                  HorizontalAlignment="Stretch"
                                  Style="{uikit:UIKitBinding ContextMenuButton_ToggleButton_Style}"
                                  TabIndex="{markupCommon:UIKitTemplateBinding TabIndex}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" SourceName="PART_ToggleButton" Value="True">
                            <Setter Property="internals:ButtonBaseInternals.RightIcon16" TargetName="PART_ToggleButton" Value="{markupCommon:UIKitTemplateBinding IconMenuOpened}" />
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="PART_ToggleButton" Value="False">
                            <Setter Property="internals:ButtonBaseInternals.RightIcon16" TargetName="PART_ToggleButton" Value="{markupCommon:UIKitTemplateBinding IconMenuClosed}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region DateTimeInput  -->

    <Style x:Key="DateTimeInputUniversal"
           TargetType="{x:Type controls:DateTimeInput}">
        <Style.Resources>
            <Style TargetType="{x:Type controls:DateTimeInputAction}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="ToolTip" Value="{xl:Loc DateTimeInputAction_SelectDateToolTip, Scope=UiKit}" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:DateTimeInputAction}">
                            <controls:IconButton x:Name="PART_ActionButton" />
                            <ControlTemplate.Triggers>
                                <Trigger Property="SelectionMode" Value="Date">
                                    <Setter Property="Icon" TargetName="PART_ActionButton" Value="{uikit:UIKitBinding DateTimeInput_ActionDate_IconName, Type={x:Type icons:UIKitIcon_16}, Mode=FindAncestor, AncestorType={x:Type controls:DateTimeInput}}" />
                                </Trigger>
                                <Trigger Property="SelectionMode" Value="Time">
                                    <Setter Property="Icon" TargetName="PART_ActionButton" Value="{uikit:UIKitBinding DateTimeInput_ActionTime_IconName, Type={x:Type icons:UIKitIcon_16}, Mode=FindAncestor, AncestorType={x:Type controls:DateTimeInput}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <!--  Constant values  -->
        <Setter Property="Width" Value="{x:Static uikit:UIKitConstants.DateTimeInputWidth}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DateTimeInput}">
                    <Grid>
                        <controls:TextInput x:Name="PART_TextInput" />

                        <Popup x:Name="PART_Popup">
                            <controls:DateTimePopupDecorator Style="{uikit:UIKitBinding DateTimeInput_PopupDecoratorStyle}">
                                <controls:DateTimePopupPresenter x:Name="PART_PopupPresenter"
                                                                 Style="{uikit:UIKitBinding DateTimeInput_PopupPresenterStyle}" />
                            </controls:DateTimePopupDecorator>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="IsInvalidState" Value="True" />
                        </Trigger>
                        <Trigger Property="IsValid" Value="False">
                            <Setter Property="IsInvalidState" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region DateTimePopupFooterButton  -->

    <Style x:Key="DateTimePopupFooterButtonUniversal"
           TargetType="{x:Type controls:DateTimePopupFooterButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding DateTimePopupFooterButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DateTimePopupFooterButton}">
                    <Border Background="{uikit:UIKitBinding DateTimePopupFooterButton_Background}"
                            BorderBrush="{uikit:UIKitBinding DateTimePopupFooterButton_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding DateTimePopupFooterButton_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding DateTimePopupFooterButton_CornerRadius}"
                            Height="{uikit:UIKitBinding DateTimePopupFooterButton_Height}">
                        <controls:Icon24 HorizontalAlignment="Center"
                                         Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                         IconForeground="{uikit:UIKitBinding DateTimePopupFooterButton_IconBrush}"
                                         VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region DateTimePopupItemButton  -->

    <Style x:Key="DateTimePopupItemButtonUniversal"
           TargetType="{x:Type controls:DateTimePopupItemButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DateTimePopupItemButton}">
                    <Border Background="{uikit:UIKitBinding DateTimePopupItemButton_Background}"
                            BorderBrush="{uikit:UIKitBinding DateTimePopupItemButton_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding DateTimePopupItemButton_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding DateTimePopupItemButton_CornerRadius}"
                            Margin="{uikit:UIKitBinding DateTimePopupItemButton_Margin}"
                            Padding="{uikit:UIKitBinding DateTimePopupItemButton_Padding}">
                        <TextBlock HorizontalAlignment="{markupCommon:UIKitTemplateBinding HorizontalContentAlignment}"
                                   Style="{markupCommon:UIKitTemplateBinding TextStyle}"
                                   Text="{markupCommon:UIKitTemplateBinding Content}"
                                   VerticalAlignment="{markupCommon:UIKitTemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsAvailable" Value="False">
                            <Setter Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region DateTimePopupPresenter  -->

    <Style x:Key="DateTimePopupPresenterUniversal"
           TargetType="{x:Type controls:DateTimePopupPresenter}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:DateTimePopupPresenter}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <controls:DateTimePopupSelector x:Name="PART_MonthPicker"
                                                        Grid.Row="0"
                                                        Grid.Column="0"
                                                        ItemButtonStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_ButtonStyle}"
                                                        ItemHeight="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Height}"
                                                        ItemHorizontalContentAlignment="Left"
                                                        ItemPadding="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Padding}"
                                                        ItemTextStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_TextStyle}" />
                        <controls:DateTimePopupSelector x:Name="PART_HourPicker"
                                                        Grid.Row="0"
                                                        Grid.Column="0"
                                                        ItemButtonStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_ButtonStyle}"
                                                        ItemHeight="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Height}"
                                                        ItemTextStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_TextStyle}"
                                                        ItemWidth="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Width}" />
                        <controls:Divider Grid.Column="1"
                                          Orientation="Vertical"
                                          Visibility="{markupBinding:CompactMultiBinding Binding1={Binding IsVisible,
                                                                                                           ElementName=PART_DayPicker},
                                                                                         Binding2={Binding IsVisible,
                                                                                                           ElementName=PART_MinutePicker},
                                                                                         Converter={booleanConverters:MultiBooleanToVisibilityConverter Operation=Or}}" />
                        <controls:DateTimePopupSelector x:Name="PART_DayPicker"
                                                        Grid.Row="0"
                                                        Grid.Column="2"
                                                        ItemButtonStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_ButtonStyle}"
                                                        ItemHeight="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Height}"
                                                        ItemTextStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_TextStyle}"
                                                        ItemWidth="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Width}" />
                        <controls:DateTimePopupSelector x:Name="PART_MinutePicker"
                                                        Grid.Row="0"
                                                        Grid.Column="2"
                                                        ItemButtonStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_ButtonStyle}"
                                                        ItemHeight="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Height}"
                                                        ItemTextStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_TextStyle}"
                                                        ItemWidth="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Width}" />
                        <controls:Divider Grid.Column="3"
                                          Orientation="Vertical"
                                          Visibility="{markupBinding:CompactMultiBinding Binding1={Binding IsVisible,
                                                                                                           ElementName=PART_YearPicker},
                                                                                         Binding2={Binding IsVisible,
                                                                                                           ElementName=PART_MeridianPicker},
                                                                                         Converter={booleanConverters:MultiBooleanToVisibilityConverter Operation=Or}}" />
                        <controls:DateTimePopupSelector x:Name="PART_YearPicker"
                                                        Grid.Row="0"
                                                        Grid.Column="4"
                                                        ItemButtonStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_ButtonStyle}"
                                                        ItemHeight="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Height}"
                                                        ItemTextStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_TextStyle}"
                                                        ItemWidth="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Width}" />
                        <controls:DateTimePopupSelector x:Name="PART_MeridianPicker"
                                                        Grid.Row="0"
                                                        Grid.Column="4"
                                                        ItemButtonStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_ButtonStyle}"
                                                        ItemHeight="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Height}"
                                                        ItemTextStyle="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_TextStyle}"
                                                        ItemWidth="{uikit:UIKitBinding DateTimePopupPresenter_SelectorItem_Width}" />

                        <Border Grid.Row="0"
                                Grid.ColumnSpan="5"
                                Background="{uikit:UIKitBinding DateTimePopupPresenter_SelectionMarker_Background}"
                                BorderBrush="{uikit:UIKitBinding DateTimePopupPresenter_SelectionMarker_BorderBrush}"
                                BorderThickness="{uikit:UIKitBinding DateTimePopupPresenter_SelectionMarker_BorderThickness}"
                                CornerRadius="{uikit:UIKitBinding DateTimePopupPresenter_SelectionMarker_CornerRadius}"
                                Height="{uikit:UIKitBinding DateTimePopupPresenter_SelectionMarker_Height}"
                                IsHitTestVisible="False"
                                Margin="{uikit:UIKitBinding DateTimePopupPresenter_SelectionMarker_Margin}"
                                VerticalAlignment="Center" />

                        <controls:Divider Grid.Row="1"
                                          Grid.ColumnSpan="5"
                                          Orientation="Horizontal" />

                        <Grid Grid.Row="2"
                              Grid.ColumnSpan="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <controls:DateTimePopupFooterButton x:Name="PART_ConfirmButton"
                                                                Grid.Column="0"
                                                                Icon="{uikit:UIKitBinding DateTimePopupPresenter_FooterButton_Confirm_IconName}"
                                                                Margin="{uikit:UIKitBinding DateTimePopupPresenter_FooterButton_Confirm_Margin}"
                                                                Style="{uikit:UIKitBinding DateTimePopupPresenter_FooterButtonStyle}"
                                                                ToolTip="{xl:Loc DateTimePopupPresenter_ConfirmToolTip,
                                                                                 Scope=UiKit}" />
                            <controls:DateTimePopupFooterButton x:Name="PART_CancelButton"
                                                                Grid.Column="1"
                                                                Icon="{uikit:UIKitBinding DateTimePopupPresenter_FooterButton_Cancel_IconName}"
                                                                Margin="{uikit:UIKitBinding DateTimePopupPresenter_FooterButton_Cancel_Margin}"
                                                                Style="{uikit:UIKitBinding DateTimePopupPresenter_FooterButtonStyle}"
                                                                ToolTip="{xl:Loc DateTimePopupPresenter_CancelToolTip,
                                                                                 Scope=UiKit}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Divider  -->

    <Style x:Key="DividerUniversal"
           TargetType="{x:Type controls:Divider}">
        <Setter Property="Focusable" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Divider}">
                    <Grid x:Name="PART_Divider"
                          MinHeight="{uikit:UIKitBinding Divider_Thickness}"
                          MinWidth="{uikit:UIKitBinding Divider_Thickness}">
                        <Rectangle Fill="{uikit:UIKitBinding Divider_Background}" />
                        <Rectangle Fill="{uikit:UIKitBinding Divider_Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter Property="VerticalAlignment" Value="Center" />
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                            <Setter Property="VerticalAlignment" TargetName="PART_Divider" Value="Center" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_Divider" Value="Stretch" />
                            <Setter Property="Height" TargetName="PART_Divider" Value="{uikit:UIKitBinding Divider_Thickness, Type={x:Type system:Double}}" />
                            <Setter Property="Width" TargetName="PART_Divider" Value="{markupCommon:UIKitTemplateBinding Length}" />
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="VerticalAlignment" Value="Stretch" />
                            <Setter Property="HorizontalAlignment" Value="Center" />
                            <Setter Property="VerticalAlignment" TargetName="PART_Divider" Value="Stretch" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_Divider" Value="Center" />
                            <Setter Property="Width" TargetName="PART_Divider" Value="{uikit:UIKitBinding Divider_Thickness, Type={x:Type system:Double}}" />
                            <Setter Property="Height" TargetName="PART_Divider" Value="{markupCommon:UIKitTemplateBinding Length}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region FadeLine  -->

    <Style x:Key="FadeLineUniversal"
           TargetType="{x:Type controls:FadeLine}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:FadeLine}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <controls:BigIconButton x:Name="PART_LeftButton"
                                                Grid.Column="0"
                                                Focusable="False"
                                                Icon="{uikit:UIKitBinding FadeLine_IconButton_LeftIcon}"
                                                Style="{uikit:UIKitBinding FadeLine_IconButtonStyle}"
                                                VerticalAlignment="Center" />
                        <ScrollViewer x:Name="PART_ScrollViewer"
                                      Grid.Column="1"
                                      HorizontalScrollBarVisibility="Hidden"
                                      VerticalAlignment="Center"
                                      VerticalScrollBarVisibility="Disabled">
                            <ContentPresenter />
                        </ScrollViewer>
                        <controls:BigIconButton x:Name="PART_RightButton"
                                                Grid.Column="2"
                                                Focusable="False"
                                                Icon="{uikit:UIKitBinding FadeLine_IconButton_RightIcon}"
                                                Style="{uikit:UIKitBinding FadeLine_IconButtonStyle}"
                                                VerticalAlignment="Center" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="internals:ScrollViewerInternals.BorderFadeState" SourceName="PART_ScrollViewer" Value="None">
                            <Setter Property="Visibility" TargetName="PART_RightButton" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_LeftButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Hyperlink  -->

    <Style x:Key="HyperlinkUniversal"
           TargetType="{x:Type Hyperlink}">
        <Setter Property="internals:HyperlinkInternals.IsTouchBehaviorEnabled" Value="True" />
        <Setter Property="vs:StateService.State" Value="Normal" />
        <Setter Property="Focusable" Value="{Binding IsVisible, RelativeSource={RelativeSource AncestorType={x:Type TextBlock}}}" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding Hyperlink_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="Foreground" Value="{uikit:UIKitBinding Hyperlink_Foreground, Mode=Self, Type={x:Type Brush}}" />
        <Setter Property="Background" Value="{uikit:UIKitBinding Hyperlink_Background, Mode=Self, Type={x:Type Brush}}" />
        <Setter Property="TextDecorations" Value="{uikit:UIKitBinding Hyperlink_TextDecoration, Mode=Self, Type={x:Type TextDecorationCollection}}" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="vs:StateService.State" Value="Hover" />
            </Trigger>
            <DataTrigger Binding="{Binding IsHyperlinkPressed, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="vs:StateService.State" Value="Pressed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType={x:Type TextBlock}}}" Value="False">
                <Setter Property="vs:StateService.State" Value="Disabled" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--  endregion  -->

    <!--  region IconBase  -->

    <Style x:Key="IconUniversal"
           TargetType="{x:Type controls:IconBase}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IconForeground" Value="{uikit:UIKitBinding Icon_Foreground, Mode=Self, Type={x:Type Brush}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconBase}">
                    <Image x:Name="PART_Image"
                           FlowDirection="LeftToRight"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsUnset" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region IconButton  -->

    <Style x:Key="IconButtonUniversal"
           TargetType="{x:Type controls:IconButtonBase}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding IconButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="IconForeground" Value="{uikit:UIKitBinding IconButton_Icon_Foreground, Mode=Self, Type={x:Type Brush}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IconButtonBase}">
                    <controls:RoundedPanel Background="{uikit:UIKitBinding IconButton_Background}"
                                           BorderBrush="{uikit:UIKitBinding IconButton_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding IconButton_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding IconButton_CornerRadius}"
                                           HorizontalAlignment="Center"
                                           Padding="{uikit:UIKitBinding IconButton_Padding}"
                                           VerticalAlignment="Center">
                        <Grid Opacity="{uikit:UIKitBinding IconButton_Icon_Opacity}">
                            <controls:Icon16 Icon="{markupCommon:UIKitTemplateBinding internals:IconButtonInternals.Icon16}"
                                             IconForeground="{markupCommon:UIKitTemplateBinding IconForeground}" />

                            <controls:Icon24 Icon="{markupCommon:UIKitTemplateBinding internals:IconButtonInternals.Icon24}"
                                             IconForeground="{markupCommon:UIKitTemplateBinding IconForeground}" />
                        </Grid>
                    </controls:RoundedPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ImageGallery  -->

    <Style x:Key="ImageGalleryUniversal"
           TargetType="{x:Type controls:ImageGallery}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageGallery}">
                    <Grid>
                        <controls:ImagePanel x:Name="PART_ImagePanel" />

                        <controls:ImageGalleryButton x:Name="PART_PrevImageButton"
                                                     HorizontalAlignment="Left"
                                                     Margin="{uikit:UIKitBinding ImageGallery_LeftButton_Margin}"
                                                     Style="{uikit:UIKitBinding ImageGallery_LeftButtonStyle}" />

                        <controls:ImageGalleryButton x:Name="PART_NextImageButton"
                                                     HorizontalAlignment="Right"
                                                     Margin="{uikit:UIKitBinding ImageGallery_RightButton_Margin}"
                                                     Style="{uikit:UIKitBinding ImageGallery_RightButtonStyle}" />

                        <controls:ImageGalleryButton x:Name="PART_CloseButton"
                                                     Command="{markupCommon:UIKitTemplateBinding CloseCommand}"
                                                     HorizontalAlignment="Right"
                                                     Margin="{uikit:UIKitBinding ImageGallery_CloseButton_Margin}"
                                                     Style="{uikit:UIKitBinding ImageGallery_CloseButtonStyle}"
                                                     VerticalAlignment="Top" />

                        <Border Background="{uikit:UIKitBinding ImageGallery_CarouselContainer_Background}"
                                CornerRadius="{uikit:UIKitBinding ImageGallery_CarouselContainer_CornerRadius}"
                                HorizontalAlignment="Center"
                                Margin="{uikit:UIKitBinding ImageGallery_CarouselContainer_Margin}"
                                Padding="{uikit:UIKitBinding ImageGallery_CarouselContainer_Padding}"
                                VerticalAlignment="Bottom"
                                Visibility="{Binding Visibility,
                                                     ElementName=PART_Carousel}">
                            <controls:Carousel x:Name="PART_Carousel"
                                               Style="{uikit:UIKitBinding ImageGallery_CarouselStyle}" />
                        </Border>

                        <Border Background="{uikit:UIKitBinding ImageGallery_CounterContainer_Background}"
                                CornerRadius="{uikit:UIKitBinding ImageGallery_CounterContainer_CornerRadius}"
                                HorizontalAlignment="Center"
                                Margin="{uikit:UIKitBinding ImageGallery_CounterContainer_Margin}"
                                Padding="{uikit:UIKitBinding ImageGallery_CounterContainer_Padding}"
                                VerticalAlignment="Bottom"
                                Visibility="{Binding Visibility,
                                                     ElementName=PART_Counter}">
                            <TextBlock x:Name="PART_Counter"
                                       Style="{uikit:UIKitBinding ImageGallery_CounterTextStyle}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ActualNavigationMode" Value="ArrowsOnly">
                            <Setter Property="Visibility" TargetName="PART_Carousel" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_Counter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ActualNavigationMode" Value="ArrowsAndCounter">
                            <Setter Property="Visibility" TargetName="PART_Carousel" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ActualNavigationMode" Value="ArrowsAndCarousel">
                            <Setter Property="Visibility" TargetName="PART_Counter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ActualNavigationMode" Value="Disabled">
                            <Setter Property="Visibility" TargetName="PART_PrevImageButton" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_NextImageButton" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_Carousel" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_Counter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="CloseCommand" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_CloseButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ImageGalleryButton  -->

    <Style x:Key="ImageGalleryButtonUniversal"
           TargetType="{x:Type controls:ImageGalleryButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding ImageGalleryButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageGalleryButton}">
                    <Border Background="{uikit:UIKitAnimatedBinding ImageGalleryButton_Background}"
                            BorderBrush="{uikit:UIKitAnimatedBinding ImageGalleryButton_BorderBrush}"
                            BorderThickness="{uikit:UIKitAnimatedBinding ImageGalleryButton_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding ImageGalleryButton_CornerRadius}"
                            Height="{uikit:UIKitBinding ImageGalleryButton_Height}"
                            Width="{uikit:UIKitBinding ImageGalleryButton_Width}">
                        <controls:Icon24 HorizontalAlignment="Center"
                                         Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                         IconForeground="{uikit:UIKitBinding ImageGalleryButton_Icon_Foreground}"
                                         VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ImageGalleryList  -->

    <Style x:Key="ImageGalleryListUniversal"
           TargetType="{x:Type controls:ImageGalleryList}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="ImageGap" Value="{uikit:UIKitBinding ImageGalleryList_ImageGap, Mode=Self, Type={x:Type system:Double}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageGalleryList}">
                    <Grid>
                        <ScrollViewer x:Name="PART_ScrollViewer"
                                      properties:ScrollViewerProps.OuterHorizontalScrollBar="False"
                                      HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
                            <ItemsControl Focusable="False"
                                          ItemsSource="{markupCommon:UIKitTemplateBinding ImageSources}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <controls:ImageGalleryListButton Command="{Binding ImageCommand,
                                                                                               RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                                              AncestorType={x:Type controls:ImageGalleryList}}}"
                                                                             CommandParameter="{Binding}"
                                                                             Height="{Binding ActualHeight,
                                                                                              RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                                             AncestorType={x:Type controls:ImageGalleryList}}}"
                                                                             ImageFlowDirection="{Binding ImageFlowDirection,
                                                                                                          RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                                                         AncestorType={x:Type controls:ImageGalleryList}}}"
                                                                             ImageSource="{Binding}"
                                                                             ImageStretch="{Binding ImageStretch,
                                                                                                    RelativeSource={RelativeSource Mode=FindAncestor,
                                                                                                                                   AncestorType={x:Type controls:ImageGalleryList}}}"
                                                                             Style="{uikit:UIKitBinding ImageGalleryList_ImageButtonStyle,
                                                                                                        Type={x:Type Style},
                                                                                                        Mode=FindAncestor,
                                                                                                        AncestorType={x:Type controls:ImageGalleryList}}" />

                                            <Rectangle Grid.Column="1"
                                                       Visibility="{markupItemIndex:ItemIndexToVisibiltyInverse Condition=Last}"
                                                       Width="{Binding ImageGap,
                                                                       RelativeSource={RelativeSource AncestorType={x:Type controls:ImageGalleryList}}}" />

                                        </Grid>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </ScrollViewer>

                        <controls:ImageGalleryButton x:Name="PART_PrevImageButton"
                                                     HorizontalAlignment="Left"
                                                     Margin="{uikit:UIKitBinding ImageGalleryList_LeftButton_Margin}"
                                                     Style="{uikit:UIKitBinding ImageGalleryList_LeftButtonStyle}" />

                        <controls:ImageGalleryButton x:Name="PART_NextImageButton"
                                                     HorizontalAlignment="Right"
                                                     Margin="{uikit:UIKitBinding ImageGalleryList_RightButton_Margin}"
                                                     Style="{uikit:UIKitBinding ImageGalleryList_RightButtonStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ImageGalleryListButton  -->

    <Style x:Key="ImageGalleryListButtonUniversal"
           TargetType="{x:Type controls:ImageGalleryListButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding ImageGalleryListButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ImageGalleryListButton}">
                    <Grid>
                        <Image FlowDirection="{markupCommon:UIKitTemplateBinding ImageFlowDirection}"
                               Source="{markupCommon:UIKitTemplateBinding ImageSource}"
                               Stretch="{markupCommon:UIKitTemplateBinding ImageStretch}" />
                        <Border Background="{uikit:UIKitAnimatedBinding ImageGalleryListButton_Background}"
                                BorderBrush="{uikit:UIKitAnimatedBinding ImageGalleryListButton_BorderBrush}"
                                BorderThickness="{uikit:UIKitAnimatedBinding ImageGalleryListButton_BorderThickness}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="Command" Value="{x:Null}">
                            <Setter Property="Cursor" Value="Arrow" />
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region InteractivityDialog  -->

    <Style x:Key="InteractivityDialogUniversal"
           TargetType="{x:Type controls:InteractivityDialog}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="HelpButtonCommand" Value="{x:Static ApplicationCommands.Help}" />
        <!--  Constant values  -->
        <Setter Property="DialogMargin" Value="{x:Static uikit:UIKitConstants.InteractivityDialogMargin}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:InteractivityDialog}">
                    <controls:InteractivityOverlay OverlayBehavior="{markupCommon:UIKitTemplateBinding OverlayBehavior}"
                                                   OverlayCommand="{markupCommon:UIKitTemplateBinding OverlayCommand}"
                                                   Style="{uikit:UIKitBinding InteractivityDialog_InteractivityOverlayStyle}">
                        <controls:RoundedPanel x:Name="PART_Dialog"
                                               Background="{uikit:UIKitBinding InteractivityDialog_Background}"
                                               BorderBrush="{uikit:UIKitBinding InteractivityDialog_BorderBrush}"
                                               BorderThickness="{uikit:UIKitBinding InteractivityDialog_BorderThickness}"
                                               CornerRadius="{uikit:UIKitBinding InteractivityDialog_CornerRadius}"
                                               HorizontalAlignment="Stretch"
                                               Margin="{markupCommon:UIKitTemplateBinding DialogMargin}"
                                               VerticalAlignment="Center"
                                               Width="{uikit:UIKitBinding InteractivityDialog_Width}">
                            <Grid Grid.IsSharedSizeScope="True">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <StackPanel x:Name="PART_ButtonsContainer"
                                            Grid.Row="0"
                                            HorizontalAlignment="Right"
                                            Margin="{uikit:UIKitBinding InteractivityDialog_ButtonsContainer_Margin}"
                                            Orientation="Horizontal"
                                            Panel.ZIndex="1"
                                            VerticalAlignment="Top">
                                    <controls:IconButton Command="{markupCommon:UIKitTemplateBinding HelpButtonCommand}"
                                                         Icon="{uikit:UIKitBinding InteractivityDialog_Button_HelpIcon}"
                                                         Margin="{uikit:UIKitBinding InteractivityDialog_Button_Margin}"
                                                         Style="{uikit:UIKitBinding InteractivityDialog_Button_Style}"
                                                         Visibility="{markupCommon:UIKitTemplateBinding HasHelpButton,
                                                                                                        Converter={booleanConverters:BooleanToVisibilityConverter False=Hidden}}" />
                                    <controls:IconButton x:Name="PART_CloseButton"
                                                         notifications:NotificationViewBehavior.IsCloseButton="True"
                                                         Command="{markupCommon:UIKitTemplateBinding CloseButtonCommand}"
                                                         Icon="{uikit:UIKitBinding InteractivityDialog_Button_CloseIcon}"
                                                         Margin="{uikit:UIKitBinding InteractivityDialog_Button_Margin}"
                                                         Style="{uikit:UIKitBinding InteractivityDialog_Button_Style}"
                                                         Visibility="{markupCommon:UIKitTemplateBinding HasCloseButton,
                                                                                                        Converter={booleanConverters:BooleanToVisibilityConverter}}" />
                                </StackPanel>

                                <Grid x:Name="PART_Header"
                                      Grid.Row="0"
                                      Margin="{uikit:UIKitBinding InteractivityDialog_HeaderContainer_Margin}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="StatusColumn" Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>

                                    <Grid Grid.Column="0"
                                          Margin="{uikit:UIKitBinding InteractivityDialog_Icon_Margin}"
                                          VerticalAlignment="Top"
                                          Visibility="{markupBinding:CompactMultiBinding Binding1={Binding Visibility,
                                                                                                           ElementName=PART_Status,
                                                                                                           Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                           ConverterParameter={x:Static Visibility.Collapsed}},
                                                                                         Binding2={Binding Visibility,
                                                                                                           ElementName=PART_Icon,
                                                                                                           Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                           ConverterParameter={x:Static Visibility.Collapsed}},
                                                                                         Converter={booleanConverters:MultiBooleanToVisibilityInverseConverter}}">

                                        <Grid x:Name="PART_Status"
                                              Visibility="{markupCommon:UIKitTemplateBinding Icon,
                                                                                             Converter={equalityConverters:EqualityToVisibilityConverter},
                                                                                             ConverterParameter={x:Null}}">
                                            <Ellipse Fill="{uikit:UIKitBinding InteractivityDialog_Status_Background}"
                                                     Height="{uikit:UIKitBinding InteractivityDialog_Status_Background_Height}"
                                                     Width="{uikit:UIKitBinding InteractivityDialog_Status_Background_Width}" />
                                            <controls:Icon24 HorizontalAlignment="Center"
                                                             Icon="{uikit:UIKitBinding InteractivityDialog_Status_IconName}"
                                                             IconForeground="{uikit:UIKitBinding InteractivityDialog_Status_Foreground}"
                                                             VerticalAlignment="Center"
                                                             Visibility="{markupCommon:UIKitTemplateBinding Type,
                                                                                                            Converter={equalityConverters:EqualityToVisibilityInverseConverter},
                                                                                                            ConverterParameter={x:Static controls:InteractivityDialogType.Loading}}" />
                                            <controls:Spinner HorizontalAlignment="Center"
                                                              Style="{uikit:UIKitBinding InteractivityDialog_Spinner_Style}"
                                                              VerticalAlignment="Center"
                                                              Visibility="{markupCommon:UIKitTemplateBinding Type,
                                                                                                             Converter={equalityConverters:EqualityToVisibilityConverter},
                                                                                                             ConverterParameter={x:Static controls:InteractivityDialogType.Loading}}" />
                                        </Grid>

                                        <Image x:Name="PART_Icon"
                                               Height="{uikit:UIKitBinding InteractivityDialog_Icon_Height}"
                                               Source="{markupCommon:UIKitTemplateBinding Icon}"
                                               Visibility="{markupCommon:UIKitTemplateBinding Icon,
                                                                                              Converter={equalityConverters:EqualityToVisibilityInverseConverter},
                                                                                              ConverterParameter={x:Null}}"
                                               Width="{uikit:UIKitBinding InteractivityDialog_Icon_Width}" />
                                    </Grid>

                                    <StackPanel Grid.Column="1"
                                                VerticalAlignment="Center">

                                        <uikit:UIKitContentPresenter x:Name="PART_HeaderPresenter"
                                                                     ContentSource="Header"
                                                                     Margin="{uikit:UIKitBinding InteractivityDialog_Header_Margin}">
                                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityDialog_HeaderStyle,
                                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                            StateAwareAncestorType={x:Type controls:InteractivityDialog}}" />
                                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        </uikit:UIKitContentPresenter>
                                        <uikit:UIKitContentPresenter x:Name="PART_SubHeaderPresenter"
                                                                     ContentSource="SubHeader"
                                                                     Margin="{uikit:UIKitBinding InteractivityDialog_SubHeader_Margin}">
                                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityDialog_SubHeaderStyle,
                                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                            StateAwareAncestorType={x:Type controls:InteractivityDialog}}" />
                                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        </uikit:UIKitContentPresenter>
                                        <uikit:UIKitContentPresenter x:Name="PART_DescriptionPresenter"
                                                                     ContentSource="Description"
                                                                     Margin="{uikit:UIKitBinding InteractivityDialog_Description_Margin}">
                                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityDialog_DescriptionStyle,
                                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                            StateAwareAncestorType={x:Type controls:InteractivityDialog}}" />
                                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        </uikit:UIKitContentPresenter>
                                    </StackPanel>
                                </Grid>

                                <Grid x:Name="PART_Content"
                                      Grid.Row="1"
                                      Margin="{uikit:UIKitBinding InteractivityDialog_ContentContainer_Margin}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="StatusColumn" Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <uikit:UIKitContentPresenter x:Name="PART_ContentPresenter"
                                                                 Grid.Column="0"
                                                                 Grid.ColumnSpan="2"
                                                                 ContentSource="Content">
                                        <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                            <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityDialog_DescriptionStyle,
                                                                                                        BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                        StateAwareAncestorType={x:Type controls:InteractivityDialog}}" />
                                        </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    </uikit:UIKitContentPresenter>
                                </Grid>


                                <uikit:UIKitContentPresenter x:Name="PART_FooterPresenter"
                                                             Grid.Row="2"
                                                             ContentSource="Footer"
                                                             Margin="{uikit:UIKitBinding InteractivityDialog_FooterContainer_Margin}">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityDialog_DescriptionStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:InteractivityDialog}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityDialog_FooterStyle,
                                                                                                    TargetType={x:Type controls:InteractivityDialogFooter}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>
                            </Grid>
                        </controls:RoundedPanel>
                    </controls:InteractivityOverlay>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DialogSize" Value="SizeToContent">
                            <Setter Property="Width" TargetName="PART_Dialog" Value="NaN" />
                            <Setter Property="VerticalAlignment" TargetName="PART_Dialog" Value="Center" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_Dialog" Value="Center" />
                        </Trigger>
                        <Trigger Property="SubHeader" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_SubHeaderPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="SubHeader" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="PART_SubHeaderPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Footer" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_FooterPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Footer" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="PART_FooterPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Description" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_DescriptionPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Description" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="PART_DescriptionPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Content" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ContentPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="PART_Content" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ContentPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_HeaderPresenter" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_SubHeaderPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="PART_HeaderPresenter" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_SubHeaderPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Type" Value="{x:Static controls:InteractivityDialogType.Neutral}">
                            <Setter Property="Visibility" TargetName="PART_Status" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="UseContentLeftPadding" Value="True">
                            <Setter Property="Grid.Column" TargetName="PART_ContentPresenter" Value="1" />
                            <Setter Property="Grid.ColumnSpan" TargetName="PART_ContentPresenter" Value="1" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Type" Value="{x:Static controls:InteractivityDialogType.Neutral}" />
                                <Condition Property="Visibility" SourceName="PART_SubHeaderPresenter" Value="Collapsed" />
                                <Condition Property="Visibility" SourceName="PART_HeaderPresenter" Value="Collapsed" />
                                <Condition Property="Visibility" SourceName="PART_FooterPresenter" Value="Collapsed" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Grid.Row" TargetName="PART_ButtonsContainer" Value="1" />
                            <Setter Property="Visibility" TargetName="PART_Header" Value="Collapsed" />
                            <Setter Property="Margin" TargetName="PART_Content" Value="0" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region InteractivityDialogFooter  -->

    <Style x:Key="InteractivityDialogFooterUniversal"
           TargetType="{x:Type controls:InteractivityDialogFooter}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="PrimaryButtonStyle" Value="{uikit:UIKitBinding InteractivityDialogFooter_PrimaryButtonStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="SecondaryButtonStyle" Value="{uikit:UIKitBinding InteractivityDialogFooter_SecondaryButtonStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="ReferenceButtonStyle" Value="{uikit:UIKitBinding InteractivityDialogFooter_ReferenceButtonStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:InteractivityDialogFooter}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Button x:Name="PART_ReferenceButton"
                                Command="{markupCommon:UIKitTemplateBinding ReferenceButtonCommand}"
                                Content="{markupCommon:UIKitTemplateBinding ReferenceButtonCaption}"
                                Style="{markupCommon:UIKitTemplateBinding ReferenceButtonStyle}" />

                        <StackPanel Grid.Column="1"
                                    HorizontalAlignment="Right"
                                    Orientation="Horizontal">
                            <Button x:Name="PART_PrimaryButton"
                                    notifications:NotificationViewBehavior.IsConfirmButton="{markupCommon:UIKitTemplateBinding IsPrimaryCloseButton}"
                                    properties:ButtonProps.Icon="{markupCommon:UIKitTemplateBinding PrimaryButtonIcon}"
                                    properties:ButtonProps.IconLocation="{markupCommon:UIKitTemplateBinding PrimaryButtonIconLocation}"
                                    Command="{markupCommon:UIKitTemplateBinding PrimaryButtonCommand}"
                                    Content="{markupCommon:UIKitTemplateBinding PrimaryButtonCaption}"
                                    IsCancel="{markupCommon:UIKitTemplateBinding IsPrimaryCancelButton}"
                                    IsDefault="{markupCommon:UIKitTemplateBinding IsPrimaryDefaultButton}"
                                    IsEnabled="{markupCommon:UIKitTemplateBinding PrimaryButtonEnabled}"
                                    Margin="{uikit:UIKitBinding InteractivityDialogFooter_ButtonMargin}"
                                    Style="{markupCommon:UIKitTemplateBinding PrimaryButtonStyle}" />
                            <Button x:Name="PART_SecondaryButton"
                                    notifications:NotificationViewBehavior.IsCloseButton="{markupCommon:UIKitTemplateBinding IsSecondaryCloseButton}"
                                    properties:ButtonProps.Icon="{markupCommon:UIKitTemplateBinding SecondaryButtonIcon}"
                                    properties:ButtonProps.IconLocation="{markupCommon:UIKitTemplateBinding SecondaryButtonIconLocation}"
                                    Command="{markupCommon:UIKitTemplateBinding SecondaryButtonCommand}"
                                    Content="{markupCommon:UIKitTemplateBinding SecondaryButtonCaption}"
                                    IsCancel="{markupCommon:UIKitTemplateBinding IsSecondaryCancelButton}"
                                    IsDefault="{markupCommon:UIKitTemplateBinding IsSecondaryDefaultButton}"
                                    IsEnabled="{markupCommon:UIKitTemplateBinding SecondaryButtonEnabled}"
                                    Margin="{uikit:UIKitBinding InteractivityDialogFooter_ButtonMargin}"
                                    Style="{markupCommon:UIKitTemplateBinding SecondaryButtonStyle}" />
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SecondaryButtonCaption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_SecondaryButton" Value="Collapsed" />
                            <Setter Property="IsCancel" TargetName="PART_PrimaryButton" Value="True" />
                            <Setter Property="IsDefault" TargetName="PART_PrimaryButton" Value="True" />
                        </Trigger>
                        <Trigger Property="PrimaryButtonCaption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_PrimaryButton" Value="Collapsed" />
                            <Setter Property="IsCancel" TargetName="PART_SecondaryButton" Value="True" />
                            <Setter Property="IsDefault" TargetName="PART_SecondaryButton" Value="True" />
                        </Trigger>
                        <Trigger Property="ReferenceButtonCaption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_ReferenceButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region InteractivityNotification  -->

    <Style x:Key="InteractivityNotificationUniversal"
           TargetType="{x:Type controls:InteractivityNotification}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:InteractivityNotification}">
                    <controls:RoundedPanel Background="{uikit:UIKitBinding InteractivityNotification_Background}"
                                           BorderBrush="{uikit:UIKitBinding InteractivityNotification_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding InteractivityNotification_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding InteractivityNotification_CornerRadius}"
                                           Effect="{uikit:UIKitBinding InteractivityNotification_Shadow}"
                                           Margin="{uikit:UIKitBinding InteractivityNotification_Margin}"
                                           Padding="{uikit:UIKitBinding InteractivityNotification_Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0"
                                        Margin="{uikit:UIKitBinding InteractivityNotification_Content_Margin}"
                                        Orientation="Horizontal">

                                <controls:Icon24 x:Name="PART_StatusIcon"
                                                 Icon="{uikit:UIKitBinding InteractivityNotification_Status_IconName}"
                                                 IconForeground="{uikit:UIKitBinding InteractivityNotification_Status_Foreground}"
                                                 Margin="{uikit:UIKitBinding InteractivityNotification_Icon_Margin}"
                                                 SnapsToDevicePixels="False"
                                                 UseLayoutRounding="False"
                                                 Visibility="{markupCommon:UIKitTemplateBinding Type,
                                                                                                Converter={equalityConverters:EqualityToVisibilityInverseConverter},
                                                                                                ConverterParameter={x:Static controls:InteractivityNotificationType.Neutral}}" />

                                <controls:Icon24 x:Name="PART_Icon"
                                                 Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                                 IconForeground="{uikit:UIKitBinding InteractivityNotification_Icon_Foreground}"
                                                 Margin="{uikit:UIKitBinding InteractivityNotification_Icon_Margin}"
                                                 SnapsToDevicePixels="False"
                                                 UseLayoutRounding="False"
                                                 Visibility="{markupBinding:CompactMultiBinding Binding1={Binding IsUnset,
                                                                                                                  RelativeSource={RelativeSource Self}},
                                                                                                Binding2={markupCommon:UIKitTemplateBinding Type,
                                                                                                                                            Converter={equalityConverters:EqualityToBooleanInverseConverter},
                                                                                                                                            ConverterParameter={x:Static controls:InteractivityNotificationType.Neutral}},
                                                                                                Converter={booleanConverters:MultiBooleanToVisibilityInverseConverter Operation=Or}}" />

                                <uikit:UIKitContentPresenter x:Name="PART_Content"
                                                             Content="{markupCommon:UIKitTemplateBinding Content}"
                                                             HorizontalAlignment="Stretch"
                                                             Margin="{uikit:UIKitBinding InteractivityNotification_Text_Margin}"
                                                             MaxHeight="{uikit:UIKitBinding InteractivityNotification_Text_MaxHeight}"
                                                             MaxWidth="{uikit:UIKitBinding InteractivityNotification_Text_MaxWidth}"
                                                             VerticalAlignment="Stretch">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle InteractivityNotification_TextStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTrimmingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:InteractivityNotification}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>
                            </StackPanel>

                            <Button x:Name="PART_ActionButton"
                                    Grid.Column="1"
                                    Command="{markupCommon:UIKitTemplateBinding ActionCommand}"
                                    Content="{markupCommon:UIKitTemplateBinding ActionCaption}"
                                    Margin="{uikit:UIKitBinding InteractivityNotification_ActionButton_Margin}"
                                    MaxWidth="{uikit:UIKitBinding InteractivityNotification_ActionButton_MaxWidth}"
                                    Style="{uikit:UIKitBinding InteractivityNotification_ActionButton_ButtonStyle}"
                                    VerticalAlignment="Top" />

                            <controls:IconButton x:Name="PART_CloseButton"
                                                 Grid.Column="2"
                                                 notifications:NotificationViewBehavior.IsCloseButton="True"
                                                 Command="{markupCommon:UIKitTemplateBinding CloseButtonCommand}"
                                                 HorizontalAlignment="Center"
                                                 Margin="{uikit:UIKitBinding InteractivityNotification_CloseButtton_Margin}"
                                                 Style="{uikit:UIKitBinding InteractivityNotification_CloseButttonStyle}"
                                                 VerticalAlignment="Top" />
                        </Grid>
                    </controls:RoundedPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ActionCaption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_ActionButton" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="ActionCaption" Value="{x:Static system:String.Empty}">
                            <Setter Property="Visibility" TargetName="PART_ActionButton" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasCloseButton" Value="False">
                            <Setter Property="Visibility" TargetName="PART_CloseButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region InteractivityOverlay  -->

    <Style x:Key="InteractivityOverlayUniversal"
           TargetType="{x:Type controls:InteractivityOverlay}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:InteractivityOverlay}">
                    <Grid>
                        <Border x:Name="PART_OverlayBackground"
                                Background="{uikit:UIKitBinding InteractivityOverlay_Background}" />

                        <Canvas x:Name="PART_OverlayCutDecoratorsContainer" />

                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Island  -->

    <Style x:Key="IslandUniversal"
           TargetType="{x:Type controls:Island}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Padding" Value="{uikit:UIKitBinding Island_Padding, Mode=Self, Type={x:Type Thickness}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Island}">
                    <controls:RoundedPanel Background="{uikit:UIKitBinding Island_Background}"
                                           BorderBrush="{uikit:UIKitBinding Island_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding Island_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding Island_CornerRadius}"
                                           Effect="{uikit:UIKitBinding Island_Shadow}"
                                           Padding="{markupCommon:UIKitTemplateBinding Padding}">
                        <ContentPresenter />
                    </controls:RoundedPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region IslandButton  -->

    <Style x:Key="IslandButtonUniversal"
           TargetType="{x:Type controls:IslandButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding IslandButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="Padding" Value="{uikit:UIKitBinding IslandButton_Padding, Mode=Self, Type={x:Type Thickness}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IslandButton}">
                    <controls:RoundedPanel Background="{uikit:UIKitBinding IslandButton_Background}"
                                           BorderBrush="{uikit:UIKitBinding IslandButton_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding IslandButton_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding IslandButton_CornerRadius}"
                                           Effect="{uikit:UIKitBinding IslandButton_Shadow}"
                                           Padding="{markupCommon:UIKitTemplateBinding Padding}">
                        <ContentPresenter />
                    </controls:RoundedPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region IslandToggleButton  -->

    <Style x:Key="IslandToggleButtonUniversal"
           TargetType="{x:Type controls:IslandToggleButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding IslandToggleButton_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />
        <Setter Property="Padding" Value="{uikit:UIKitBinding IslandToggleButton_Padding, Mode=Self, Type={x:Type Thickness}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:IslandToggleButton}">
                    <controls:RoundedPanel Background="{uikit:UIKitBinding IslandToggleButton_Background}"
                                           BorderBrush="{uikit:UIKitBinding IslandToggleButton_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding IslandToggleButton_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding IslandToggleButton_CornerRadius}"
                                           Effect="{uikit:UIKitBinding IslandToggleButton_Shadow}"
                                           Padding="{markupCommon:UIKitTemplateBinding Padding}">
                        <ContentPresenter />
                    </controls:RoundedPanel>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Normal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Hover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedHover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Pressed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedPressed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Disabled" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedDisabled" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ListMenu  -->

    <Style x:Key="ListMenuUniversal"
           TargetType="{x:Type controls:ListMenu}">
        <Setter Property="AlternationCount" Value="{Binding RelativeSource={RelativeSource Self}, Path=Items.Count}" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <!--  Constant values  -->
        <Setter Property="Padding" Value="{x:Static uikit:UIKitConstants.ListMenuPadding}" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="True"
                                            VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ListMenu}">
                    <ScrollViewer x:Name="PART_ScrollViewer">
                        <ItemsPresenter Margin="{markupCommon:UIKitTemplateBinding Padding}" />
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ListMenuItem  -->

    <Style x:Key="ListMenuItemUniversal"
           TargetType="{x:Type controls:ListMenuItem}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding ListMenuItem_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ListMenuItem}">
                    <controls:RoundedPanel Background="{uikit:UIKitBinding ListMenuItem_Background}"
                                           BorderBrush="{uikit:UIKitBinding ListMenuItem_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding ListMenuItem_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding ListMenuItem_CornerRadius}">
                        <Grid>
                            <uikit:UIKitContentPresenter ContentSource="Content"
                                                         VerticalAlignment="Center" />

                            <Grid Margin="{uikit:UIKitBinding ListMenuItem_Padding}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition SharedSizeGroup="Icon" Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Grid x:Name="PART_IconContainer"
                                      Grid.Column="0"
                                      Margin="{uikit:UIKitBinding ListMenuItem_Icon_Margin}"
                                      VerticalAlignment="Center">

                                    <Image x:Name="Image"
                                           Source="{markupCommon:UIKitTemplateBinding Image}" />

                                    <controls:Icon16 x:Name="Icon"
                                                     Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                                     IconForeground="{uikit:UIKitBinding ListMenuItem_Icon_Foreground}" />
                                </Grid>

                                <uikit:UIKitContentPresenter Grid.Column="1"
                                                             Content="{markupCommon:UIKitTemplateBinding Header}"
                                                             VerticalAlignment="Center">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle ListMenuItem_TextStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:ListMenuItem}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>
                            </Grid>
                        </Grid>
                    </controls:RoundedPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelectable" Value="False">
                            <Setter Property="Focusable" Value="False" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="PART_IconContainer" Value="0" />
                        </Trigger>
                        <Trigger Property="Image" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Image" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="vs:StateService.SelectableState" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Visibility" SourceName="Image" Value="Collapsed" />
                                <Condition Property="Visibility" SourceName="Icon" Value="Collapsed" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_IconContainer" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelectable" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Normal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Cursor" Value="Arrow" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelectable" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Hover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelectable" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Hover" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.SelectableState" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region MenuItem  -->

    <Style x:Key="MenuItemUniversal"
           TargetType="{x:Type controls:MenuItemBase}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="True"
                                            VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Style.Resources>
            <ControlTemplate x:Key="MenuItemDividerTemplate"
                             TargetType="{x:Type controls:MenuItemDivider}">
                <controls:Divider Margin="{uikit:UIKitBinding PopupDecorator_Padding,
                                                              Mode=FindAncestor,
                                                              AncestorType=controls:ContextMenuPopupDecorator}"
                                  Orientation="Horizontal" />
            </ControlTemplate>

            <ControlTemplate x:Key="MenuItemGroupHeaderTemplate"
                             TargetType="{x:Type controls:MenuItemGroupHeader}">
                <uikit:UIKitContentPresenter x:Name="PART_GroupHeader"
                                             ContentSource="Header"
                                             Margin="{uikit:UIKitBinding MenuItem_GroupHeader_Margin}">
                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle MenuItem_GroupHeaderStyle,
                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                    StateAwareAncestorType={x:Type controls:MenuItem}}" />
                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                </uikit:UIKitContentPresenter>
            </ControlTemplate>

            <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                             TargetType="{x:Type controls:MenuItem}">
                <Border x:Name="PART_Root"
                        Background="{uikit:UIKitBinding MenuItem_Background}"
                        MinHeight="{uikit:UIKitBinding MenuItem_MinHeight}"
                        Padding="{uikit:UIKitBinding MenuItem_Padding}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="Icon" Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition SharedSizeGroup="Shortcut" Width="Auto" />
                            <ColumnDefinition SharedSizeGroup="SubMenuIcon" Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Image x:Name="Image"
                               Grid.Column="0"
                               Height="{x:Static uikit:UIKitConstants.MenuItemIconHeight}"
                               Margin="{uikit:UIKitBinding MenuItem_Icon_Margin}"
                               Source="{markupCommon:UIKitTemplateBinding Icon,
                                                                          Converter={internals:ObjectToIconConverter}}"
                               VerticalAlignment="Top"
                               Width="{x:Static uikit:UIKitConstants.MenuItemIconWidth}" />

                        <controls:Icon16 x:Name="Icon"
                                         Grid.Column="0"
                                         Icon="{markupCommon:UIKitTemplateBinding Icon,
                                                                                  Converter={internals:ObjectToIconConverter FallbackValue={x:Static icons:UIKitIcon_16.UIKitUnset}}}"
                                         IconForeground="{markupBinding:ConditionalBinding True={uikit:UIKitBinding MenuItem_Icon_Foreground,
                                                                                                                    Type={x:Type Brush},
                                                                                                                    Mode=TemplatedParent},
                                                                                           False={markupCommon:UIKitTemplateBinding IconBrush},
                                                                                           Condition={markupCommon:UIKitTemplateBinding IconBrush,
                                                                                                                                        Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                                                        ConverterParameter={x:Null}}}"
                                         Margin="{uikit:UIKitBinding MenuItem_Icon_Margin}" />

                        <StackPanel Grid.Column="1"
                                    VerticalAlignment="Center">
                            <Grid HorizontalAlignment="Left">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <uikit:UIKitContentPresenter ContentSource="Header">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle MenuItem_TextStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:MenuItem}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>
                                <controls:Badge x:Name="PART_Badge"
                                                Grid.Column="1"
                                                Margin="{uikit:UIKitBinding MenuItem_Badge_Margin}"
                                                Type="{markupCommon:UIKitTemplateBinding BadgeType}"
                                                VerticalAlignment="Center" />
                            </Grid>

                            <uikit:UIKitContentPresenter x:Name="PART_Description"
                                                         Content="{markupCommon:UIKitTemplateBinding Description}"
                                                         Margin="{uikit:UIKitBinding MenuItem_Description_Margin}">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle MenuItem_DescriptionStyle,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:MenuItem}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </StackPanel>

                        <controls:Icon16 x:Name="SubmenuIcon"
                                         Grid.Column="3"
                                         Icon="{uikit:UIKitBinding MenuItem_SubmenuIcon_Name}"
                                         IconForeground="{uikit:UIKitBinding MenuItem_SubmenuIcon_Foreground}"
                                         Margin="{uikit:UIKitBinding MenuItem_SubmenuIcon_Margin}"
                                         SnapsToDevicePixels="False"
                                         UseLayoutRounding="False"
                                         VerticalAlignment="Center" />

                        <controls:ContextMenuPopup AllowsTransparency="True"
                                                   Focusable="False"
                                                   IsOpen="{markupCommon:UIKitTemplateBinding IsSubmenuOpen}"
                                                   PlacementTarget="{Binding ElementName=PART_Root}"
                                                   PopupAnimation="Fade">
                            <controls:ContextMenuPopupDecorator Style="{uikit:UIKitBinding MenuItem_PopupDecoratorStyle}">
                                <ScrollViewer properties:ScrollViewerProps.OuterVerticalScrollBar="True"
                                              CanContentScroll="True">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Cycle" />
                                </ScrollViewer>
                            </controls:ContextMenuPopupDecorator>
                        </controls:ContextMenuPopup>
                    </Grid>
                </Border>

                <ControlTemplate.Triggers>
                    <Trigger Property="Source" SourceName="Image" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="Image" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="Description" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="PART_Description" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="HasBadge" Value="False">
                        <Setter Property="Visibility" TargetName="PART_Badge" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="False">
                        <Setter Property="vs:StateService.State" Value="Normal" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="vs:StateService.State" Value="Hover" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="vs:StateService.State" Value="Pressed" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="vs:StateService.State" Value="Disabled" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                             TargetType="{x:Type controls:MenuItem}">
                <Border x:Name="PART_Root"
                        Background="{uikit:UIKitBinding MenuItem_Background}"
                        MinHeight="{uikit:UIKitBinding MenuItem_MinHeight}"
                        Padding="{uikit:UIKitBinding MenuItem_Padding}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition SharedSizeGroup="Icon" Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition SharedSizeGroup="Shortcut" Width="Auto" />
                            <ColumnDefinition SharedSizeGroup="SubMenuIcon" Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Image x:Name="Image"
                               Grid.Column="0"
                               Height="{x:Static uikit:UIKitConstants.MenuItemIconHeight}"
                               Margin="{uikit:UIKitBinding MenuItem_Icon_Margin}"
                               Source="{markupCommon:UIKitTemplateBinding Icon,
                                                                          Converter={internals:ObjectToIconConverter}}"
                               VerticalAlignment="Top"
                               Width="{x:Static uikit:UIKitConstants.MenuItemIconWidth}" />

                        <controls:Icon16 x:Name="Icon"
                                         Grid.Column="0"
                                         Icon="{markupCommon:UIKitTemplateBinding Icon,
                                                                                  Converter={internals:ObjectToIconConverter FallbackValue={x:Static icons:UIKitIcon_16.UIKitUnset}}}"
                                         IconForeground="{markupBinding:ConditionalBinding True={uikit:UIKitBinding MenuItem_Icon_Foreground,
                                                                                                                    Type={x:Type Brush},
                                                                                                                    Mode=TemplatedParent},
                                                                                           False={markupCommon:UIKitTemplateBinding IconBrush},
                                                                                           Condition={markupCommon:UIKitTemplateBinding IconBrush,
                                                                                                                                        Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                                                        ConverterParameter={x:Null}}}"
                                         Margin="{uikit:UIKitBinding MenuItem_Icon_Margin}" />

                        <StackPanel Grid.Column="1"
                                    VerticalAlignment="Center">
                            <Grid HorizontalAlignment="Left">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <uikit:UIKitContentPresenter ContentSource="Header">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle MenuItem_TextStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:MenuItem}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>
                                <controls:Badge x:Name="PART_Badge"
                                                Grid.Column="1"
                                                Margin="{uikit:UIKitBinding MenuItem_Badge_Margin}"
                                                Type="{markupCommon:UIKitTemplateBinding BadgeType}"
                                                VerticalAlignment="Center" />
                            </Grid>
                            <uikit:UIKitContentPresenter x:Name="PART_Description"
                                                         Content="{markupCommon:UIKitTemplateBinding Description}"
                                                         Margin="{uikit:UIKitBinding MenuItem_Description_Margin}">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle MenuItem_DescriptionStyle,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:MenuItem}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </StackPanel>

                        <controls:Icon16 x:Name="MarkCheckBoxIcon"
                                         Grid.Column="3"
                                         Icon="{uikit:UIKitBinding MenuItem_CheckBoxMarkIcon_Name}"
                                         IconForeground="{uikit:UIKitBinding MenuItem_CheckBoxMarkIcon_Foreground}"
                                         Margin="{uikit:UIKitBinding MenuItem_CheckBoxMarkIcon_Margin}"
                                         SnapsToDevicePixels="False"
                                         UseLayoutRounding="False"
                                         VerticalAlignment="Center" />
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Source" SourceName="Image" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="Image" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="Description" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="PART_Description" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="HasBadge" Value="False">
                        <Setter Property="Visibility" TargetName="PART_Badge" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsCheckable" Value="False">
                        <Setter Property="Visibility" TargetName="MarkCheckBoxIcon" Value="Collapsed" />
                    </Trigger>
                    <Trigger Property="IsCheckable" Value="True">
                        <Setter Property="Visibility" TargetName="MarkCheckBoxIcon" Value="Hidden" />
                        <Setter Property="StaysOpenOnClick" Value="True" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Visibility" TargetName="MarkCheckBoxIcon" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="False">
                        <Setter Property="vs:StateService.State" Value="Normal" />
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter Property="vs:StateService.State" Value="Hover" />
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="vs:StateService.State" Value="Pressed" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="vs:StateService.State" Value="Disabled" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>

        <Style.Triggers>
            <Trigger Property="MenuItemRole" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="MenuItemRole" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="MenuItemRole" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="MenuItemRole" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="MenuItemRole" Value="MenuItemDivider">
                <Setter Property="Template" Value="{StaticResource MenuItemDividerTemplate}" />
            </Trigger>
            <Trigger Property="MenuItemRole" Value="MenuItemGroupHeader">
                <Setter Property="Template" Value="{StaticResource MenuItemGroupHeaderTemplate}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  endregion  -->

    <!--  region NotificationHint  -->

    <Style x:Key="NotificationHintUniversal"
           TargetType="{x:Type controls:NotificationHint}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NotificationHint}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <controls:Icon16 Icon="{uikit:UIKitBinding NotificationHint_Icon_Name}"
                                         IconForeground="{uikit:UIKitBinding NotificationHint_Icon_Color}"
                                         Margin="{uikit:UIKitBinding NotificationHint_Icon_Margin}" />

                        <uikit:UIKitContentPresenter Grid.Column="1">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationHint_TextStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:NotificationHint}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region NotificationPanel  -->

    <Style x:Key="NotificationPanelUniversal"
           TargetType="{x:Type controls:NotificationPanel}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NotificationPanel}">
                    <Border x:Name="PART_Root"
                            Background="{uikit:UIKitBinding NotificationPanel_Background}"
                            BorderBrush="{uikit:UIKitBinding NotificationPanel_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding NotificationPanel_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding NotificationPanel_CornerRadius}"
                            Padding="{uikit:UIKitBinding NotificationPanel_Padding}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <controls:Icon24 x:Name="PART_Icon"
                                             Grid.Column="0"
                                             Icon="{uikit:UIKitBinding NotificationPanel_Icon_Name}"
                                             IconForeground="{uikit:UIKitBinding NotificationPanel_Icon_Color}"
                                             Margin="{uikit:UIKitBinding NotificationPanel_Icon_Margin}"
                                             VerticalAlignment="Top"
                                             Visibility="{Binding IsVisible,
                                                                  ElementName=PART_Image,
                                                                  Converter={booleanConverters:BooleanToVisibilityInverseConverter}}" />

                            <Image x:Name="PART_Image"
                                   Grid.Column="0"
                                   Height="{uikit:UIKitBinding NotificationPanel_Icon_Height}"
                                   Margin="{uikit:UIKitBinding NotificationPanel_Icon_Margin}"
                                   Source="{markupCommon:UIKitTemplateBinding Icon}"
                                   VerticalAlignment="Top"
                                   Width="{uikit:UIKitBinding NotificationPanel_Icon_Width}" />

                            <StackPanel Grid.Column="1"
                                        Margin="{uikit:UIKitBinding NotificationPanel_TextContainer_Margin}"
                                        VerticalAlignment="Center">

                                <uikit:UIKitContentPresenter x:Name="PART_HeaderPresenter"
                                                             ContentSource="Header"
                                                             HorizontalAlignment="Stretch"
                                                             Margin="{uikit:UIKitBinding NotificationPanel_Header_Margin}">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_HeaderStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_ButtonStyle,
                                                                                                    TargetType={x:Type Button},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_SplitButtonStyle,
                                                                                                    TargetType={x:Type controls:SplitButton},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>

                                <uikit:UIKitContentPresenter x:Name="PART_SubHeaderPresenter"
                                                             ContentSource="SubHeader"
                                                             HorizontalAlignment="Stretch"
                                                             Margin="{uikit:UIKitBinding NotificationPanel_SubHeader_Margin}">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_SubHeaderStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_ButtonStyle,
                                                                                                    TargetType={x:Type Button},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_SplitButtonStyle,
                                                                                                    TargetType={x:Type controls:SplitButton},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>

                                <uikit:UIKitContentPresenter x:Name="PART_ContentPresenter"
                                                             ContentSource="Content"
                                                             HorizontalAlignment="Stretch"
                                                             Margin="{uikit:UIKitBinding NotificationPanel_Text_Margin}">
                                    <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_TextStyle,
                                                                                                    BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_ButtonStyle,
                                                                                                    TargetType={x:Type Button},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                        <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_SplitButtonStyle,
                                                                                                    TargetType={x:Type controls:SplitButton},
                                                                                                    StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                    </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                </uikit:UIKitContentPresenter>

                            </StackPanel>

                            <uikit:UIKitContentPresenter x:Name="PART_RightBarPresenter"
                                                         Grid.Column="2"
                                                         ContentSource="RightBar"
                                                         HorizontalAlignment="Right"
                                                         Margin="{uikit:UIKitBinding NotificationPanel_RightBar_Margin}"
                                                         VerticalAlignment="Top">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_ButtonStyle,
                                                                                                TargetType={x:Type Button},
                                                                                                StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationPanel_SplitButtonStyle,
                                                                                                TargetType={x:Type controls:SplitButton},
                                                                                                StateAwareAncestorType={x:Type controls:NotificationPanel}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Image" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="SubHeader" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_SubHeaderPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="RightBar" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_RightBarPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_ContentPresenter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_HeaderPresenter" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_SubHeaderPresenter" Value="Collapsed" />
                            <Setter Property="Margin" TargetName="PART_ContentPresenter" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region NotificationSpinner  -->

    <Style x:Key="NotificationSpinnerUniversal"
           TargetType="{x:Type controls:NotificationSpinner}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NotificationSpinner}">
                    <StackPanel x:Name="PART_NotificationSpinner"
                                HorizontalAlignment="Center"
                                Orientation="{uikit:UIKitBinding NotificationSpinner_Orientation}"
                                VerticalAlignment="Center">
                        <controls:Spinner x:Name="PART_Spinner"
                                          Margin="{uikit:UIKitBinding NotificationSpinner_Spinner_Margin}"
                                          Style="{uikit:UIKitBinding NotificationSpinner_Spinner_Style}"
                                          VerticalAlignment="Top" />

                        <StackPanel x:Name="PART_Container"
                                    HorizontalAlignment="Center">
                            <uikit:UIKitContentPresenter x:Name="PART_HeaderPresenter"
                                                         ContentSource="Header"
                                                         VerticalAlignment="Top">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationSpinner_Header_Style,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:NotificationSpinner}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>

                            <uikit:UIKitContentPresenter x:Name="PART_ContentPresenter"
                                                         ContentSource="Content"
                                                         Margin="{uikit:UIKitBinding NotificationSpinner_Text_Margin}">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle NotificationSpinner_Text_Style,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:NotificationSpinner}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </StackPanel>
                    </StackPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="VerticalAlignment" TargetName="PART_Container" Value="Center" />
                            <Setter Property="Margin" TargetName="PART_ContentPresenter" Value="0" />
                        </Trigger>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="VerticalAlignment" TargetName="PART_Container" Value="Center" />
                        </Trigger>
                        <Trigger Property="Orientation" SourceName="PART_NotificationSpinner" Value="Horizontal">
                            <Setter Property="HorizontalAlignment" TargetName="PART_HeaderPresenter" Value="Left" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_ContentPresenter" Value="Left" />
                        </Trigger>
                        <Trigger Property="Orientation" SourceName="PART_NotificationSpinner" Value="Vertical">
                            <Setter Property="HorizontalAlignment" TargetName="PART_HeaderPresenter" Value="Center" />
                            <Setter Property="HorizontalAlignment" TargetName="PART_ContentPresenter" Value="Center" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region NumberInput  -->

    <Style x:Key="NumberInputUniversal"
           TargetType="{x:Type controls:NumberInput}">
        <Style.Resources>
            <Style TargetType="{x:Type controls:NumberInputAction}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Center" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controls:NumberInputAction}">
                            <controls:IconButton x:Name="PART_ActionButton" />
                            <ControlTemplate.Triggers>
                                <Trigger Property="ActionType" Value="Decrease">
                                    <Setter Property="ToolTip" Value="{xl:Loc NumberInputAction_DecreaseToolTip, Scope=UiKit}" />
                                    <Setter Property="Icon" TargetName="PART_ActionButton" Value="{uikit:UIKitBinding NumberInput_ActionDecrease_IconName, Type={x:Type icons:UIKitIcon_16}, Mode=FindAncestor, AncestorType={x:Type controls:NumberInput}}" />
                                </Trigger>
                                <Trigger Property="ActionType" Value="Increase">
                                    <Setter Property="ToolTip" Value="{xl:Loc NumberInputAction_IncreaseToolTip, Scope=UiKit}" />
                                    <Setter Property="Icon" TargetName="PART_ActionButton" Value="{uikit:UIKitBinding NumberInput_ActionIncrease_IconName, Type={x:Type icons:UIKitIcon_16}, Mode=FindAncestor, AncestorType={x:Type controls:NumberInput}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NumberInput}">
                    <controls:TextInput x:Name="PART_TextInput" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="IsInvalidState" Value="True" />
                        </Trigger>
                        <Trigger Property="IsValid" Value="False">
                            <Setter Property="IsInvalidState" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region PasswordInput  -->

    <controls:InputActionCollection x:Key="PasswordInputActions"
                                    x:Shared="false">
        <controls:PasswordInputCapsLockAction />
        <controls:PasswordInputRevealAction />
    </controls:InputActionCollection>

    <Style x:Key="PasswordInputUniversal"
           TargetType="{x:Type controls:PasswordInput}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="LostFocusBehavior" Value="WhenClickOutside" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ActionBar" Value="{StaticResource PasswordInputActions}" />

        <!--  Constant values  -->
        <Setter Property="MaxLength" Value="{x:Static uikit:UIKitConstants.PasswordInputMaxLength}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PasswordInput}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <uikit:UIKitContentPresenter x:Name="PART_Label"
                                                     Grid.Row="0"
                                                     Content="{markupCommon:UIKitTemplateBinding Label}"
                                                     IsHitTestVisible="False"
                                                     Margin="{uikit:UIKitBinding PasswordInput_Label_Margin}">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle PasswordInput_LabelStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:PasswordInput}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>

                        <Grid x:Name="PART_PasswordInput"
                              Grid.Row="1"
                              controls:Popup.IsPopupTarget="True"
                              Height="{uikit:UIKitBinding PasswordInput_Height}"
                              HorizontalAlignment="{markupCommon:UIKitTemplateBinding InputHorizontalAlignment}"
                              Width="{markupCommon:UIKitTemplateBinding controls:PasswordInput.InputWidth}">
                            <controls:RoundedPanel x:Name="PART_PasswordInputDecorator"
                                                   Background="{uikit:UIKitBinding PasswordInput_Background}"
                                                   BorderBrush="{uikit:UIKitBinding PasswordInput_BorderBrush}"
                                                   BorderThickness="{uikit:UIKitBinding PasswordInput_BorderThickness}"
                                                   CornerRadius="{uikit:UIKitBinding PasswordInput_CornerRadius}"
                                                   HorizontalAlignment="Stretch"
                                                   VerticalAlignment="Stretch">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <PasswordBox x:Name="PART_InputPasswordElement"
                                                 ContextMenu="{StaticResource InputContextMenu}"
                                                 FocusVisualStyle="{x:Null}"
                                                 MaxLength="{markupCommon:UIKitTemplateBinding MaxLength}"
                                                 OverridesDefaultStyle="True"
                                                 PasswordChar="â"
                                                 TabIndex="{markupCommon:UIKitTemplateBinding TabIndex}">
                                        <PasswordBox.Style>
                                            <Style TargetType="{x:Type PasswordBox}" />
                                        </PasswordBox.Style>

                                        <PasswordBox.Template>
                                            <ControlTemplate>
                                                <ScrollViewer x:Name="PART_ContentHost" />
                                            </ControlTemplate>
                                        </PasswordBox.Template>
                                    </PasswordBox>

                                    <controls:SecureTextBlock x:Name="PART_OpenPasswordTextBlock"
                                                              Foreground="{uikit:UIKitBinding PasswordInput_TextForeground}"
                                                              Padding="{uikit:UIKitBinding PasswordInput_Padding}"
                                                              Style="{uikit:UIKitBinding PasswordInput_TextStyle}"
                                                              VerticalAlignment="Top" />

                                    <TextBox x:Name="PART_OpenPasswordTextBox"
                                             AcceptsReturn="False"
                                             ContextMenu="{StaticResource InputContextMenu}"
                                             FocusVisualStyle="{x:Null}"
                                             InputMethod.IsInputMethodEnabled="False"
                                             MaxLength="{markupCommon:UIKitTemplateBinding MaxLength}"
                                             OverridesDefaultStyle="True"
                                             TabIndex="{markupCommon:UIKitTemplateBinding TabIndex}"
                                             TextWrapping="NoWrap">
                                        <TextBox.Style>
                                            <Style TargetType="{x:Type TextBox}" />
                                        </TextBox.Style>

                                        <TextBox.Template>
                                            <ControlTemplate>
                                                <ScrollViewer x:Name="PART_ContentHost" />
                                            </ControlTemplate>
                                        </TextBox.Template>
                                    </TextBox>

                                    <TextBlock x:Name="PART_ContentStub"
                                               Background="{uikit:UIKitBinding PasswordInput_CaretBrush}"
                                               Foreground="{uikit:UIKitBinding PasswordInput_TextForeground}"
                                               Margin="{uikit:UIKitBinding PasswordInput_Padding}"
                                               Style="{uikit:UIKitBinding PasswordInput_TextStyle}"
                                               TextTrimming="CharacterEllipsis"
                                               VerticalAlignment="Top"
                                               Visibility="Collapsed" />

                                    <TextBlock x:Name="PART_Placeholder"
                                               Foreground="{uikit:UIKitBinding PasswordInput_Placeholder_Foreground}"
                                               IsHitTestVisible="False"
                                               Margin="{uikit:UIKitBinding PasswordInput_Padding}"
                                               Style="{uikit:UIKitBinding PasswordInput_PlaceholderStyle}"
                                               TextTrimming="CharacterEllipsis"
                                               VerticalAlignment="Top" />

                                    <ItemsControl Grid.Column="1"
                                                  Focusable="False"
                                                  ItemsSource="{markupCommon:UIKitTemplateBinding controls:PasswordInput.ActionBar}"
                                                  Margin="{uikit:UIKitBinding PasswordInput_ActionBar_Margin}"
                                                  VerticalAlignment="Center">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </Grid>
                            </controls:RoundedPanel>
                        </Grid>

                        <controls:Popup x:Name="PART_ValidationPopup"
                                        IsPopupOpen="{markupCommon:UIKitTemplateBinding IsInvalidState}"
                                        PopupContent="{markupCommon:UIKitTemplateBinding InvalidStatePopupContent}"
                                        PopupPosition="{markupCommon:UIKitTemplateBinding InvalidStatePopupPosition}"
                                        PopupTarget="{Binding ElementName=PART_PasswordInputDecorator}"
                                        Style="{uikit:UIKitBinding PasswordInput_ValidationPopupStyle}" />

                        <uikit:UIKitContentPresenter x:Name="PART_Caption"
                                                     Grid.Row="2"
                                                     Content="{markupCommon:UIKitTemplateBinding Caption}"
                                                     IsHitTestVisible="False"
                                                     Margin="{uikit:UIKitBinding PasswordInput_Caption_Margin}">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle PasswordInput_CaptionStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:PasswordInput}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPasswordRevealed" Value="False">
                            <Setter Property="Visibility" TargetName="PART_OpenPasswordTextBox" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_OpenPasswordTextBlock" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPasswordRevealed" Value="True" />
                                <Condition Property="RevealMode" Value="Editable" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_OpenPasswordTextBox" Value="Visible" />
                            <Setter Property="Visibility" TargetName="PART_InputPasswordElement" Value="Collapsed" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPasswordRevealed" Value="True" />
                                <Condition Property="RevealMode" Value="ReadOnly" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_OpenPasswordTextBlock" Value="Visible" />
                            <Setter Property="Opacity" TargetName="PART_InputPasswordElement" Value="0" />
                        </MultiTrigger>
                        <Trigger Property="controls:PasswordInput.InputWidth" Value="NaN">
                            <Setter Property="InputHorizontalAlignment" Value="Stretch" />
                        </Trigger>
                        <Trigger Property="Label" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Label" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Caption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Caption" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="InvalidStatePopupContent" Value="{x:Null}">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="InvalidStatePopupContent" Value="{x:Static system:String.Empty}">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Focus" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidNormal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidHover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidFocus" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Disabled" />
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding FlowBehavior, RelativeSource={RelativeSource Self}}" Value="RtlSimulation" />
                                <Condition Binding="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="RightToLeft" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Padding" TargetName="PART_OpenPasswordTextBlock" Value="{uikit:UIKitBinding PasswordInput_Padding, Converter={thicknessConverters:ThicknessComponentsSwapConverter Mode=Horizontal}, Type={x:Type Thickness}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Popup  -->

    <Style x:Key="PopupUniversal"
           TargetType="{x:Type controls:Popup}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="{uikit:UIKitBinding Popup_Padding, Mode=Self, Type={x:Type Thickness}}" />
        <Setter Property="PopupOffset" Value="{uikit:UIKitBinding Popup_Offset, Mode=Self, Type={x:Type system:Double}}" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <!--  Constant values  -->
        <Setter Property="MaxWidth" Value="{x:Static uikit:UIKitConstants.PopupMaxWidth}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Popup}">
                    <Popup x:Name="PART_Popup"
                           AllowsTransparency="True"
                           MinHeight="{uikit:UIKitBinding Popup_MinHeight}"
                           MinWidth="{uikit:UIKitBinding Popup_MinHeight}"
                           OverridesDefaultStyle="True"
                           StaysOpen="{markupCommon:UIKitTemplateBinding IsPopupStaysOpen}">
                        <Border x:Name="PART_PopupRoot"
                                Effect="{uikit:UIKitBinding Popup_Shadow}"
                                IsHitTestVisible="{markupCommon:UIKitTemplateBinding IsPopupHitTestVisible}"
                                Padding="{Binding Effect,
                                                  RelativeSource={RelativeSource Self},
                                                  Converter={internals:ShadowMarginConverter}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <Image x:Name="PART_PopupArrow"
                                       properties:ImageProps.SvgBrush="{uikit:UIKitBinding Popup_Background}"
                                       Source="{uikit:UIKitBinding Popup_ArrowIcon}"
                                       Stretch="None" />

                                <Border Grid.Row="1"
                                        Grid.Column="1"
                                        Background="{uikit:UIKitBinding Popup_Background}"
                                        BorderBrush="{uikit:UIKitBinding Popup_BorderBrush}"
                                        BorderThickness="{uikit:UIKitBinding Popup_BorderThickness}"
                                        CornerRadius="{uikit:UIKitBinding Popup_CornerRadius}"
                                        MaxWidth="{markupCommon:UIKitTemplateBinding MaxWidth}"
                                        MinHeight="{Binding MinHeight,
                                                            ElementName=PART_Popup}"
                                        MinWidth="{markupCommon:UIKitTemplateBinding MinWidth}">

                                    <StackPanel Margin="{markupCommon:UIKitTemplateBinding Padding}">
                                        <uikit:UIKitContentPresenter x:Name="PART_Header"
                                                                     ContentSource="PopupHeader"
                                                                     Margin="{uikit:UIKitBinding Popup_Header_Margin}"
                                                                     VerticalAlignment="{markupCommon:UIKitTemplateBinding VerticalContentAlignment}">
                                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Popup_HeaderStyle,
                                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                            StateAwareAncestorType={x:Type controls:Popup}}" />
                                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        </uikit:UIKitContentPresenter>

                                        <uikit:UIKitContentPresenter ContentSource="PopupContent"
                                                                     HorizontalAlignment="{markupCommon:UIKitTemplateBinding HorizontalContentAlignment}"
                                                                     VerticalAlignment="{markupCommon:UIKitTemplateBinding VerticalContentAlignment}">
                                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Popup_TextStyle,
                                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                            StateAwareAncestorType={x:Type controls:Popup}}" />
                                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                                        </uikit:UIKitContentPresenter>
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </Border>
                    </Popup>
                    <ControlTemplate.Triggers>
                        <Trigger Property="PopupHeader" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Header" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="PopupContent" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="PART_Header" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region PopupDecorator  -->

    <Style x:Key="PopupDecoratorUniversal"
           TargetType="{x:Type controls:PopupDecorator}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Padding" Value="{uikit:UIKitBinding PopupDecorator_Padding, Mode=Self, Type={x:Type Thickness}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:PopupDecorator}">
                    <Grid Margin="{Binding Effect,
                                           ElementName=PART_BackgroundDecorator,
                                           Converter={internals:ShadowMarginConverter}}">
                        <Border x:Name="PART_BackgroundDecorator"
                                Background="{uikit:UIKitBinding PopupDecorator_Background}"
                                CornerRadius="{uikit:UIKitBinding PopupDecorator_CornerRadius}"
                                Effect="{uikit:UIKitBinding PopupDecorator_Shadow}" />

                        <ContentPresenter Margin="{markupCommon:UIKitTemplateBinding Padding}" />

                        <Border BorderBrush="{uikit:UIKitBinding PopupDecorator_BorderBrush}"
                                BorderThickness="{uikit:UIKitBinding PopupDecorator_BorderThickness}"
                                CornerRadius="{uikit:UIKitBinding PopupDecorator_CornerRadius}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ProgressBar  -->

    <Style x:Key="ProgressBarUniversal"
           TargetType="{x:Type controls:ProgressBar}">
        <Setter Property="Maximum" Value="1" />
        <Setter Property="Minimum" Value="0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ProgressBar}">
                    <StackPanel>
                        <controls:RoundedPanel x:Name="PART_RootPanel"
                                               Background="{uikit:UIKitBinding ProgressBar_Track_Background}"
                                               CornerRadius="{uikit:UIKitBinding ProgressBar_Track_CornerRadius}"
                                               Height="{uikit:UIKitBinding ProgressBar_Track_Height}">
                            <Grid>
                                <Border Name="PART_Track"
                                        Background="{uikit:UIKitBinding ProgressBar_Track_Background}" />

                                <Grid Name="PART_Indicator" />

                                <controls:RoundedPanel x:Name="PART_AnimatedIndicator"
                                                       Background="{uikit:UIKitBinding ProgressBar_Indicator_Foreground}"
                                                       CornerRadius="{uikit:UIKitBinding ProgressBar_Track_CornerRadius}"
                                                       HorizontalAlignment="Left">
                                    <Grid>
                                        <Rectangle x:Name="PART_GlowRect"
                                                   HorizontalAlignment="Left"
                                                   VerticalAlignment="Stretch"
                                                   Visibility="Hidden"
                                                   Width="{uikit:UIKitBinding ProgressBar_Glow_Width}" />

                                        <Rectangle x:Name="PART_GlowRectVisible"
                                                   Fill="{uikit:UIKitBinding ProgressBar_Glow_Brush}"
                                                   HorizontalAlignment="Left"
                                                   Margin="{Binding Margin,
                                                                    ElementName=PART_GlowRect}"
                                                   VerticalAlignment="Stretch"
                                                   Visibility="{markupCommon:UIKitTemplateBinding ShowHighlight,
                                                                                                  Converter={booleanConverters:BooleanToVisibilityConverter}}"
                                                   Width="{Binding Width,
                                                                   ElementName=PART_GlowRect}" />
                                    </Grid>
                                </controls:RoundedPanel>
                            </Grid>
                        </controls:RoundedPanel>

                        <Grid x:Name="PART_Footer"
                              Margin="{uikit:UIKitBinding ProgressBar_Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="PART_StateText"
                                       HorizontalAlignment="Left"
                                       Margin="{uikit:UIKitBinding ProgressBar_State_Margin}"
                                       Style="{uikit:UIKitBinding ProgressBar_StateTextStyle}"
                                       Text="{markupCommon:UIKitTemplateBinding State}"
                                       TextTrimming="CharacterEllipsis"
                                       VerticalAlignment="Center"
                                       Visibility="{markupCommon:UIKitTemplateBinding ShowState,
                                                                                      Converter={booleanConverters:BooleanToVisibilityConverter}}" />
                            <TextBlock x:Name="PART_EstimationText"
                                       Grid.Column="1"
                                       HorizontalAlignment="Left"
                                       Style="{uikit:UIKitBinding ProgressBar_EstimationTextStyle}"
                                       Text="{markupCommon:UIKitTemplateBinding Estimation}"
                                       TextTrimming="CharacterEllipsis"
                                       VerticalAlignment="Center"
                                       Visibility="{markupCommon:UIKitTemplateBinding ShowEstimation,
                                                                                      Converter={booleanConverters:BooleanToVisibilityConverter}}" />

                            <TextBlock x:Name="PART_ValueText"
                                       Grid.Column="2"
                                       HorizontalAlignment="Right"
                                       Style="{uikit:UIKitBinding ProgressBar_ValueTextStyle}"
                                       Text="{markupCommon:UIKitTemplateBinding Value,
                                                                                Converter={numberConverters:NumberToPercentStringConverter}}"
                                       VerticalAlignment="Center"
                                       Visibility="{markupCommon:UIKitTemplateBinding ShowValue,
                                                                                      Converter={booleanConverters:BooleanToVisibilityConverter}}" />
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsIndeterminate" Value="True">
                            <Setter Property="ShowValue" Value="False" />
                            <Setter Property="Value" Value="1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                            <Setter Property="ShowHighlight" Value="False" />
                        </Trigger>
                        <Trigger Property="State" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_StateText" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Estimation" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_EstimationText" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ShowValue" Value="False" />
                                <Condition Property="State" Value="{x:Null}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_Footer" Value="Collapsed" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region RoundProgress  -->

    <Style x:Key="RoundProgressUniversal"
           TargetType="{x:Type controls:RoundProgress}">
        <Setter Property="Maximum" Value="1" />
        <Setter Property="Minimum" Value="0" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Diameter" Value="{uikit:UIKitBinding RoundProgress_Diameter, Mode=Self, Type={x:Type system:Double}}" />
        <Setter Property="StrokeThickness" Value="{uikit:UIKitBinding RoundProgress_StrokeThickness, Mode=Self, Type={x:Type system:Double}}" />
        <Setter Property="Background" Value="{uikit:UIKitBinding RoundProgress_Track, Mode=Self, Type={x:Type Brush}}" />
        <Setter Property="Foreground" Value="{uikit:UIKitBinding RoundProgress_Indicator, Mode=Self, Type={x:Type Brush}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:RoundProgress}">
                    <Grid Height="{markupCommon:UIKitTemplateBinding Diameter}"
                          Width="{markupCommon:UIKitTemplateBinding Diameter}">
                        <Path x:Name="PART_Track"
                              Stroke="{markupCommon:UIKitTemplateBinding Background}"
                              StrokeEndLineCap="Round"
                              StrokeStartLineCap="Round"
                              StrokeThickness="{markupCommon:UIKitTemplateBinding StrokeThickness}" />

                        <Path x:Name="PART_AnimatedIndicator"
                              Stroke="{markupCommon:UIKitTemplateBinding Foreground}"
                              StrokeEndLineCap="Round"
                              StrokeStartLineCap="Round"
                              StrokeThickness="{markupCommon:UIKitTemplateBinding StrokeThickness}" />

                        <TextBlock HorizontalAlignment="Center"
                                   Style="{uikit:UIKitBinding RoundProgress_ValueTextStyle}"
                                   Text="{markupCommon:UIKitTemplateBinding Value,
                                                                            Converter={numberConverters:NumberToPercentStringConverter}}"
                                   VerticalAlignment="Center"
                                   Visibility="{markupCommon:UIKitTemplateBinding ShowValue,
                                                                                  Converter={booleanConverters:BooleanToVisibilityConverter}}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region RoundTimer  -->

    <Style x:Key="RoundTimerUniversal"
           TargetType="{x:Type controls:RoundTimer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Diameter" Value="{uikit:UIKitBinding RoundTimer_Diameter, Mode=Self, Type={x:Type system:Double}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:RoundTimer}">
                    <Grid Height="{markupCommon:UIKitTemplateBinding Diameter}"
                          Width="{markupCommon:UIKitTemplateBinding Diameter}">
                        <Path x:Name="PART_AnimatedIndicator"
                              Fill="{uikit:UIKitBinding RoundTimer_Indicator}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ScrollBar  -->

    <Style x:Key="ScrollBarUniversal"
           TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <Style x:Key="ScrollBarRepeatButton"
                   TargetType="{x:Type RepeatButton}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="UseLayoutRounding" Value="True" />

                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border Background="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ControlTemplate x:Key="ScrollBarHorizontalTemplate"
                             TargetType="{x:Type ScrollBar}">
                <Grid>
                    <Rectangle x:Name="PART_TrackBackground"
                               Fill="{uikit:UIKitBinding ScrollBar_Background}" />
                    <Track Name="PART_Track"
                           IsDirectionReversed="False">
                        <Track.Resources>
                            <x:Static x:Key="{x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}"
                                      Member="uikit:UIKitConstants.ScrollBarMinLength" />
                        </Track.Resources>
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="ScrollBar.PageLeftCommand"
                                          Style="{StaticResource ScrollBarRepeatButton}" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="ScrollBar.PageRightCommand"
                                          Style="{StaticResource ScrollBarRepeatButton}" />
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{uikit:UIKitBinding ScrollBar_ThumbStyle}" />
                        </Track.Thumb>
                    </Track>
                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{uikit:UIKitBinding ScrollBar_Background, Type={x:Type Brush}}" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="PART_TrackBackground" Value="Hidden" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ScrollBarVerticalTemplate"
                             TargetType="{x:Type ScrollBar}">
                <Grid>
                    <Rectangle x:Name="PART_TrackBackground"
                               Fill="{uikit:UIKitBinding ScrollBar_Background}" />
                    <Track Name="PART_Track"
                           IsDirectionReversed="True">
                        <Track.Resources>
                            <x:Static x:Key="{x:Static SystemParameters.VerticalScrollBarButtonHeightKey}"
                                      Member="uikit:UIKitConstants.ScrollBarMinLength" />
                        </Track.Resources>
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Command="ScrollBar.PageUpCommand"
                                          Style="{StaticResource ScrollBarRepeatButton}" />
                        </Track.DecreaseRepeatButton>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Command="ScrollBar.PageDownCommand"
                                          Style="{StaticResource ScrollBarRepeatButton}" />
                        </Track.IncreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{uikit:UIKitBinding ScrollBar_ThumbStyle}" />
                        </Track.Thumb>
                    </Track>
                </Grid>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{uikit:UIKitBinding ScrollBar_Background, Type={x:Type Brush}}" Value="{x:Null}">
                        <Setter Property="Visibility" TargetName="PART_TrackBackground" Value="Hidden" />
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>

        <Setter Property="vs:StateService.State" Value="Normal" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="vs:StateService.State" Value="Hover" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="vs:StateService.State" Value="Disabled" />
            </Trigger>

            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Height" Value="{uikit:UIKitBinding ScrollBar_Size, Mode=Self, Type={x:Type system:Double}}" />
                <Setter Property="MinHeight" Value="{uikit:UIKitBinding ScrollBar_Size, Mode=Self, Type={x:Type system:Double}}" />
                <Setter Property="Template" Value="{StaticResource ScrollBarHorizontalTemplate}" />
                <Setter Property="Width" Value="Auto" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Height" Value="Auto" />
                <Setter Property="MinWidth" Value="{uikit:UIKitBinding ScrollBar_Size, Mode=Self, Type={x:Type system:Double}}" />
                <Setter Property="Template" Value="{StaticResource ScrollBarVerticalTemplate}" />
                <Setter Property="Width" Value="{uikit:UIKitBinding ScrollBar_Size, Mode=Self, Type={x:Type system:Double}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ScrollBarThumbUniversal"
           TargetType="{x:Type Thumb}">
        <Setter Property="vs:StateService.State" Value="Normal" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid Background="Transparent">
                        <Border x:Name="PART_Thumb"
                                Background="{uikit:UIKitBinding ScrollBarThumb_Background}"
                                CornerRadius="{uikit:UIKitBinding ScrollBarThumb_CornerRadius}"
                                Margin="{uikit:UIKitBinding ScrollBarThumb_Margin}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="Horizontal">
                            <Setter Property="VerticalAlignment" TargetName="PART_Thumb" Value="Stretch" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ScrollBar}}}" Value="Vertical">
                            <Setter Property="HorizontalAlignment" TargetName="PART_Thumb" Value="Stretch" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Search  -->

    <Style x:Key="SearchUniversal"
           TargetType="{x:Type controls:Search}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Cursor" Value="IBeam" />
        <Setter Property="LostFocusBehavior" Value="WhenClickOutside" />
        <Setter Property="Placeholder" Value="{xl:Loc Search_PlaceholderText, Scope=UiKit}" />
        <!--  Constant values  -->
        <Setter Property="Width" Value="{x:Static uikit:UIKitConstants.SearchWidth}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Search}">
                    <controls:RoundedPanel x:Name="PART_SearchDecorator"
                                           Background="{uikit:UIKitBinding Search_Background}"
                                           BorderBrush="{uikit:UIKitBinding Search_BorderBrush}"
                                           BorderThickness="{uikit:UIKitBinding Search_BorderThickness}"
                                           CornerRadius="{uikit:UIKitBinding Search_CornerRadius}"
                                           Height="{uikit:UIKitBinding Search_Height}"
                                           HorizontalAlignment="Stretch"
                                           VerticalAlignment="Stretch">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <controls:Spinner x:Name="PART_Spinner"
                                              Margin="{uikit:UIKitBinding Search_SpinnerMargin}"
                                              Style="{uikit:UIKitBinding Search_SpinnerStyle}" />

                            <controls:Icon16 x:Name="PART_Icon"
                                             Icon="{uikit:UIKitBinding Search_Icon}"
                                             IconForeground="{uikit:UIKitBinding Search_IconForeground}"
                                             Margin="{uikit:UIKitBinding Search_IconMargin}" />

                            <controls:TextInput x:Name="PART_TextInput"
                                                Grid.Column="1"
                                                focus:KeyboardEventsHandlerBehavior.IsKeyboardFocusSourceElement="True"
                                                vs:StateService.TextInputState="{markupCommon:UIKitTemplateBinding vs:StateService.TextInputState}"
                                                ContextMenu="{StaticResource InputContextMenu}"
                                                Style="{uikit:UIKitBinding Search_TextInputStyle}"
                                                TabIndex="{markupCommon:UIKitTemplateBinding TabIndex}">
                                <controls:TextInput.Template>
                                    <ControlTemplate>
                                        <Grid>
                                            <ScrollViewer x:Name="PART_ContentHost"
                                                          ClipToBounds="True" />

                                            <TextBlock x:Name="PART_ContentStub"
                                                       Background="{uikit:UIKitBinding Search_TextInput_CaretBrush}"
                                                       Foreground="{uikit:UIKitBinding Search_TextInput_TextForeground}"
                                                       Margin="{uikit:UIKitBinding Search_TextInput_Padding}"
                                                       Style="{uikit:UIKitBinding Search_TextInput_TextStyle}"
                                                       TextTrimming="CharacterEllipsis"
                                                       VerticalAlignment="Top"
                                                       Visibility="Collapsed" />

                                            <TextBlock x:Name="PART_Placeholder"
                                                       Foreground="{uikit:UIKitBinding Search_TextInput_PlaceholderForeground}"
                                                       IsHitTestVisible="False"
                                                       Margin="{uikit:UIKitBinding Search_TextInput_Padding}"
                                                       Style="{uikit:UIKitBinding Search_TextInput_PlaceholderStyle}"
                                                       TextTrimming="CharacterEllipsis"
                                                       VerticalAlignment="Top" />
                                        </Grid>
                                    </ControlTemplate>
                                </controls:TextInput.Template>
                            </controls:TextInput>

                            <controls:IconButton x:Name="PART_ClearButton"
                                                 Grid.Column="2"
                                                 Icon="{uikit:UIKitBinding Search_ClearButtonIcon}"
                                                 IsTabStop="False"
                                                 Margin="{uikit:UIKitBinding Search_ClearButtonMargin}"
                                                 Style="{uikit:UIKitBinding Search_ClearButtonStyle}"
                                                 ToolTip="{xl:Loc Search_ClearToolTip,
                                                                  Scope=UiKit}" />
                        </Grid>
                    </controls:RoundedPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HorizontalAlignment" Value="Stretch">
                            <Setter Property="Width" Value="NaN" />
                        </Trigger>
                        <Trigger Property="IsEmpty" Value="True">
                            <Setter Property="Visibility" TargetName="PART_ClearButton" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsBusy" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Spinner" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsBusy" Value="True">
                            <Setter Property="Visibility" TargetName="PART_Icon" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Focus" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Disabled" />
                            <Setter Property="Visibility" TargetName="PART_Icon" Value="Visible" />
                            <Setter Property="Visibility" TargetName="PART_Spinner" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_ClearButton" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Select  -->

    <Style x:Key="SelectUniversal"
           TargetType="{x:Type controls:Select}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="LostFocusBehavior" Value="WhenClickOutside" />
        <Setter Property="Placeholder" Value="{xl:Loc Select_Placeholder, Scope=UiKit}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{uikit:UIKitBinding Select_ItemContainerStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Select}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <uikit:UIKitContentPresenter x:Name="PART_Label"
                                                     Grid.Row="0"
                                                     Content="{markupCommon:UIKitTemplateBinding Label}"
                                                     IsHitTestVisible="False"
                                                     Margin="{uikit:UIKitBinding Select_Label_Margin}">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Select_LabelStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:Select}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>

                        <controls:SelectPresenter x:Name="PART_SelectPresenter"
                                                  Grid.Row="1"
                                                  HorizontalAlignment="{markupCommon:UIKitTemplateBinding SelectHorizontalAlignment}"
                                                  Style="{uikit:UIKitBinding Select_SelectPresenterStyle}"
                                                  TabIndex="{markupCommon:UIKitTemplateBinding TabIndex}"
                                                  Width="{markupCommon:UIKitTemplateBinding SelectWidth}" />

                        <Popup x:Name="PART_Popup">
                            <controls:SelectPopupDecorator MaxHeight="{markupCommon:UIKitTemplateBinding MaxDropDownHeight}"
                                                           MaxWidth="{markupCommon:UIKitTemplateBinding MaxDropDownWidth}"
                                                           Style="{uikit:UIKitBinding Select_PopupDecoratorStyle}">
                                <ScrollViewer CanContentScroll="True"
                                              HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto">
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </controls:SelectPopupDecorator>
                        </Popup>

                        <controls:Popup x:Name="PART_ValidationPopup"
                                        IsPopupOpen="{markupCommon:UIKitTemplateBinding IsInvalidState}"
                                        PopupContent="{markupCommon:UIKitTemplateBinding InvalidStatePopupContent}"
                                        PopupPosition="{markupCommon:UIKitTemplateBinding InvalidStatePopupPosition}"
                                        PopupTarget="{Binding ElementName=PART_SelectPresenter}"
                                        Style="{uikit:UIKitBinding Select_ValidationPopupStyle}" />

                        <uikit:UIKitContentPresenter x:Name="PART_Caption"
                                                     Grid.Row="2"
                                                     Content="{markupCommon:UIKitTemplateBinding Caption}"
                                                     IsHitTestVisible="False"
                                                     Margin="{uikit:UIKitBinding Select_Caption_Margin}">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Select_CaptionStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:Select}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SelectWidth" Value="NaN">
                            <Setter Property="SelectHorizontalAlignment" Value="Stretch" />
                        </Trigger>
                        <Trigger Property="Label" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Label" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Caption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Caption" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="InvalidStatePopupContent" Value="{x:Null}">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="InvalidStatePopupContent" Value="{x:Static system:String.Empty}">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="IsInvalidState" Value="True" />
                        </Trigger>
                        <Trigger Property="IsFilterHasResult" Value="False">
                            <Setter Property="IsInvalidState" Value="True" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel IsVirtualizing="True"
                                            VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region SelectItem  -->

    <Style x:Key="SelectItemUniversal"
           TargetType="{x:Type controls:SelectItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Cursor" Value="Hand" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectItem}">
                    <Grid>
                        <Border Background="{uikit:UIKitBinding SelectItem_StateBackground}" />
                        <Border x:Name="PART_SelectionBackground"
                                Background="{uikit:UIKitBinding SelectItem_SelectionBackground}" />
                        <Grid Margin="{uikit:UIKitBinding SelectItem_Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition SharedSizeGroup="Icon" Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <controls:Icon16 Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                             IconForeground="{uikit:UIKitBinding SelectItem_Icon_Foreground}"
                                             Margin="{uikit:UIKitBinding SelectItem_Icon_Margin}"
                                             VerticalAlignment="Center"
                                             Visibility="{markupBinding:CompactMultiBinding Binding1={Binding IsUnset,
                                                                                                              RelativeSource={RelativeSource Self},
                                                                                                              Converter={booleanConverters:BooleanToInvertedValueConverter}},
                                                                                            Binding2={markupCommon:UIKitTemplateBinding Image,
                                                                                                                                        Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                                                        ConverterParameter={x:Null}},
                                                                                            Converter={booleanConverters:MultiBooleanToVisibilityConverter Operation=And}}" />
                            <Image FlowDirection="{markupCommon:UIKitTemplateBinding ImageFlowDirection}"
                                   Height="16"
                                   Margin="{uikit:UIKitBinding SelectItem_Icon_Margin}"
                                   Source="{markupCommon:UIKitTemplateBinding Image}"
                                   VerticalAlignment="Center"
                                   Visibility="{markupCommon:UIKitTemplateBinding Image,
                                                                                  Converter={equalityConverters:EqualityToVisibilityInverseConverter},
                                                                                  ConverterParameter={x:Null}}"
                                   Width="16" />

                            <TextBlock x:Name="PART_ItemHeader"
                                       Grid.Column="1"
                                       Style="{uikit:UIKitBinding SelectItem_TextStyle}"
                                       Text="{markupCommon:UIKitTemplateBinding Header}"
                                       VerticalAlignment="Center" />

                            <ContentPresenter Grid.Column="2"
                                              Content="{markupCommon:UIKitTemplateBinding RightBar}"
                                              ContentTemplate="{markupCommon:UIKitTemplateBinding RightBarTemplate}"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="HasRightBar" Value="False">
                            <Setter Property="Grid.ColumnSpan" TargetName="PART_ItemHeader" Value="2" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Visibility" TargetName="PART_SelectionBackground" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="False">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region SelectPresenter  -->

    <Style x:Key="SelectPresenterUniversal"
           TargetType="{x:Type controls:SelectPresenter}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Cursor" Value="Hand" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectPresenter}">
                    <Grid>
                        <Border Background="{uikit:UIKitBinding SelectPresenter_Background}"
                                BorderBrush="{uikit:UIKitBinding SelectPresenter_BorderBrush}"
                                BorderThickness="{uikit:UIKitBinding SelectPresenter_BorderThickness}"
                                CornerRadius="{uikit:UIKitBinding SelectPresenter_CornerRadius}"
                                Height="{uikit:UIKitBinding SelectPresenter_Height}"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center" />

                        <Grid Margin="{uikit:UIKitBinding SelectPresenter_Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Grid x:Name="PART_ItemPresenter">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <controls:Icon16 x:Name="PART_ItemIcon"
                                                 IconForeground="{uikit:UIKitBinding SelectPresenter_ItemIcon_Foreground}"
                                                 Margin="{uikit:UIKitBinding SelectPresenter_ItemIcon_Margin}"
                                                 VerticalAlignment="Center"
                                                 Visibility="{markupBinding:CompactMultiBinding Binding1={Binding IsUnset,
                                                                                                                  RelativeSource={RelativeSource Self},
                                                                                                                  Converter={booleanConverters:BooleanToInvertedValueConverter}},
                                                                                                Binding2={markupCommon:UIKitTemplateBinding Image,
                                                                                                                                            Converter={equalityConverters:EqualityToBooleanConverter},
                                                                                                                                            ConverterParameter={x:Null}},
                                                                                                Converter={booleanConverters:MultiBooleanToVisibilityConverter Operation=And}}" />
                                <Image x:Name="PART_ItemImage"
                                       Height="16"
                                       Margin="{uikit:UIKitBinding SelectPresenter_ItemIcon_Margin}"
                                       VerticalAlignment="Center"
                                       Visibility="{markupCommon:UIKitTemplateBinding Image,
                                                                                      Converter={equalityConverters:EqualityToVisibilityInverseConverter},
                                                                                      ConverterParameter={x:Null}}"
                                       Width="16" />

                                <TextBlock x:Name="PART_ItemHeader"
                                           Grid.Column="1"
                                           Foreground="{uikit:UIKitBinding SelectPresenter_ItemHeader_Foreground}"
                                           Style="{uikit:UIKitBinding SelectPresenter_ItemHeader_TextStyle}"
                                           TextTrimming="CharacterEllipsis"
                                           VerticalAlignment="Center" />

                                <TextBlock x:Name="PART_Placeholder"
                                           Grid.Column="1"
                                           Grid.ColumnSpan="2"
                                           Foreground="{uikit:UIKitBinding SelectPresenter_Placeholder_Foreground}"
                                           Style="{uikit:UIKitBinding SelectPresenter_Placeholder_TextStyle}"
                                           TextTrimming="CharacterEllipsis"
                                           VerticalAlignment="Center" />

                                <ContentPresenter x:Name="PART_RightBar"
                                                  Grid.Column="2"
                                                  VerticalAlignment="Center" />
                            </Grid>

                            <controls:TextInput x:Name="PART_TextInput"
                                                focus:KeyboardEventsHandlerBehavior.IsKeyboardFocusSourceElement="True"
                                                vs:StateService.TextInputState="{markupCommon:UIKitTemplateBinding vs:StateService.TextInputState}"
                                                ContextMenu="{StaticResource InputContextMenu}"
                                                Style="{uikit:UIKitBinding SelectPresenter_TextInputStyle}"
                                                VerticalAlignment="Center">
                                <controls:TextInput.Template>
                                    <ControlTemplate>
                                        <Grid>
                                            <ScrollViewer x:Name="PART_ContentHost"
                                                          ClipToBounds="True" />

                                            <TextBlock x:Name="PART_ContentStub"
                                                       Background="{uikit:UIKitBinding SelectPresenter_TextInput_CaretBrush}"
                                                       Foreground="{uikit:UIKitBinding SelectPresenter_TextInput_Foreground}"
                                                       Style="{uikit:UIKitBinding SelectPresenter_TextInput_TextStyle}"
                                                       TextTrimming="CharacterEllipsis"
                                                       VerticalAlignment="Top"
                                                       Visibility="Collapsed" />

                                            <TextBlock x:Name="PART_Placeholder"
                                                       Foreground="{uikit:UIKitBinding SelectPresenter_TextInput_Placeholder_Foreground}"
                                                       IsHitTestVisible="False"
                                                       Style="{uikit:UIKitBinding SelectPresenter_TextInput_Placeholder_TextStyle}"
                                                       TextTrimming="CharacterEllipsis"
                                                       VerticalAlignment="Top" />
                                        </Grid>
                                    </ControlTemplate>
                                </controls:TextInput.Template>
                            </controls:TextInput>

                            <controls:Icon16 Grid.Column="1"
                                             Icon="{uikit:UIKitBinding SelectPresenter_ArrowIcon_Name}"
                                             IconForeground="{uikit:UIKitBinding SelectPresenter_ArrowIcon_Foreground}"
                                             Margin="{uikit:UIKitBinding SelectPresenter_ArrowIcon_Margin}"
                                             VerticalAlignment="Center" />
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True" />
                                <Condition Property="IsFilterEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_ItemPresenter" Value="Collapsed" />
                            <Setter Property="Visibility" TargetName="PART_TextInput" Value="Visible" />
                            <Setter Property="Cursor" Value="IBeam" />
                        </MultiTrigger>
                        <Trigger Property="HasRightBar" Value="False">
                            <Setter Property="Grid.ColumnSpan" TargetName="PART_ItemHeader" Value="2" />
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="Visibility" TargetName="PART_TextInput" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsFilterEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="PART_TextInput" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Focus" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidNormal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidHover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsActive" Value="True" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidFocus" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region SelectableText  -->

    <Style x:Key="SelectableTextUniversal"
           TargetType="{x:Type controls:SelectableText}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="FontStyle" Value="{uikit:UIKitBinding SelectableText_FontStyle, Mode=Self, Type={x:Type fonts:UIKitFontStyleSettings}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SelectableText}">
                    <Grid>
                        <TextBlock x:Name="PART_TextContainer"
                                   properties:TextBlockProps.FontBrush="{markupCommon:UIKitTemplateBinding FontBrush}"
                                   properties:TextBlockProps.FontStyle="{markupCommon:UIKitTemplateBinding FontStyle}"
                                   TextTrimming="{markupCommon:UIKitTemplateBinding TextTrimming}"
                                   TextWrapping="{markupCommon:UIKitTemplateBinding TextWrapping}">
                            <Hyperlink x:Name="PART_TextHyperlink"
                                       Focusable="False"
                                       Style="{uikit:UIKitBinding SelectableText_HyperlinkStyle}">
                                <Run Text="{markupCommon:UIKitTemplateBinding Text}" />
                            </Hyperlink>
                        </TextBlock>
                        <controls:Popup x:Name="PART_Popup"
                                        IsPopupHitTestVisible="False"
                                        IsPopupOpen="{markupCommon:UIKitTemplateBinding State,
                                                                                        Converter={equalityConverters:EqualityToBooleanInverseConverter},
                                                                                        ConverterParameter={x:Static controls:SelectableTextState.Rest}}"
                                        PopupPosition="Top"
                                        PopupTarget="{Binding ElementName=PART_TextContainer}"
                                        Style="{uikit:UIKitBinding SelectableText_PopupStyle}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="vs:StateService.State" SourceName="PART_TextHyperlink" Value="Normal" />
                                <Condition Property="HasFontBrush" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="PART_TextHyperlink" Value="{Binding Foreground, ElementName=PART_TextContainer}" />
                        </MultiTrigger>
                        <Trigger Property="State" Value="Ready">
                            <Setter Property="PopupContent" TargetName="PART_Popup" Value="{xl:Loc SelectableText_BeforeCopy, Scope=UiKit}" />
                        </Trigger>
                        <Trigger Property="State" Value="Done">
                            <Setter Property="Background" TargetName="PART_TextHyperlink" Value="{uikit:UIKitBinding SelectableText_HyperlinkBackgroundPressed, Mode=TemplatedParent, Type={x:Type Brush}}" />
                            <Setter Property="PopupContent" TargetName="PART_Popup" Value="{xl:Loc SelectableText_AfterCopy, Scope=UiKit}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Spinner  -->

    <Style x:Key="SpinnerUniversal"
           TargetType="{x:Type controls:Spinner}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="FlowDirection" Value="LeftToRight" />
        <Setter Property="Height" Value="{uikit:UIKitBinding Spinner_Height, Mode=Self, Type={x:Type system:Double}}" />
        <Setter Property="Width" Value="{uikit:UIKitBinding Spinner_Width, Mode=Self, Type={x:Type system:Double}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Spinner}">
                    <Image x:Name="PART_LoaderIcon"
                           properties:ImageProps.SvgBrush="{uikit:UIKitBinding Spinner_Foreground}"
                           Height="{markupCommon:UIKitTemplateBinding Height}"
                           RenderTransformOrigin="0.5,0.5"
                           Source="{uikit:UIKitBinding Spinner_Image}"
                           Stretch="Fill"
                           Width="{markupCommon:UIKitTemplateBinding Width}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region SplitButton  -->

    <Style x:Key="SplitButtonUniversal"
           TargetType="{x:Type controls:SplitButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="IconMenuClosed" Value="{uikit:UIKitBinding SplitButton_ToggleButton_MenuClosedIcon, Mode=Self, Type={x:Type icons:UIKitIcon_16}}" />
        <Setter Property="IconMenuOpened" Value="{uikit:UIKitBinding SplitButton_ToggleButton_MenuOpenedIcon, Mode=Self, Type={x:Type icons:UIKitIcon_16}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:SplitButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Button x:Name="PART_MainButton"
                                Grid.Column="0"
                                properties:ButtonProps.Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                properties:ButtonProps.IconLocation="{markupCommon:UIKitTemplateBinding IconLocation}"
                                Command="{markupCommon:UIKitTemplateBinding Command}"
                                CommandParameter="{markupCommon:UIKitTemplateBinding CommandParameter}"
                                Content="{markupCommon:UIKitTemplateBinding Content}"
                                ContentTemplate="{markupCommon:UIKitTemplateBinding ContentTemplate}"
                                HorizontalAlignment="Stretch"
                                IsEnabled="{markupCommon:UIKitTemplateBinding IsMainButtonEnabled}"
                                Style="{uikit:UIKitBinding SplitButton_MainButton_Style}" />
                        <controls:Divider Grid.Column="1"
                                          Orientation="Vertical"
                                          Style="{uikit:UIKitBinding SplitButton_Divider_Style}" />
                        <ToggleButton x:Name="PART_ToggleButton"
                                      Grid.Column="2"
                                      IsEnabled="{markupCommon:UIKitTemplateBinding IsContextMenuButtonEnabled}"
                                      Style="{uikit:UIKitBinding SplitButton_ToggleButton_Style}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" SourceName="PART_ToggleButton" Value="True">
                            <Setter Property="properties:ToggleButtonProps.Icon" TargetName="PART_ToggleButton" Value="{markupCommon:UIKitTemplateBinding IconMenuOpened}" />
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="PART_ToggleButton" Value="False">
                            <Setter Property="properties:ToggleButtonProps.Icon" TargetName="PART_ToggleButton" Value="{markupCommon:UIKitTemplateBinding IconMenuClosed}" />
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_MainButton" Value="True">
                            <Setter Property="internals:SplitButtonInternals.State" Value="PressedMain" />
                        </Trigger>
                        <Trigger Property="IsPressed" SourceName="PART_ToggleButton" Value="True">
                            <Setter Property="internals:SplitButtonInternals.State" Value="PressedContextMenu" />
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_MainButton" Value="False">
                            <Setter Property="internals:SplitButtonInternals.State" Value="DisabledMain" />
                        </Trigger>
                        <Trigger Property="IsEnabled" SourceName="PART_ToggleButton" Value="False">
                            <Setter Property="internals:SplitButtonInternals.State" Value="DisabledContextMenu" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="internals:SplitButtonInternals.State" Value="Disabled" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" SourceName="PART_MainButton" Value="False" />
                                <Condition Property="IsEnabled" SourceName="PART_ToggleButton" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="internals:SplitButtonInternals.State" Value="Disabled" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region SsoButton  -->

    <Style x:Key="SsoButtonUniversal"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type controls:SsoButton}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="internals:SsoButtonInternals.Icon" Value="{uikit:UIKitBinding SsoButton_Icon_Name, Mode=Self, Type={x:Type icons:UIKitIcon_16}}" />
    </Style>

    <!--  endregion  -->

    <!--  region StatusBullet  -->

    <Style x:Key="StatusBulletUniversal"
           TargetType="{x:Type controls:StatusBullet}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:StatusBullet}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Image x:Name="PART_Bullet"
                               Grid.Column="0"
                               properties:ImageProps.SvgBrush="{uikit:UIKitBinding StatusBullet_Color}"
                               Margin="{uikit:UIKitBinding StatusBullet_Margin}"
                               SnapsToDevicePixels="False"
                               Source="{uikit:UIKitBinding StatusBullet_Mark}"
                               Stretch="None"
                               UseLayoutRounding="False"
                               VerticalAlignment="Top" />

                        <uikit:UIKitContentPresenter Grid.Column="1">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle StatusBullet_TextStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:StatusBullet}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Content" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="PART_Bullet" Value="0" />
                            <Setter Property="VerticalAlignment" TargetName="PART_Bullet" Value="Center" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region StatusTag  -->

    <Style x:Key="StatusTagUniversal"
           TargetType="{x:Type controls:StatusTag}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:StatusTag}">
                    <Grid Height="{uikit:UIKitBinding StatusTag_Height}">

                        <Border x:Name="PART_Border"
                                Background="{uikit:UIKitBinding StatusTag_Background}"
                                BorderBrush="{uikit:UIKitBinding StatusTag_BorderBrush}"
                                BorderThickness="{uikit:UIKitBinding StatusTag_BorderThickness}"
                                CornerRadius="{uikit:UIKitBinding StatusTag_CornerRadius}" />

                        <Grid Margin="{uikit:UIKitBinding StatusTag_Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <controls:Icon16 x:Name="PART_Icon"
                                             Grid.Column="0"
                                             Icon="{uikit:UIKitBinding StatusTag_Icon_Name}"
                                             IconForeground="{uikit:UIKitBinding StatusTag_Icon_Color}"
                                             Margin="{uikit:UIKitBinding StatusTag_Icon_Margin}"
                                             SnapsToDevicePixels="False"
                                             UseLayoutRounding="False"
                                             VerticalAlignment="Center" />

                            <uikit:UIKitContentPresenter Grid.Column="1"
                                                         Content="{markupCommon:UIKitTemplateBinding Text}">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle StatusTag_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextTrimmingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:StatusTag}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="PART_Icon" Value="0" />
                        </Trigger>
                        <Trigger Property="HasIcon" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Icon" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Switch  -->

    <Style x:Key="SwitchUniversal"
           TargetType="{x:Type controls:Switch}">
        <Style.Resources>
            <Style x:Key="SwitchRepeatButton"
                   TargetType="{x:Type RepeatButton}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Rectangle Fill="Transparent" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>

        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Switch}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="SliderTemplate"
                                         TargetType="{x:Type Slider}">
                            <Grid ClipToBounds="True">
                                <Border Background="{uikit:UIKitBinding Switch_Track_Background,
                                                                        Mode=FindAncestor,
                                                                        AncestorType={x:Type controls:Switch}}"
                                        CornerRadius="{uikit:UIKitBinding Switch_CornerRadius,
                                                                          Mode=FindAncestor,
                                                                          AncestorType={x:Type controls:Switch}}" />
                                <Track x:Name="PART_Track">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                                                      Style="{StaticResource SwitchRepeatButton}" />
                                    </Track.DecreaseRepeatButton>

                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                                                      Style="{StaticResource SwitchRepeatButton}" />
                                    </Track.IncreaseRepeatButton>

                                    <Track.Thumb>
                                        <Thumb Focusable="False">
                                            <Thumb.Template>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Ellipse x:Name="Ellipse"
                                                             Effect="{uikit:UIKitBinding Switch_Thumb_Shadow,
                                                                                         Mode=FindAncestor,
                                                                                         AncestorType={x:Type controls:Switch}}"
                                                             Fill="{uikit:UIKitBinding Switch_Thumb_Background,
                                                                                       Mode=FindAncestor,
                                                                                       AncestorType={x:Type controls:Switch}}"
                                                             Height="{uikit:UIKitBinding Switch_Thumb_Height,
                                                                                         Mode=FindAncestor,
                                                                                         AncestorType={x:Type controls:Switch}}"
                                                             Margin="{uikit:UIKitBinding Switch_Thumb_Margin,
                                                                                         Mode=FindAncestor,
                                                                                         AncestorType={x:Type controls:Switch}}"
                                                             Width="{uikit:UIKitBinding Switch_Thumb_Width,
                                                                                        Mode=FindAncestor,
                                                                                        AncestorType={x:Type controls:Switch}}" />
                                                </ControlTemplate>
                                            </Thumb.Template>
                                        </Thumb>
                                    </Track.Thumb>
                                </Track>
                            </Grid>
                        </ControlTemplate>
                    </ControlTemplate.Resources>

                    <Slider x:Name="PART_Switcher"
                            FocusVisualStyle="{uikit:UIKitBinding Switch_FocusVisualStyle}"
                            Height="{uikit:UIKitBinding Switch_Height}"
                            IsSnapToTickEnabled="False"
                            Maximum="1"
                            Minimum="0"
                            Opacity="{uikit:UIKitBinding Switch_Opacity}"
                            Orientation="Horizontal"
                            Template="{StaticResource SliderTemplate}"
                            Width="{uikit:UIKitBinding Switch_Width}" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="vs:StateService.State" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.State" Value="Disabled" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.State" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="vs:StateService.State" Value="Pressed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region TabMenu  -->

    <Style x:Key="TabMenuUniversal"
           TargetType="{x:Type controls:TabMenu}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="ItemContainerStyle" Value="{uikit:UIKitBinding TabMenu_ItemContainerStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TabMenu}">
                    <Border Background="{uikit:UIKitBinding TabMenu_Background}"
                            BorderBrush="{uikit:UIKitBinding TabMenu_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding TabMenu_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding TabMenu_CornerRadius}"
                            Padding="{uikit:UIKitBinding TabMenu_Padding}">
                        <controls:FadeLine Style="{uikit:UIKitBinding TabMenu_FadeLineStyle}">
                            <ItemsPresenter />
                        </controls:FadeLine>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region TabMenuItem  -->

    <Style x:Key="TabMenuItemUniversal"
           TargetType="{x:Type controls:TabMenuItem}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FocusVisualStyle" Value="{uikit:UIKitBinding TabMenuItem_FocusVisualStyle, Mode=Self, Type={x:Type Style}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TabMenuItem}">
                    <Border Background="{uikit:UIKitBinding TabMenuItem_Container_Background}"
                            BorderBrush="{uikit:UIKitBinding TabMenuItem_Container_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding TabMenuItem_Container_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding TabMenuItem_Container_CornerRadius}"
                            Height="{uikit:UIKitBinding TabMenuItem_Container_Height}"
                            Padding="{uikit:UIKitBinding TabMenuItem_Container_Padding}">
                        <Grid VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <controls:Icon16 x:Name="PART_Icon"
                                             Grid.Column="0"
                                             Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                             IconForeground="{uikit:UIKitBinding TabMenuItem_Icon_Fill}"
                                             Margin="{uikit:UIKitBinding TabMenuItem_Icon_Margin}"
                                             VerticalAlignment="Center" />

                            <uikit:UIKitContentPresenter Grid.Column="1"
                                                         VerticalAlignment="Center">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle TabMenuItem_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextTrimmingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:TabMenuItem}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>

                            <controls:BadgeCounter x:Name="PART_Counter"
                                                   Grid.Column="2"
                                                   Counter="{markupCommon:UIKitTemplateBinding Counter}"
                                                   Margin="{uikit:UIKitBinding TabMenuItem_BadgeCounter_Margin}"
                                                   MaxCounter="{markupCommon:UIKitTemplateBinding MaxCounter}"
                                                   Style="{uikit:UIKitBinding TabMenuItem_BadgeCounter_Style}"
                                                   VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasIcon" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Icon" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="HasCounter" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Counter" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Normal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Hover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedNormal" />
                            <Setter Property="Cursor" Value="Arrow" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="Disabled" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.SelectableState" Value="SelectedDisabled" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region Tag  -->

    <Style x:Key="TagUniversal"
           TargetType="{x:Type controls:Tag}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:Tag}">
                    <Grid Height="{uikit:UIKitBinding Tag_Height}">

                        <Border x:Name="PART_Border"
                                Background="{uikit:UIKitBinding Tag_Background}"
                                BorderBrush="{uikit:UIKitBinding Tag_BorderBrush}"
                                BorderThickness="{uikit:UIKitBinding Tag_BorderThickness}"
                                CornerRadius="{uikit:UIKitBinding Tag_CornerRadius}" />

                        <Grid Margin="{uikit:UIKitBinding Tag_Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <controls:Icon16 x:Name="PART_Icon"
                                             Grid.Column="0"
                                             Icon="{markupCommon:UIKitTemplateBinding Icon}"
                                             IconForeground="{uikit:UIKitBinding Tag_Icon_Color}"
                                             Margin="{uikit:UIKitBinding Tag_Icon_Margin}"
                                             SnapsToDevicePixels="False"
                                             UseLayoutRounding="False"
                                             VerticalAlignment="Center" />

                            <uikit:UIKitContentPresenter Grid.Column="1"
                                                         Content="{markupCommon:UIKitTemplateBinding Text}"
                                                         VerticalAlignment="Center">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle Tag_TextStyle,
                                                                                                BasedOnStyle={StaticResource TextTrimmingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:Tag}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="{x:Null}">
                            <Setter Property="Margin" TargetName="PART_Icon" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region TextInput  -->

    <Style x:Key="TextInputUniversal"
           TargetType="{x:Type controls:TextInputBase}">
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="IsReadOnlyCaretVisible" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Cursor" Value="Arrow" />
        <Setter Property="LostFocusBehavior" Value="WhenClickOutside" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TextInputBase}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition x:Name="PART_TextInputRow" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <uikit:UIKitContentPresenter x:Name="PART_Label"
                                                         Content="{markupCommon:UIKitTemplateBinding Label}"
                                                         Margin="{uikit:UIKitBinding TextInput_Label_Margin}"
                                                         VerticalAlignment="Bottom">
                                <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                    <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle TextInput_LabelStyle,
                                                                                                BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                                StateAwareAncestorType={x:Type controls:TextInputBase}}" />
                                </uikit:UIKitContentPresenter.ContentImpicitStyles>
                            </uikit:UIKitContentPresenter>
                            <TextBlock x:Name="PART_Counter"
                                       Grid.Column="1"
                                       Margin="{uikit:UIKitBinding TextInput_Counter_Margin}"
                                       Style="{uikit:UIKitBinding TextInput_CounterStyle}"
                                       VerticalAlignment="Bottom" />
                        </Grid>

                        <Grid x:Name="PART_TextInput"
                              Grid.Row="1"
                              controls:Popup.IsPopupTarget="True"
                              Cursor="IBeam"
                              Height="{markupCommon:UIKitTemplateBinding internals:TextInputBaseInternals.InputHeight}"
                              HorizontalAlignment="{markupCommon:UIKitTemplateBinding internals:TextInputBaseInternals.InputHorizontalAlignment}"
                              Width="{markupCommon:UIKitTemplateBinding internals:TextInputBaseInternals.InputWidth}">
                            <controls:RoundedPanel x:Name="PART_TextInputDecorator"
                                                   Background="{uikit:UIKitBinding TextInput_Background}"
                                                   BorderBrush="{uikit:UIKitBinding TextInput_BorderBrush}"
                                                   BorderThickness="{uikit:UIKitBinding TextInput_BorderThickness}"
                                                   CornerRadius="{uikit:UIKitBinding TextInput_CornerRadius}"
                                                   HorizontalAlignment="Stretch"
                                                   VerticalAlignment="Stretch">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition x:Name="PART_FirstColumn" Width="*" />
                                        <ColumnDefinition x:Name="PART_SecondColumn" Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <ScrollViewer x:Name="PART_ContentHost"
                                                  properties:ScrollViewerProps.OuterVerticalScrollBar="True"
                                                  VerticalAlignment="Stretch" />

                                    <TextBlock x:Name="PART_ContentStub"
                                               Background="{uikit:UIKitBinding TextInput_CaretBrush}"
                                               Foreground="{uikit:UIKitBinding TextInput_TextForeground}"
                                               Margin="{uikit:UIKitBinding TextInput_Padding}"
                                               Style="{uikit:UIKitBinding TextInput_TextStyle}"
                                               TextTrimming="CharacterEllipsis"
                                               VerticalAlignment="Top"
                                               Visibility="Collapsed" />

                                    <TextBlock x:Name="PART_Placeholder"
                                               Foreground="{uikit:UIKitBinding TextInput_Placeholder_Foreground}"
                                               IsHitTestVisible="False"
                                               Margin="{uikit:UIKitBinding TextInput_Padding}"
                                               Style="{uikit:UIKitBinding TextInput_PlaceholderStyle}"
                                               TextTrimming="CharacterEllipsis"
                                               VerticalAlignment="Top" />

                                    <ItemsControl x:Name="PART_ActionBar"
                                                  Grid.Column="1"
                                                  Focusable="False"
                                                  ItemsSource="{markupCommon:UIKitTemplateBinding internals:TextInputBaseInternals.ActionBar}"
                                                  Margin="{uikit:UIKitBinding TextInput_ActionBar_Margin}"
                                                  VerticalAlignment="Center">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </Grid>
                            </controls:RoundedPanel>
                        </Grid>

                        <controls:Popup x:Name="PART_ValidationPopup"
                                        IsPopupOpen="{markupCommon:UIKitTemplateBinding IsInvalidState}"
                                        PopupContent="{markupCommon:UIKitTemplateBinding InvalidStatePopupContent}"
                                        PopupPosition="{markupCommon:UIKitTemplateBinding InvalidStatePopupPosition}"
                                        PopupTarget="{Binding ElementName=PART_TextInputDecorator}"
                                        Style="{uikit:UIKitBinding TextInput_ValidationPopupStyle}" />

                        <uikit:UIKitContentPresenter x:Name="PART_Caption"
                                                     Grid.Row="2"
                                                     Content="{markupCommon:UIKitTemplateBinding Caption}"
                                                     Margin="{uikit:UIKitBinding TextInput_Caption_Margin}">
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle TextInput_CaptionStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTextBlock},
                                                                                            StateAwareAncestorType={x:Type controls:TextInputBase}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="internals:TextInputBaseInternals.InputWidth" Value="NaN">
                            <Setter Property="internals:TextInputBaseInternals.InputHorizontalAlignment" Value="Stretch" />
                        </Trigger>
                        <Trigger Property="internals:TextInputBaseInternals.IsMultiline" Value="False">
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
                            <Setter Property="TextWrapping" TargetName="PART_Placeholder" Value="NoWrap" />
                            <Setter Property="Height" TargetName="PART_TextInput" Value="{uikit:UIKitBinding TextInput_Height, Type={x:Type system:Double}, Mode=TemplatedParent}" />
                            <Setter Property="Height" TargetName="PART_TextInputRow" Value="Auto" />
                            <Setter Property="TextWrapping" Value="NoWrap" />
                            <Setter Property="AcceptsReturn" Value="False" />
                            <Setter Property="MaxLength" Value="32768" />
                        </Trigger>
                        <Trigger Property="internals:TextInputBaseInternals.IsMultiline" Value="True">
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Visible" />
                            <Setter Property="MinHeight" TargetName="PART_TextInput" Value="{uikit:UIKitBinding TextInput_Height, Type={x:Type system:Double}, Mode=TemplatedParent}" />
                            <Setter Property="Height" TargetName="PART_TextInputRow" Value="*" />
                            <Setter Property="TextWrapping" TargetName="PART_Placeholder" Value="Wrap" />
                            <Setter Property="TextWrapping" Value="Wrap" />
                            <Setter Property="AcceptsReturn" Value="True" />
                            <Setter Property="MaxLength" Value="1048576" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="internals:TextInputBaseInternals.IsMultiline" Value="True" />
                                <Condition Property="VerticalAlignment" Value="Stretch" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Height" TargetName="PART_TextInput" Value="NaN" />
                        </MultiTrigger>
                        <Trigger Property="internals:TextInputBaseInternals.HasCounter" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Counter" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Label" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Label" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Caption" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="PART_Caption" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="InvalidStatePopupContent" Value="{x:Null}">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="InvalidStatePopupContent" Value="{x:Static system:String.Empty}">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="IsVisible" Value="False">
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Normal" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Hover" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="vs:StateService.TextInputState" Value="Focus" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidNormal" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidHover" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="IsInvalidState" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="vs:StateService.TextInputState" Value="InvalidFocus" />
                        </MultiTrigger>
                        <Trigger Property="IsReadOnly" Value="False">
                            <Setter Property="ContextMenu" Value="{StaticResource InputContextMenu}" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="ContextMenu" Value="{StaticResource InputReadOnlyContextMenu}" />
                            <Setter Property="vs:StateService.TextInputState" Value="ReadOnly" />
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="vs:StateService.TextInputState" Value="Disabled" />
                            <Setter Property="IsPopupOpen" TargetName="PART_ValidationPopup" Value="False" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding FlowBehavior, RelativeSource={RelativeSource Self}}" Value="RtlSimulation" />
                                <Condition Binding="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="RightToLeft" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Width" TargetName="PART_FirstColumn" Value="Auto" />
                            <Setter Property="Width" TargetName="PART_SecondColumn" Value="*" />
                            <Setter Property="Grid.Column" TargetName="PART_ActionBar" Value="0" />
                            <Setter Property="Grid.Column" TargetName="PART_ContentHost" Value="1" />
                            <Setter Property="Grid.Column" TargetName="PART_ContentStub" Value="1" />
                            <Setter Property="Grid.Column" TargetName="PART_Placeholder" Value="1" />
                            <Setter Property="Margin" TargetName="PART_ContentStub" Value="{uikit:UIKitBinding TextInput_Padding, Converter={thicknessConverters:ThicknessComponentsSwapConverter Mode=Horizontal}, Type={x:Type Thickness}}" />
                            <Setter Property="Margin" TargetName="PART_Placeholder" Value="{uikit:UIKitBinding TextInput_Padding, Converter={thicknessConverters:ThicknessComponentsSwapConverter Mode=Horizontal}, Type={x:Type Thickness}}" />
                            <Setter Property="Margin" TargetName="PART_ActionBar" Value="{uikit:UIKitBinding TextInput_ActionBar_Margin, Converter={thicknessConverters:ThicknessComponentsSwapConverter Mode=Horizontal}, Type={x:Type Thickness}}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region TextViewer  -->

    <Style x:Key="TextViewerUniversal"
           TargetType="{x:Type controls:TextViewer}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:TextViewer}">
                    <controls:Island Style="{uikit:UIKitBinding TextViewer_IslandStyle}">
                        <ScrollViewer properties:ScrollViewerProps.IsBorderFadeEnabled="True">
                            <TextBox ContextMenu="{StaticResource InputReadOnlyContextMenu}"
                                     FocusVisualStyle="{x:Null}"
                                     IsReadOnly="True"
                                     IsReadOnlyCaretVisible="False"
                                     IsTabStop="False"
                                     OverridesDefaultStyle="True"
                                     Padding="{uikit:UIKitBinding TextViewer_Padding}"
                                     Style="{uikit:UIKitBinding TextViewer_TextStyle}"
                                     Text="{markupCommon:UIKitTemplateBinding Text}"
                                     TextWrapping="Wrap">
                                <TextBox.Template>
                                    <ControlTemplate>
                                        <ScrollViewer x:Name="PART_ContentHost" />
                                    </ControlTemplate>
                                </TextBox.Template>
                            </TextBox>
                        </ScrollViewer>
                    </controls:Island>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

    <!--  region ToggleButton  -->

    <Style x:Key="ToggleButtonUniversal"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ToggleButton}" />

    <!--  endregion  -->

    <!--  region ToolTip  -->

    <Style x:Key="ToolTipUniversal"
           TargetType="{x:Type ToolTip}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <!--  Constant values  -->
        <Setter Property="MaxWidth" Value="{x:Static uikit:UIKitConstants.ToolTipMaxWidth}" />
        <Setter Property="MaxHeight" Value="{x:Static uikit:UIKitConstants.ToolTipMaxHeight}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Background="{uikit:UIKitBinding ToolTip_Background}"
                            BorderBrush="{uikit:UIKitBinding ToolTip_BorderBrush}"
                            BorderThickness="{uikit:UIKitBinding ToolTip_BorderThickness}"
                            CornerRadius="{uikit:UIKitBinding ToolTip_CornerRadius}"
                            Effect="{uikit:UIKitBinding ToolTip_Shadow}"
                            Padding="{uikit:UIKitBinding ToolTip_Padding}">
                        <uikit:UIKitContentPresenter>
                            <uikit:UIKitContentPresenter.ContentImpicitStyles>
                                <uikit:UIKitStyleHolder StyleRef="{uikit:UIKitImplicitStyle ToolTip_TextStyle,
                                                                                            BasedOnStyle={StaticResource TextWrappingTrimmingTextBlock},
                                                                                            StateAwareAncestorType={x:Type ToolTip}}" />
                            </uikit:UIKitContentPresenter.ContentImpicitStyles>
                        </uikit:UIKitContentPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  endregion  -->

</ResourceDictionary>