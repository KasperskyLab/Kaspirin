<!--
    Copyright Â© 2024 AO Kaspersky Lab.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:visuals="http://schemas.kaspirin.com/common/visuals">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Kaspirin.UI.Framework.UiKit.Styles;component/Xaml/Generated/Styles.xaml" />
        <ResourceDictionary Source="/Kaspirin.UI.Framework.UiKit;component/Xaml/Generated/Styles.xaml" />
        <ResourceDictionary Source="/Kaspirin.UI.Framework.UiKit;component/Xaml/Manual/Styles.xaml" />
        <ResourceDictionary Source="StylesManual.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="ButtonGhostLink"
           BasedOn="{StaticResource ButtonGhost}"
           TargetType="{x:Type Button}">
        <Setter Property="visuals:ButtonProps.Icon" Value="LinkExternal" />
        <Setter Property="visuals:ButtonProps.IconLocation" Value="Right" />
    </Style>

    <Style x:Key="ToggleButtonGhostExpander"
           BasedOn="{StaticResource ToggleButtonGhost}"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="visuals:ToggleButtonProps.IconLocation" Value="Right" />
        <Setter Property="visuals:ToggleButtonProps.Icon">
            <Setter.Value>
                <Binding Converter="{visuals:BooleanToIcon16Converter True=ArrowUp,
                                                                      False=ArrowDown}"
                         Path="IsChecked"
                         RelativeSource="{RelativeSource Self}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuButtonGhostArrow"
           BasedOn="{StaticResource ContextMenuButtonGhost}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <Setter Property="IconMenuClosed" Value="ArrowDown" />
        <Setter Property="IconMenuOpened" Value="ArrowUp" />
    </Style>

    <Style x:Key="ContextMenuSelectGhostArrow"
           BasedOn="{StaticResource ContextMenuSelectGhost}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <Setter Property="IconMenuClosed" Value="ArrowDown" />
        <Setter Property="IconMenuOpened" Value="ArrowUp" />
    </Style>

</ResourceDictionary>
