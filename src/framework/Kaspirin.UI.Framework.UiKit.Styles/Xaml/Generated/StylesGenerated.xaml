<!--
    This file was automatically generated by the 'Kaspirin.UI.Framework.UiKit.Translator'.
    Code generated by the 'Kaspirin.UI.Framework.UiKit.Translator' is owned by the owner of the input file used when generating it.
    The following copyright applies to the portions of the 'Kaspirin.UI.Framework.UiKit.Translator' located in this file: Copyright © 2024 AO Kaspersky Lab.
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:uikit="http://schemas.kaspirin.com/common/uikit"
                    xmlns:visuals="http://schemas.kaspirin.com/common/visuals">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Templates.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--#region TextStyles-->
    <!--  [UiKitTextStyleBaseText]  -->
    <Style x:Key="UiKitTextStyleBaseText">
        <Setter Property="TextBlock.LineHeight" Value="20" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="14" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="REGULAR" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleBaseText}" />
    </Style>
    <!--  [UiKitTextStyleBaseTextMonospace]  -->
    <Style x:Key="UiKitTextStyleBaseTextMonospace">
        <Setter Property="TextBlock.LineHeight" Value="20" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res MonoFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="14" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="REGULAR" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleBaseTextMonospace}" />
    </Style>
    <!--  [UiKitTextStyleBaseTextSemibold]  -->
    <Style x:Key="UiKitTextStyleBaseTextSemibold">
        <Setter Property="TextBlock.LineHeight" Value="20" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="14" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleBaseTextSemibold}" />
    </Style>
    <!--  [UiKitTextStyleButton]  -->
    <Style x:Key="UiKitTextStyleButton">
        <Setter Property="TextBlock.LineHeight" Value="20" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="14" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleButton}" />
    </Style>
    <!--  [UiKitTextStyleHeader1]  -->
    <Style x:Key="UiKitTextStyleHeader1">
        <Setter Property="TextBlock.LineHeight" Value="32" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="28" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleHeader1}" />
    </Style>
    <!--  [UiKitTextStyleHeader2]  -->
    <Style x:Key="UiKitTextStyleHeader2">
        <Setter Property="TextBlock.LineHeight" Value="28" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="24" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleHeader2}" />
    </Style>
    <!--  [UiKitTextStyleHeader3]  -->
    <Style x:Key="UiKitTextStyleHeader3">
        <Setter Property="TextBlock.LineHeight" Value="24" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="18" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleHeader3}" />
    </Style>
    <!--  [UiKitTextStyleHeader3Monospace]  -->
    <Style x:Key="UiKitTextStyleHeader3Monospace">
        <Setter Property="TextBlock.LineHeight" Value="24" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res MonoFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="18" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="BOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleHeader3Monospace}" />
    </Style>
    <!--  [UiKitTextStyleHeader4]  -->
    <Style x:Key="UiKitTextStyleHeader4">
        <Setter Property="TextBlock.LineHeight" Value="20" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="16" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleHeader4}" />
    </Style>
    <!--  [UiKitTextStyleHeader5]  -->
    <Style x:Key="UiKitTextStyleHeader5">
        <Setter Property="TextBlock.LineHeight" Value="20" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="14" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleHeader5}" />
    </Style>
    <!--  [UiKitTextStyleSmallText]  -->
    <Style x:Key="UiKitTextStyleSmallText">
        <Setter Property="TextBlock.LineHeight" Value="16" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="12" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="REGULAR" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleSmallText}" />
    </Style>
    <!--  [UiKitTextStyleSmallTextMedium]  -->
    <Style x:Key="UiKitTextStyleSmallTextMedium">
        <Setter Property="TextBlock.LineHeight" Value="16" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="12" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="MEDIUM" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleSmallTextMedium}" />
    </Style>
    <!--  [UiKitTextStyleSubheader]  -->
    <Style x:Key="UiKitTextStyleSubheader">
        <Setter Property="TextBlock.LineHeight" Value="24" />
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight" />
        <Setter Property="TextElement.FontFamily" Value="{Res TextFontFamily, Scope=Fonts}" />
        <Setter Property="TextElement.FontSize" Value="20" />
        <Setter Property="TextElement.FontStyle" Value="NORMAL" />
        <Setter Property="TextElement.FontWeight" Value="SEMIBOLD" />
        <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTextStyleSubheader}" />
    </Style>
    <!--#endregion-->
    <!--#region Spinners-->
    <!--  [UiKitSpinner12]  -->
    <Style x:Key="UiKitSpinner12"
           BasedOn="{StaticResource SpinnerUniversal}"
           TargetType="{x:Type visuals:Spinner}">
        <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res Foreground, Scope=UiKitSpinner12}" />
        <uikit:UIKitSetter Id="Spinner_Height" Value="12" />
        <uikit:UIKitSetter Id="Spinner_Image" Value="{Img UiKitSpinner12_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Spinner_Width" Value="12" />
    </Style>
    <!--  [UiKitSpinner16]  -->
    <Style x:Key="UiKitSpinner16"
           BasedOn="{StaticResource SpinnerUniversal}"
           TargetType="{x:Type visuals:Spinner}">
        <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res Foreground, Scope=UiKitSpinner16}" />
        <uikit:UIKitSetter Id="Spinner_Height" Value="16" />
        <uikit:UIKitSetter Id="Spinner_Image" Value="{Img UiKitSpinner16_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Spinner_Width" Value="16" />
    </Style>
    <!--  [UiKitSpinner24]  -->
    <Style x:Key="UiKitSpinner24"
           BasedOn="{StaticResource SpinnerUniversal}"
           TargetType="{x:Type visuals:Spinner}">
        <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res Foreground, Scope=UiKitSpinner24}" />
        <uikit:UIKitSetter Id="Spinner_Height" Value="24" />
        <uikit:UIKitSetter Id="Spinner_Image" Value="{Img UiKitSpinner24_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Spinner_Width" Value="24" />
    </Style>
    <!--  [UiKitSpinner48]  -->
    <Style x:Key="UiKitSpinner48"
           BasedOn="{StaticResource SpinnerUniversal}"
           TargetType="{x:Type visuals:Spinner}">
        <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res Foreground, Scope=UiKitSpinner48}" />
        <uikit:UIKitSetter Id="Spinner_Height" Value="48" />
        <uikit:UIKitSetter Id="Spinner_Image" Value="{Img UiKitSpinner48_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Spinner_Width" Value="48" />
    </Style>
    <!--  [UiKitSpinner64]  -->
    <Style x:Key="UiKitSpinner64"
           BasedOn="{StaticResource SpinnerUniversal}"
           TargetType="{x:Type visuals:Spinner}">
        <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res Foreground, Scope=UiKitSpinner64}" />
        <uikit:UIKitSetter Id="Spinner_Height" Value="64" />
        <uikit:UIKitSetter Id="Spinner_Image" Value="{Img UiKitSpinner64_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Spinner_Width" Value="64" />
    </Style>
    <!--  [UiKitSpinner8]  -->
    <Style x:Key="UiKitSpinner8"
           BasedOn="{StaticResource SpinnerUniversal}"
           TargetType="{x:Type visuals:Spinner}">
        <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res Foreground, Scope=UiKitSpinner8}" />
        <uikit:UIKitSetter Id="Spinner_Height" Value="8" />
        <uikit:UIKitSetter Id="Spinner_Image" Value="{Img UiKitSpinner8_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Spinner_Width" Value="8" />
    </Style>
    <!--#endregion-->
    <!--#region Badges-->
    <!--  [UiKitBadge]  -->
    <Style x:Key="UiKitBadge"
           BasedOn="{StaticResource BadgeUniversal}"
           TargetType="{x:Type visuals:Badge}">
        <uikit:UIKitSetter Id="Badge_CornerRadius" Value="3" />
        <uikit:UIKitSetter Id="Badge_Height" Value="6" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="Badge_Background" Value="{Res BackgroundDanger, Scope=UiKitBadge}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="Badge_Background" Value="{Res BackgroundInfo, Scope=UiKitBadge}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="Badge_Background" Value="{Res BackgroundNeutral, Scope=UiKitBadge}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="Badge_Background" Value="{Res BackgroundPositive, Scope=UiKitBadge}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="Badge_Background" Value="{Res BackgroundWarning, Scope=UiKitBadge}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitBadgeCounter]  -->
    <Style x:Key="UiKitBadgeCounter"
           BasedOn="{StaticResource BadgeCounterUniversal}"
           TargetType="{x:Type visuals:BadgeCounter}">
        <uikit:UIKitSetter Id="BadgeCounter_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res Foreground, Scope=UiKitBadgeCounter}" />
        <uikit:UIKitSetter Id="BadgeCounter_Height" Value="16" />
        <uikit:UIKitSetter Id="BadgeCounter_Padding" Value="4,0" />
        <uikit:UIKitSetter Id="BadgeCounter_TextStyle" Value="{StaticResource UiKitTextStyleSmallTextMedium}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BackgroundDanger, Scope=UiKitBadgeCounter}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BackgroundInfo, Scope=UiKitBadgeCounter}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BackgroundNeutral, Scope=UiKitBadgeCounter}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BackgroundPositive, Scope=UiKitBadgeCounter}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BackgroundWarning, Scope=UiKitBadgeCounter}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitBadgeText]  -->
    <Style x:Key="UiKitBadgeText"
           BasedOn="{StaticResource BadgeTextUniversal}"
           TargetType="{x:Type visuals:BadgeText}">
        <uikit:UIKitSetter Id="BadgeText_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="BadgeText_Foreground" Value="{Res Foreground, Scope=UiKitBadgeText}" />
        <uikit:UIKitSetter Id="BadgeText_Height" Value="16" />
        <uikit:UIKitSetter Id="BadgeText_Padding" Value="4,0" />
        <uikit:UIKitSetter Id="BadgeText_TextStyle" Value="{StaticResource UiKitTextStyleSmallTextMedium}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="BadgeText_Background" Value="{Res BackgroundDanger, Scope=UiKitBadgeText}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="BadgeText_Background" Value="{Res BackgroundInfo, Scope=UiKitBadgeText}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="BadgeText_Background" Value="{Res BackgroundNeutral, Scope=UiKitBadgeText}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="BadgeText_Background" Value="{Res BackgroundPositive, Scope=UiKitBadgeText}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="BadgeText_Background" Value="{Res BackgroundWarning, Scope=UiKitBadgeText}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Bullets-->
    <!--  [UiKitBulletBold]  -->
    <Style x:Key="UiKitBulletBold"
           BasedOn="{StaticResource BulletUniversal}"
           TargetType="{x:Type visuals:Bullet}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseTextSemibold}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitBulletBold}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Bullet_Color" Value="{Res BulletColor, Scope=UiKitBulletBold}" />
        <uikit:UIKitSetter Id="Bullet_Margin" Value="0,4,6,0" />
        <uikit:UIKitSetter Id="Bullet_TextStyle" Value="{StaticResource TextStyle}" />
    </Style>
    <!--  [UiKitBulletRegular]  -->
    <Style x:Key="UiKitBulletRegular"
           BasedOn="{StaticResource BulletUniversal}"
           TargetType="{x:Type visuals:Bullet}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitBulletRegular}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Bullet_Color" Value="{Res BulletColor, Scope=UiKitBulletRegular}" />
        <uikit:UIKitSetter Id="Bullet_Margin" Value="0,4,6,0" />
        <uikit:UIKitSetter Id="Bullet_TextStyle" Value="{StaticResource TextStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region Buttons-->
    <!--  [UiKitBigButtonBaseOutlineSecondary]  -->
    <Style x:Key="UiKitBigButtonBaseOutlineSecondary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type visuals:BigButton}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitBigButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitBigButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,16,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="16,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitBigButtonBaseOutlineSecondary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="52" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="24,14" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="14" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="14" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitBigButtonBaseOutlineSecondary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitBigButtonBasePrimary]  -->
    <Style x:Key="UiKitBigButtonBasePrimary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type visuals:BigButton}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonBasePrimary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitBigButtonBasePrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitBigButtonBasePrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitBigButtonBasePrimary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,16,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="16,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitBigButtonBasePrimary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="52" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="24,14" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitBigButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="14" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="14" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitBigButtonBasePrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitBigButtonBasePrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitBigButtonBasePrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitBigButtonBasePrimary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitBigButtonBaseSecondary]  -->
    <Style x:Key="UiKitBigButtonBaseSecondary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type visuals:BigButton}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonBaseSecondary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitBigButtonBaseSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitBigButtonBaseSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitBigButtonBaseSecondary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,16,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="16,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitBigButtonBaseSecondary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="52" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="24,14" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitBigButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="14" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="14" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitBigButtonBaseSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitBigButtonBaseSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitBigButtonBaseSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitBigButtonBaseSecondary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitBigButtonNeutralPrimary]  -->
    <Style x:Key="UiKitBigButtonNeutralPrimary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type visuals:BigButton}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonNeutralPrimary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitBigButtonNeutralPrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitBigButtonNeutralPrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitBigButtonNeutralPrimary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,16,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="16,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitBigButtonNeutralPrimary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="52" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="24,14" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitBigButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="14" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="14" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitBigButtonNeutralPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitBigButtonNeutralPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitBigButtonNeutralPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitBigButtonNeutralPrimary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitBigButtonStaticWhite]  -->
    <Style x:Key="UiKitBigButtonStaticWhite"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type visuals:BigButton}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSubheader}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitBigButtonStaticWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitBigButtonStaticWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitBigButtonStaticWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitBigButtonStaticWhite}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,16,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="16,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitBigButtonStaticWhite}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="52" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="24,14" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitBigButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="14" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="14" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitBigButtonStaticWhite}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitBigButtonStaticWhite}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitBigButtonStaticWhite}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitBigButtonStaticWhite}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitButtonBaseGhost]  -->
    <Style x:Key="UiKitButtonBaseGhost"
           BasedOn="{StaticResource ButtonGhostUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBaseGhost}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBaseGhost}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonBaseGhost}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonBaseGhost}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonBaseGhost}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonBaseGhost}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="20" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="0" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="2" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonBaseGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonBaseGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonBaseGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonBaseGhost}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonBaseGhost]  -->
    <Style x:Key="UiKitToggleButtonBaseGhost"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonBaseGhost}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonBaseGhost]  -->
    <Style x:Key="UiKitContextMenuButtonBaseGhost"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBaseGhost}" />
    </Style>
    <!--  [UiKitContextMenuSelectBaseGhost]  -->
    <Style x:Key="UiKitContextMenuSelectBaseGhost"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBaseGhost}" />
    </Style>
    <!--  [UiKitButtonBaseOutlineSecondary]  -->
    <Style x:Key="UiKitButtonBaseOutlineSecondary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBaseOutlineSecondary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonBaseOutlineSecondary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonBaseOutlineSecondary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonBaseOutlineSecondary]  -->
    <Style x:Key="UiKitToggleButtonBaseOutlineSecondary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonBaseOutlineSecondary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonBaseOutlineSecondary]  -->
    <Style x:Key="UiKitContextMenuButtonBaseOutlineSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBaseOutlineSecondary}" />
    </Style>
    <!--  [UiKitContextMenuSelectBaseOutlineSecondary]  -->
    <Style x:Key="UiKitContextMenuSelectBaseOutlineSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBaseOutlineSecondary}" />
    </Style>
    <!--  [UiKitButtonBasePrimary]  -->
    <Style x:Key="UiKitButtonBasePrimary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBasePrimary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBasePrimary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonBasePrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonBasePrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonBasePrimary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonBasePrimary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonBasePrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonBasePrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonBasePrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonBasePrimary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonBasePrimary]  -->
    <Style x:Key="UiKitToggleButtonBasePrimary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonBasePrimary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonBasePrimary]  -->
    <Style x:Key="UiKitContextMenuButtonBasePrimary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBasePrimary}" />
    </Style>
    <!--  [UiKitContextMenuSelectBasePrimary]  -->
    <Style x:Key="UiKitContextMenuSelectBasePrimary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBasePrimary}" />
    </Style>
    <!--  [UiKitButtonBaseSecondary]  -->
    <Style x:Key="UiKitButtonBaseSecondary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonBaseSecondary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonBaseSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonBaseSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonBaseSecondary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonBaseSecondary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonBaseSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonBaseSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonBaseSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonBaseSecondary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonBaseSecondary]  -->
    <Style x:Key="UiKitToggleButtonBaseSecondary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonBaseSecondary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonBaseSecondary]  -->
    <Style x:Key="UiKitContextMenuButtonBaseSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBaseSecondary}" />
    </Style>
    <!--  [UiKitContextMenuSelectBaseSecondary]  -->
    <Style x:Key="UiKitContextMenuSelectBaseSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonBaseSecondary}" />
    </Style>
    <!--  [UiKitButtonDangerGhost]  -->
    <Style x:Key="UiKitButtonDangerGhost"
           BasedOn="{StaticResource ButtonGhostUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonDangerGhost}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonDangerGhost}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonDangerGhost}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonDangerGhost}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonDangerGhost}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonDangerGhost}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="20" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="0" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonDangerGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="2" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonDangerGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonDangerGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonDangerGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonDangerGhost}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonDangerGhost]  -->
    <Style x:Key="UiKitToggleButtonDangerGhost"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonDangerGhost}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonDangerGhost]  -->
    <Style x:Key="UiKitContextMenuButtonDangerGhost"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonDangerGhost}" />
    </Style>
    <!--  [UiKitContextMenuSelectDangerGhost]  -->
    <Style x:Key="UiKitContextMenuSelectDangerGhost"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonDangerGhost}" />
    </Style>
    <!--  [UiKitButtonDangerOutlineSecondary]  -->
    <Style x:Key="UiKitButtonDangerOutlineSecondary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonDangerOutlineSecondary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonDangerOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonDangerOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonDangerOutlineSecondary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonDangerOutlineSecondary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonDangerOutlineSecondary]  -->
    <Style x:Key="UiKitToggleButtonDangerOutlineSecondary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonDangerOutlineSecondary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonDangerOutlineSecondary]  -->
    <Style x:Key="UiKitContextMenuButtonDangerOutlineSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonDangerOutlineSecondary}" />
    </Style>
    <!--  [UiKitContextMenuSelectDangerOutlineSecondary]  -->
    <Style x:Key="UiKitContextMenuSelectDangerOutlineSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonDangerOutlineSecondary}" />
    </Style>
    <!--  [UiKitButtonDangerPrimary]  -->
    <Style x:Key="UiKitButtonDangerPrimary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonDangerPrimary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonDangerPrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonDangerPrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonDangerPrimary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonDangerPrimary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonDangerPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonDangerPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonDangerPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonDangerPrimary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonDangerPrimary]  -->
    <Style x:Key="UiKitToggleButtonDangerPrimary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonDangerPrimary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonDangerPrimary]  -->
    <Style x:Key="UiKitContextMenuButtonDangerPrimary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonDangerPrimary}" />
    </Style>
    <!--  [UiKitContextMenuSelectDangerPrimary]  -->
    <Style x:Key="UiKitContextMenuSelectDangerPrimary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonDangerPrimary}" />
    </Style>
    <!--  [UiKitButtonNeutralGhost]  -->
    <Style x:Key="UiKitButtonNeutralGhost"
           BasedOn="{StaticResource ButtonGhostUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonNeutralGhost}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonNeutralGhost}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonNeutralGhost}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonNeutralGhost}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonNeutralGhost}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonNeutralGhost}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="20" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="0" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="0.7" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonNeutralGhost}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="0.5" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="2" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonNeutralGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonNeutralGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonNeutralGhost}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonNeutralGhost}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonNeutralGhost]  -->
    <Style x:Key="UiKitToggleButtonNeutralGhost"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonNeutralGhost}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonNeutralGhost]  -->
    <Style x:Key="UiKitContextMenuButtonNeutralGhost"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonNeutralGhost}" />
    </Style>
    <!--  [UiKitContextMenuSelectNeutralGhost]  -->
    <Style x:Key="UiKitContextMenuSelectNeutralGhost"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonNeutralGhost}" />
    </Style>
    <!--  [UiKitButtonNeutralPrimary]  -->
    <Style x:Key="UiKitButtonNeutralPrimary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonNeutralPrimary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonNeutralPrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonNeutralPrimary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonNeutralPrimary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonNeutralPrimary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonNeutralPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonNeutralPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonNeutralPrimary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonNeutralPrimary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonNeutralPrimary]  -->
    <Style x:Key="UiKitToggleButtonNeutralPrimary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonNeutralPrimary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonNeutralPrimary]  -->
    <Style x:Key="UiKitContextMenuButtonNeutralPrimary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonNeutralPrimary}" />
    </Style>
    <!--  [UiKitContextMenuSelectNeutralPrimary]  -->
    <Style x:Key="UiKitContextMenuSelectNeutralPrimary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonNeutralPrimary}" />
    </Style>
    <!--  [UiKitButtonStaticWhite]  -->
    <Style x:Key="UiKitButtonStaticWhite"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonStaticWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonStaticWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonStaticWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonStaticWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonStaticWhite}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonStaticWhite}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonStaticWhite}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonStaticWhite}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonStaticWhite}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonStaticWhite}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonStaticWhite}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonStaticWhite]  -->
    <Style x:Key="UiKitToggleButtonStaticWhite"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonStaticWhite}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonStaticWhite]  -->
    <Style x:Key="UiKitContextMenuButtonStaticWhite"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonStaticWhite}" />
    </Style>
    <!--  [UiKitContextMenuSelectStaticWhite]  -->
    <Style x:Key="UiKitContextMenuSelectStaticWhite"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonStaticWhite}" />
    </Style>
    <!--  [UiKitButtonStaticWhiteOutlineSecondary]  -->
    <Style x:Key="UiKitButtonStaticWhiteOutlineSecondary"
           BasedOn="{StaticResource ButtonUniversal}"
           TargetType="{x:Type ButtonBase}">
        <Style.Resources>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleDisabled"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStyleHover"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="SpinnerStylePressed"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}">
                <uikit:UIKitSetter Id="Spinner_Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalSideLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
        <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitButtonStaticWhiteOutlineSecondary}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledSideLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleDisabled}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverSideLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStyleHover}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedSideLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Spinner_Style" Value="{StaticResource SpinnerStylePressed}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundDisabledCenterLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundHoverCenterLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundNormalCenterLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Content" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Button_Icon_Foreground" Value="{Res IconForegroundPressedCenterLocation, Scope=UiKitButtonStaticWhiteOutlineSecondary}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitToggleButtonStaticWhiteOutlineSecondary]  -->
    <Style x:Key="UiKitToggleButtonStaticWhiteOutlineSecondary"
           BasedOn="{visuals:MultiStyle ToggleButtonUniversal UiKitButtonStaticWhiteOutlineSecondary}"
           TargetType="{x:Type ToggleButton}" />
    <!--  [UiKitContextMenuButtonStaticWhiteOutlineSecondary]  -->
    <Style x:Key="UiKitContextMenuButtonStaticWhiteOutlineSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuButton}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonStaticWhiteOutlineSecondary}" />
    </Style>
    <!--  [UiKitContextMenuSelectStaticWhiteOutlineSecondary]  -->
    <Style x:Key="UiKitContextMenuSelectStaticWhiteOutlineSecondary"
           BasedOn="{StaticResource ContextMenuButtonUniversal}"
           TargetType="{x:Type visuals:ContextMenuSelect}">
        <uikit:UIKitSetter Id="ContextMenuButton_ToggleButton_Style" Value="{StaticResource UiKitToggleButtonStaticWhiteOutlineSecondary}" />
    </Style>
    <!--#endregion-->
    <!--#region IconButtons-->
    <!--  [UiKitIconButton16]  -->
    <Style x:Key="UiKitIconButton16"
           BasedOn="{StaticResource IconButtonUniversal}"
           TargetType="{x:Type visuals:IconButtonBase}">
        <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundNormal, Scope=UiKitIconButton16}" />
        <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderNormal, Scope=UiKitIconButton16}" />
        <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="IconButton_CornerRadius" Value="4" />
        <uikit:UIKitSetter Id="IconButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitIconButton16}"
                                     CornerRadius="4"
                                     Margin="-2"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res IconForeground, Scope=UiKitIconButton16}" />
        <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="IconButton_Padding" Value="4" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundDisabled, Scope=UiKitIconButton16}" />
                <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitIconButton16}" />
                <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundHover, Scope=UiKitIconButton16}" />
                <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderHover, Scope=UiKitIconButton16}" />
                <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundPressed, Scope=UiKitIconButton16}" />
                <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderPressed, Scope=UiKitIconButton16}" />
                <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitIconButton24]  -->
    <Style x:Key="UiKitIconButton24"
           BasedOn="{StaticResource IconButtonUniversal}"
           TargetType="{x:Type visuals:IconButtonBase}">
        <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundNormal, Scope=UiKitIconButton24}" />
        <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderNormal, Scope=UiKitIconButton24}" />
        <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="IconButton_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="IconButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitIconButton24}"
                                     CornerRadius="8"
                                     Margin="-2"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res IconForeground, Scope=UiKitIconButton24}" />
        <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="IconButton_Padding" Value="4" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundDisabled, Scope=UiKitIconButton24}" />
                <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitIconButton24}" />
                <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="0.4" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundHover, Scope=UiKitIconButton24}" />
                <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderHover, Scope=UiKitIconButton24}" />
                <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="IconButton_Background" Value="{Res BackgroundPressed, Scope=UiKitIconButton24}" />
                <uikit:UIKitSetter Id="IconButton_BorderBrush" Value="{Res BorderPressed, Scope=UiKitIconButton24}" />
                <uikit:UIKitSetter Id="IconButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="IconButton_Icon_Opacity" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region TabMenuItems-->
    <!--  [UiKitTabMenuItemPrimary]  -->
    <Style x:Key="UiKitTabMenuItemPrimary"
           BasedOn="{StaticResource TabMenuItemUniversal}"
           TargetType="{x:Type visuals:TabMenuItem}">
        <Style.Resources>
            <Style x:Key="BadgeCounterStyle"
                   BasedOn="{StaticResource UiKitBadgeCounter}"
                   TargetType="{x:Type visuals:BadgeCounter}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Normal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundNormal, Scope=UiKitTabMenuItemPrimary}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundNormal, Scope=UiKitTabMenuItemPrimary}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundDisabled, Scope=UiKitTabMenuItemPrimary}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundDisabled, Scope=UiKitTabMenuItemPrimary}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Hover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundHover, Scope=UiKitTabMenuItemPrimary}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundHover, Scope=UiKitTabMenuItemPrimary}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="SelectedNormal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedNormal, Scope=UiKitTabMenuItemPrimary}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedNormal, Scope=UiKitTabMenuItemPrimary}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="SelectedDisabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedDisabled, Scope=UiKitTabMenuItemPrimary}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedDisabled, Scope=UiKitTabMenuItemPrimary}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitTabMenuItemPrimary}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitTabMenuItemPrimary}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitTabMenuItemPrimary}" />
            </Style>
            <Style x:Key="TextStyleSelectedDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedDisabled, Scope=UiKitTabMenuItemPrimary}" />
            </Style>
            <Style x:Key="TextStyleSelectedNormal"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedNormal, Scope=UiKitTabMenuItemPrimary}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenuItem_BadgeCounter_Margin" Value="4,0,0,0" />
        <uikit:UIKitSetter Id="TabMenuItem_BadgeCounter_Style" Value="{StaticResource BadgeCounterStyle}" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_Height" Value="28" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_Padding" Value="16,4" />
        <uikit:UIKitSetter Id="TabMenuItem_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitTabMenuItemPrimary}"
                                     CornerRadius="6"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="TabMenuItem_Icon_Margin" Value="0,0,4,0" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleSelectedDisabled" Value="{StaticResource TextStyleSelectedDisabled}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleSelectedNormal" Value="{StaticResource TextStyleSelectedNormal}" />
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Padding" Value="6" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Margin" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundNormal, Scope=UiKitTabMenuItemPrimary}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundHover, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundHover, Scope=UiKitTabMenuItemPrimary}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundDisabled, Scope=UiKitTabMenuItemPrimary}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundSelectedNormal, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorSelectedNormal, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundSelectedNormal, Scope=UiKitTabMenuItemPrimary}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundSelectedDisabled, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorSelectedDisabled, Scope=UiKitTabMenuItemPrimary}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundSelectedDisabled, Scope=UiKitTabMenuItemPrimary}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitTabMenuItemSecondaryGrey]  -->
    <Style x:Key="UiKitTabMenuItemSecondaryGrey"
           BasedOn="{StaticResource TabMenuItemUniversal}"
           TargetType="{x:Type visuals:TabMenuItem}">
        <Style.Resources>
            <Style x:Key="BadgeCounterStyle"
                   BasedOn="{StaticResource UiKitBadgeCounter}"
                   TargetType="{x:Type visuals:BadgeCounter}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Normal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Hover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundHover, Scope=UiKitTabMenuItemSecondaryGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundHover, Scope=UiKitTabMenuItemSecondaryGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="SelectedNormal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="SelectedDisabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Style>
            <Style x:Key="TextStyleSelectedDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Style>
            <Style x:Key="TextStyleSelectedNormal"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenuItem_BadgeCounter_Margin" Value="4,0,0,0" />
        <uikit:UIKitSetter Id="TabMenuItem_BadgeCounter_Style" Value="{StaticResource BadgeCounterStyle}" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_Height" Value="28" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_Padding" Value="16,4" />
        <uikit:UIKitSetter Id="TabMenuItem_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitTabMenuItemSecondaryGrey}"
                                     CornerRadius="6"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="TabMenuItem_Icon_Margin" Value="0,0,4,0" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleSelectedDisabled" Value="{StaticResource TextStyleSelectedDisabled}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleSelectedNormal" Value="{StaticResource TextStyleSelectedNormal}" />
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Padding" Value="6" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Margin" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundHover, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundHover, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorSelectedNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorSelectedDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryGrey}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitTabMenuItemSecondaryWhite]  -->
    <Style x:Key="UiKitTabMenuItemSecondaryWhite"
           BasedOn="{StaticResource TabMenuItemUniversal}"
           TargetType="{x:Type visuals:TabMenuItem}">
        <Style.Resources>
            <Style x:Key="BadgeCounterStyle"
                   BasedOn="{StaticResource UiKitBadgeCounter}"
                   TargetType="{x:Type visuals:BadgeCounter}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Normal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="Hover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundHover, Scope=UiKitTabMenuItemSecondaryWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundHover, Scope=UiKitTabMenuItemSecondaryWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="SelectedNormal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:TabMenuItem}}}" Value="SelectedDisabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Style>
            <Style x:Key="TextStyleSelectedDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Style>
            <Style x:Key="TextStyleSelectedNormal"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenuItem_BadgeCounter_Margin" Value="4,0,0,0" />
        <uikit:UIKitSetter Id="TabMenuItem_BadgeCounter_Style" Value="{StaticResource BadgeCounterStyle}" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_Height" Value="28" />
        <uikit:UIKitSetter Id="TabMenuItem_Container_Padding" Value="16,4" />
        <uikit:UIKitSetter Id="TabMenuItem_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitTabMenuItemSecondaryWhite}"
                                     CornerRadius="6"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="TabMenuItem_Icon_Margin" Value="0,0,4,0" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleSelectedDisabled" Value="{StaticResource TextStyleSelectedDisabled}" />
        <uikit:UIKitSetter Id="TabMenuItem_TextStyleSelectedNormal" Value="{StaticResource TextStyleSelectedNormal}" />
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Padding" Value="6" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Margin" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundHover, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundHover, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorSelectedNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundSelectedNormal, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="TabMenuItem_Container_Background" Value="{Res BackgroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderBrush" Value="{Res BorderColorSelectedDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
                <uikit:UIKitSetter Id="TabMenuItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="TabMenuItem_Icon_Fill" Value="{Res IconForegroundSelectedDisabled, Scope=UiKitTabMenuItemSecondaryWhite}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region TabMenus-->
    <!--  [UiKitTabMenuPrimaryGrey]  -->
    <Style x:Key="UiKitTabMenuPrimaryGrey"
           BasedOn="{StaticResource TabMenuUniversal}"
           TargetType="{x:Type visuals:TabMenu}">
        <Style.Resources>
            <Style x:Key="IconButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton24}"
                   TargetType="{x:Type visuals:IconButtonBase}">
                <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res ButtonForeground, Scope=UiKitTabMenuPrimaryGrey}" />
                <uikit:UIKitSetter Id="IconButton_Padding" Value="2" />
            </Style>
            <Style x:Key="FadeLineStyle"
                   BasedOn="{StaticResource FadeLineUniversal}"
                   TargetType="{x:Type visuals:FadeLine}">
                <uikit:UIKitSetter Id="FadeLine_IconButton_LeftIcon" Value="ArrowLeft" />
                <uikit:UIKitSetter Id="FadeLine_IconButton_RightIcon" Value="ArrowRight" />
                <uikit:UIKitSetter Id="FadeLine_IconButtonStyle" Value="{StaticResource IconButtonStyle}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenu_Background" Value="{Res Background, Scope=UiKitTabMenuPrimaryGrey}" />
        <uikit:UIKitSetter Id="TabMenu_BorderBrush" Value="{Res BorderColor, Scope=UiKitTabMenuPrimaryGrey}" />
        <uikit:UIKitSetter Id="TabMenu_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="TabMenu_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="TabMenu_FadeLineStyle" Value="{StaticResource FadeLineStyle}" />
        <uikit:UIKitSetter Id="TabMenu_Padding" Value="2" />
        <uikit:UIKitSetter Id="TabMenu_ItemContainerStyle" Value="{StaticResource UiKitTabMenuItemPrimary}" />
    </Style>
    <!--  [UiKitTabMenuPrimaryWhite]  -->
    <Style x:Key="UiKitTabMenuPrimaryWhite"
           BasedOn="{StaticResource TabMenuUniversal}"
           TargetType="{x:Type visuals:TabMenu}">
        <Style.Resources>
            <Style x:Key="IconButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton24}"
                   TargetType="{x:Type visuals:IconButtonBase}">
                <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res ButtonForeground, Scope=UiKitTabMenuPrimaryWhite}" />
                <uikit:UIKitSetter Id="IconButton_Padding" Value="2" />
            </Style>
            <Style x:Key="FadeLineStyle"
                   BasedOn="{StaticResource FadeLineUniversal}"
                   TargetType="{x:Type visuals:FadeLine}">
                <uikit:UIKitSetter Id="FadeLine_IconButton_LeftIcon" Value="ArrowLeft" />
                <uikit:UIKitSetter Id="FadeLine_IconButton_RightIcon" Value="ArrowRight" />
                <uikit:UIKitSetter Id="FadeLine_IconButtonStyle" Value="{StaticResource IconButtonStyle}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenu_Background" Value="{Res Background, Scope=UiKitTabMenuPrimaryWhite}" />
        <uikit:UIKitSetter Id="TabMenu_BorderBrush" Value="{Res BorderColor, Scope=UiKitTabMenuPrimaryWhite}" />
        <uikit:UIKitSetter Id="TabMenu_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="TabMenu_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="TabMenu_FadeLineStyle" Value="{StaticResource FadeLineStyle}" />
        <uikit:UIKitSetter Id="TabMenu_Padding" Value="2" />
        <uikit:UIKitSetter Id="TabMenu_ItemContainerStyle" Value="{StaticResource UiKitTabMenuItemPrimary}" />
    </Style>
    <!--  [UiKitTabMenuSecondaryGrey]  -->
    <Style x:Key="UiKitTabMenuSecondaryGrey"
           BasedOn="{StaticResource TabMenuUniversal}"
           TargetType="{x:Type visuals:TabMenu}">
        <Style.Resources>
            <Style x:Key="IconButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton24}"
                   TargetType="{x:Type visuals:IconButtonBase}">
                <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res ButtonForeground, Scope=UiKitTabMenuSecondaryGrey}" />
                <uikit:UIKitSetter Id="IconButton_Padding" Value="2" />
            </Style>
            <Style x:Key="FadeLineStyle"
                   BasedOn="{StaticResource FadeLineUniversal}"
                   TargetType="{x:Type visuals:FadeLine}">
                <uikit:UIKitSetter Id="FadeLine_IconButton_LeftIcon" Value="ArrowLeft" />
                <uikit:UIKitSetter Id="FadeLine_IconButton_RightIcon" Value="ArrowRight" />
                <uikit:UIKitSetter Id="FadeLine_IconButtonStyle" Value="{StaticResource IconButtonStyle}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenu_Background" Value="{Res Background, Scope=UiKitTabMenuSecondaryGrey}" />
        <uikit:UIKitSetter Id="TabMenu_BorderBrush" Value="{Res BorderColor, Scope=UiKitTabMenuSecondaryGrey}" />
        <uikit:UIKitSetter Id="TabMenu_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="TabMenu_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="TabMenu_FadeLineStyle" Value="{StaticResource FadeLineStyle}" />
        <uikit:UIKitSetter Id="TabMenu_Padding" Value="2" />
        <uikit:UIKitSetter Id="TabMenu_ItemContainerStyle" Value="{StaticResource UiKitTabMenuItemSecondaryGrey}" />
    </Style>
    <!--  [UiKitTabMenuSecondaryWhite]  -->
    <Style x:Key="UiKitTabMenuSecondaryWhite"
           BasedOn="{StaticResource TabMenuUniversal}"
           TargetType="{x:Type visuals:TabMenu}">
        <Style.Resources>
            <Style x:Key="IconButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton24}"
                   TargetType="{x:Type visuals:IconButtonBase}">
                <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res ButtonForeground, Scope=UiKitTabMenuSecondaryWhite}" />
                <uikit:UIKitSetter Id="IconButton_Padding" Value="2" />
            </Style>
            <Style x:Key="FadeLineStyle"
                   BasedOn="{StaticResource FadeLineUniversal}"
                   TargetType="{x:Type visuals:FadeLine}">
                <uikit:UIKitSetter Id="FadeLine_IconButton_LeftIcon" Value="ArrowLeft" />
                <uikit:UIKitSetter Id="FadeLine_IconButton_RightIcon" Value="ArrowRight" />
                <uikit:UIKitSetter Id="FadeLine_IconButtonStyle" Value="{StaticResource IconButtonStyle}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TabMenu_Background" Value="{Res Background, Scope=UiKitTabMenuSecondaryWhite}" />
        <uikit:UIKitSetter Id="TabMenu_BorderBrush" Value="{Res BorderColor, Scope=UiKitTabMenuSecondaryWhite}" />
        <uikit:UIKitSetter Id="TabMenu_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="TabMenu_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="TabMenu_FadeLineStyle" Value="{StaticResource FadeLineStyle}" />
        <uikit:UIKitSetter Id="TabMenu_Padding" Value="2" />
        <uikit:UIKitSetter Id="TabMenu_ItemContainerStyle" Value="{StaticResource UiKitTabMenuItemSecondaryWhite}" />
    </Style>
    <!--#endregion-->
    <!--#region ChipsItems-->
    <!--  [UiKitChipsItemGrey]  -->
    <Style x:Key="UiKitChipsItemGrey"
           BasedOn="{StaticResource ChipsItemUniversal}"
           TargetType="{x:Type visuals:ChipsItem}">
        <Style.Resources>
            <Style x:Key="BadgeCounterStyle"
                   BasedOn="{StaticResource UiKitBadgeCounter}"
                   TargetType="{x:Type visuals:BadgeCounter}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="Normal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundNormal, Scope=UiKitChipsItemGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundNormal, Scope=UiKitChipsItemGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundDisabled, Scope=UiKitChipsItemGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundDisabled, Scope=UiKitChipsItemGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="Hover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundHover, Scope=UiKitChipsItemGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundHover, Scope=UiKitChipsItemGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="SelectedNormal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedNormal, Scope=UiKitChipsItemGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedNormal, Scope=UiKitChipsItemGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="SelectedHover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedHover, Scope=UiKitChipsItemGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedHover, Scope=UiKitChipsItemGrey}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="SelectedDisabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedDisabled, Scope=UiKitChipsItemGrey}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedDisabled, Scope=UiKitChipsItemGrey}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitChipsItemGrey}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitChipsItemGrey}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitChipsItemGrey}" />
            </Style>
            <Style x:Key="TextStyleSelectedDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedDisabled, Scope=UiKitChipsItemGrey}" />
            </Style>
            <Style x:Key="TextStyleSelectedHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedHover, Scope=UiKitChipsItemGrey}" />
            </Style>
            <Style x:Key="TextStyleSelectedNormal"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedNormal, Scope=UiKitChipsItemGrey}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ChipsItem_BadgeCounter_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="ChipsItem_BadgeCounter_Style" Value="{StaticResource BadgeCounterStyle}" />
        <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="ChipsItem_Container_CornerRadius" Value="16" />
        <uikit:UIKitSetter Id="ChipsItem_Container_Height" Value="32" />
        <uikit:UIKitSetter Id="ChipsItem_Container_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="ChipsItem_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitChipsItemGrey}"
                                     CornerRadius="16"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="ChipsItem_Icon_Margin" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleSelectedDisabled" Value="{StaticResource TextStyleSelectedDisabled}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleSelectedHover" Value="{StaticResource TextStyleSelectedHover}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleSelectedNormal" Value="{StaticResource TextStyleSelectedNormal}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundNormal, Scope=UiKitChipsItemGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundHover, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundHover, Scope=UiKitChipsItemGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundDisabled, Scope=UiKitChipsItemGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Fill" Value="{Res CloseIconForegroundSelectedNormal, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundSelectedNormal, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorSelectedNormal, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundSelectedNormal, Scope=UiKitChipsItemGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedHover">
                <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Fill" Value="{Res CloseIconForegroundSelectedHover, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundSelectedHover, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorSelectedHover, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundSelectedHover, Scope=UiKitChipsItemGrey}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Fill" Value="{Res CloseIconForegroundSelectedDisabled, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundSelectedDisabled, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorSelectedDisabled, Scope=UiKitChipsItemGrey}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundSelectedDisabled, Scope=UiKitChipsItemGrey}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitChipsItemWhite]  -->
    <Style x:Key="UiKitChipsItemWhite"
           BasedOn="{StaticResource ChipsItemUniversal}"
           TargetType="{x:Type visuals:ChipsItem}">
        <Style.Resources>
            <Style x:Key="BadgeCounterStyle"
                   BasedOn="{StaticResource UiKitBadgeCounter}"
                   TargetType="{x:Type visuals:BadgeCounter}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="Normal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundNormal, Scope=UiKitChipsItemWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundNormal, Scope=UiKitChipsItemWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundDisabled, Scope=UiKitChipsItemWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundDisabled, Scope=UiKitChipsItemWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="Hover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundHover, Scope=UiKitChipsItemWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundHover, Scope=UiKitChipsItemWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="SelectedNormal">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedNormal, Scope=UiKitChipsItemWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedNormal, Scope=UiKitChipsItemWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="SelectedHover">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedHover, Scope=UiKitChipsItemWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedHover, Scope=UiKitChipsItemWhite}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=(visuals:StateService.SelectableState), RelativeSource={RelativeSource AncestorType={x:Type visuals:ChipsItem}}}" Value="SelectedDisabled">
                        <uikit:UIKitSetter Id="BadgeCounter_Background" Value="{Res BadgeCounterBackgroundSelectedDisabled, Scope=UiKitChipsItemWhite}" />
                        <uikit:UIKitSetter Id="BadgeCounter_Foreground" Value="{Res BadgeCounterForegroundSelectedDisabled, Scope=UiKitChipsItemWhite}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitChipsItemWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitChipsItemWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitChipsItemWhite}" />
            </Style>
            <Style x:Key="TextStyleSelectedDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedDisabled, Scope=UiKitChipsItemWhite}" />
            </Style>
            <Style x:Key="TextStyleSelectedHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedHover, Scope=UiKitChipsItemWhite}" />
            </Style>
            <Style x:Key="TextStyleSelectedNormal"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSelectedNormal, Scope=UiKitChipsItemWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ChipsItem_BadgeCounter_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="ChipsItem_BadgeCounter_Style" Value="{StaticResource BadgeCounterStyle}" />
        <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="ChipsItem_Container_CornerRadius" Value="16" />
        <uikit:UIKitSetter Id="ChipsItem_Container_Height" Value="32" />
        <uikit:UIKitSetter Id="ChipsItem_Container_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="ChipsItem_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitChipsItemWhite}"
                                     CornerRadius="16"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="ChipsItem_Icon_Margin" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleSelectedDisabled" Value="{StaticResource TextStyleSelectedDisabled}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleSelectedHover" Value="{StaticResource TextStyleSelectedHover}" />
        <uikit:UIKitSetter Id="ChipsItem_TextStyleSelectedNormal" Value="{StaticResource TextStyleSelectedNormal}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundNormal, Scope=UiKitChipsItemWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundHover, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundHover, Scope=UiKitChipsItemWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundDisabled, Scope=UiKitChipsItemWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Fill" Value="{Res CloseIconForegroundSelectedNormal, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundSelectedNormal, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorSelectedNormal, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundSelectedNormal, Scope=UiKitChipsItemWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedHover">
                <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Fill" Value="{Res CloseIconForegroundSelectedHover, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundSelectedHover, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorSelectedHover, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundSelectedHover, Scope=UiKitChipsItemWhite}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="ChipsItem_CloseIcon_Fill" Value="{Res CloseIconForegroundSelectedDisabled, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_Background" Value="{Res BackgroundSelectedDisabled, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderBrush" Value="{Res BorderColorSelectedDisabled, Scope=UiKitChipsItemWhite}" />
                <uikit:UIKitSetter Id="ChipsItem_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ChipsItem_Icon_Fill" Value="{Res IconForegroundSelectedDisabled, Scope=UiKitChipsItemWhite}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ChipsControls-->
    <!--  [UiKitChipsControlGrey]  -->
    <Style x:Key="UiKitChipsControlGrey"
           BasedOn="{StaticResource ChipsControlUniversal}"
           TargetType="{x:Type visuals:ChipsControl}">
        <Style.Resources>
            <Style x:Key="IconButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton24}"
                   TargetType="{x:Type visuals:IconButtonBase}">
                <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res ButtonForeground, Scope=UiKitChipsControlGrey}" />
                <uikit:UIKitSetter Id="IconButton_Padding" Value="4" />
            </Style>
            <Style x:Key="FadeLineStyle"
                   BasedOn="{StaticResource FadeLineUniversal}"
                   TargetType="{x:Type visuals:FadeLine}">
                <uikit:UIKitSetter Id="FadeLine_IconButton_LeftIcon" Value="ArrowLeft" />
                <uikit:UIKitSetter Id="FadeLine_IconButton_RightIcon" Value="ArrowRight" />
                <uikit:UIKitSetter Id="FadeLine_IconButtonStyle" Value="{StaticResource IconButtonStyle}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ChipsControl_FadeLineStyle" Value="{StaticResource FadeLineStyle}" />
        <uikit:UIKitSetter Id="ChipsControl_ItemContainerStyle" Value="{StaticResource UiKitChipsItemGrey}" />
    </Style>
    <!--  [UiKitChipsControlWhite]  -->
    <Style x:Key="UiKitChipsControlWhite"
           BasedOn="{StaticResource ChipsControlUniversal}"
           TargetType="{x:Type visuals:ChipsControl}">
        <Style.Resources>
            <Style x:Key="IconButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton24}"
                   TargetType="{x:Type visuals:IconButtonBase}">
                <uikit:UIKitSetter Id="IconButton_Icon_Foreground" Value="{Res ButtonForeground, Scope=UiKitChipsControlWhite}" />
                <uikit:UIKitSetter Id="IconButton_Padding" Value="4" />
            </Style>
            <Style x:Key="FadeLineStyle"
                   BasedOn="{StaticResource FadeLineUniversal}"
                   TargetType="{x:Type visuals:FadeLine}">
                <uikit:UIKitSetter Id="FadeLine_IconButton_LeftIcon" Value="ArrowLeft" />
                <uikit:UIKitSetter Id="FadeLine_IconButton_RightIcon" Value="ArrowRight" />
                <uikit:UIKitSetter Id="FadeLine_IconButtonStyle" Value="{StaticResource IconButtonStyle}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ChipsControl_FadeLineStyle" Value="{StaticResource FadeLineStyle}" />
        <uikit:UIKitSetter Id="ChipsControl_ItemContainerStyle" Value="{StaticResource UiKitChipsItemWhite}" />
    </Style>
    <!--#endregion-->
    <!--#region Popups-->
    <!--  [UiKitPopupDanger]  -->
    <Style x:Key="UiKitPopupDanger"
           BasedOn="{StaticResource PopupUniversal}"
           TargetType="{x:Type visuals:Popup}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitPopupDanger}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitPopupDanger}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Popup_Background" Value="{Res Background, Scope=UiKitPopupDanger}" />
        <uikit:UIKitSetter Id="Popup_BorderBrush" Value="{Res BorderColor, Scope=UiKitPopupDanger}" />
        <uikit:UIKitSetter Id="Popup_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Popup_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="Popup_Header_Margin" Value="0,0,0,2" />
        <uikit:UIKitSetter Id="Popup_HeaderStyle" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="Popup_MinHeight" Value="28" />
        <uikit:UIKitSetter Id="Popup_Offset" Value="4" />
        <uikit:UIKitSetter Id="Popup_Padding" Value="8,6" />
        <uikit:UIKitSetter Id="Popup_Shadow" Value="{Res Shadow, Scope=UiKitPopupDanger}" />
        <uikit:UIKitSetter Id="Popup_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="PopupPosition" Value="Bottom">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupDanger_PopupArrowIconTop.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <Trigger Property="PopupPosition" Value="Left">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupDanger_PopupArrowIconRight.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <Trigger Property="PopupPosition" Value="Right">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupDanger_PopupArrowIconLeft.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <Trigger Property="PopupPosition" Value="Top">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupDanger_PopupArrowIconBottom.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitPopupStandard]  -->
    <Style x:Key="UiKitPopupStandard"
           BasedOn="{StaticResource PopupUniversal}"
           TargetType="{x:Type visuals:Popup}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitPopupStandard}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitPopupStandard}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Popup_Background" Value="{Res Background, Scope=UiKitPopupStandard}" />
        <uikit:UIKitSetter Id="Popup_BorderBrush" Value="{Res BorderColor, Scope=UiKitPopupStandard}" />
        <uikit:UIKitSetter Id="Popup_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Popup_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="Popup_Header_Margin" Value="0,0,0,2" />
        <uikit:UIKitSetter Id="Popup_HeaderStyle" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="Popup_MinHeight" Value="28" />
        <uikit:UIKitSetter Id="Popup_Offset" Value="4" />
        <uikit:UIKitSetter Id="Popup_Padding" Value="8,6" />
        <uikit:UIKitSetter Id="Popup_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="PopupPosition" Value="Bottom">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupStandard_PopupArrowIconTop.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <Trigger Property="PopupPosition" Value="Left">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupStandard_PopupArrowIconRight.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <Trigger Property="PopupPosition" Value="Right">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupStandard_PopupArrowIconLeft.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <Trigger Property="PopupPosition" Value="Top">
                <uikit:UIKitSetter Id="Popup_ArrowIcon" Value="{Img UiKitPopupStandard_PopupArrowIconBottom.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region CarouselItems-->
    <!--  [UiKitCarouselItemInvert]  -->
    <Style x:Key="UiKitCarouselItemInvert"
           BasedOn="{StaticResource CarouselItemUniversal}"
           TargetType="{x:Type visuals:CarouselItem}">
        <uikit:UIKitSetter Id="CarouselItem_CornerRadius" Value="4" />
        <uikit:UIKitSetter Id="CarouselItem_Height" Value="8" />
        <uikit:UIKitSetter Id="CarouselItem_Width" Value="8" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundNormal, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundHover, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundDisabled, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundSelected, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorSelected, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="CarouselItem_Height" Value="8" />
                <uikit:UIKitSetter Id="CarouselItem_Width" Value="16" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundDisabled, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitCarouselItemInvert}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="CarouselItem_Height" Value="8" />
                <uikit:UIKitSetter Id="CarouselItem_Width" Value="16" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitCarouselInvert]  -->
    <Style x:Key="UiKitCarouselInvert"
           BasedOn="{StaticResource CarouselUniversal}"
           TargetType="{x:Type visuals:Carousel}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource UiKitCarouselItemInvert}" />
    </Style>
    <!--  [UiKitCarouselItemNormal]  -->
    <Style x:Key="UiKitCarouselItemNormal"
           BasedOn="{StaticResource CarouselItemUniversal}"
           TargetType="{x:Type visuals:CarouselItem}">
        <uikit:UIKitSetter Id="CarouselItem_CornerRadius" Value="4" />
        <uikit:UIKitSetter Id="CarouselItem_Height" Value="8" />
        <uikit:UIKitSetter Id="CarouselItem_Width" Value="8" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.SelectableState" Value="Normal">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundNormal, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundHover, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundDisabled, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundSelected, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorSelected, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="CarouselItem_Height" Value="8" />
                <uikit:UIKitSetter Id="CarouselItem_Width" Value="16" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedDisabled">
                <uikit:UIKitSetter Id="CarouselItem_Background" Value="{Res BackgroundDisabled, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitCarouselItemNormal}" />
                <uikit:UIKitSetter Id="CarouselItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="CarouselItem_Height" Value="8" />
                <uikit:UIKitSetter Id="CarouselItem_Width" Value="16" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitCarouselNormal]  -->
    <Style x:Key="UiKitCarouselNormal"
           BasedOn="{StaticResource CarouselUniversal}"
           TargetType="{x:Type visuals:Carousel}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource UiKitCarouselItemNormal}" />
    </Style>
    <!--#endregion-->
    <!--#region ImageGalleryButtons-->
    <!--  [UiKitImageGalleryButton]  -->
    <Style x:Key="UiKitImageGalleryButton"
           BasedOn="{StaticResource ImageGalleryButtonUniversal}"
           TargetType="{x:Type visuals:ImageGalleryButton}">
        <uikit:UIKitSetter Id="ImageGalleryButton_Background" Value="{Res BackgroundNormal, Scope=UiKitImageGalleryButton}" />
        <uikit:UIKitSetter Id="ImageGalleryButton_BorderBrush" Value="{Res BorderNormal, Scope=UiKitImageGalleryButton}" />
        <uikit:UIKitSetter Id="ImageGalleryButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="ImageGalleryButton_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="ImageGalleryButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitImageGalleryButton}"
                                     CornerRadius="8"
                                     Margin="-2"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="ImageGalleryButton_Height" Value="32" />
        <uikit:UIKitSetter Id="ImageGalleryButton_Icon_Foreground" Value="{Res IconForegroundNormal, Scope=UiKitImageGalleryButton}" />
        <uikit:UIKitSetter Id="ImageGalleryButton_Width" Value="32" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="ImageGalleryButton_Background" Value="{Res BackgroundDisabled, Scope=UiKitImageGalleryButton}" />
                <uikit:UIKitSetter Id="ImageGalleryButton_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitImageGalleryButton}" />
                <uikit:UIKitSetter Id="ImageGalleryButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ImageGalleryButton_Icon_Foreground" Value="{Res IconForegroundDisabled, Scope=UiKitImageGalleryButton}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="ImageGalleryButton_Background" Value="{Res BackgroundHover, Scope=UiKitImageGalleryButton}" />
                <uikit:UIKitSetter Id="ImageGalleryButton_BorderBrush" Value="{Res BorderHover, Scope=UiKitImageGalleryButton}" />
                <uikit:UIKitSetter Id="ImageGalleryButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ImageGalleryButton_Icon_Foreground" Value="{Res IconForegroundHover, Scope=UiKitImageGalleryButton}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="ImageGalleryButton_Background" Value="{Res BackgroundPressed, Scope=UiKitImageGalleryButton}" />
                <uikit:UIKitSetter Id="ImageGalleryButton_BorderBrush" Value="{Res BorderPressed, Scope=UiKitImageGalleryButton}" />
                <uikit:UIKitSetter Id="ImageGalleryButton_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ImageGalleryButton_Icon_Foreground" Value="{Res IconForegroundPressed, Scope=UiKitImageGalleryButton}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ImageGalleries-->
    <!--  [UiKitImageGallery]  -->
    <Style x:Key="UiKitImageGallery"
           BasedOn="{StaticResource ImageGalleryUniversal}"
           TargetType="{x:Type visuals:ImageGallery}">
        <Style.Resources>
            <Style x:Key="CarouselStyle"
                   BasedOn="{StaticResource UiKitCarouselNormal}"
                   TargetType="{x:Type visuals:Carousel}" />
            <Style x:Key="CounterTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CounterTextForeground, Scope=UiKitImageGallery}" />
            </Style>
            <Style x:Key="CloseButtonStyle"
                   BasedOn="{StaticResource UiKitImageGalleryButton}"
                   TargetType="{x:Type visuals:ImageGalleryButton}">
                <Setter Property="Icon" Value="Clear" />
            </Style>
            <Style x:Key="LeftButtonStyle"
                   BasedOn="{StaticResource UiKitImageGalleryButton}"
                   TargetType="{x:Type visuals:ImageGalleryButton}">
                <Setter Property="Icon" Value="ArrowLeft" />
            </Style>
            <Style x:Key="RightButtonStyle"
                   BasedOn="{StaticResource UiKitImageGalleryButton}"
                   TargetType="{x:Type visuals:ImageGalleryButton}">
                <Setter Property="Icon" Value="ArrowRight" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ImageGallery_CarouselContainer_Background" Value="{Res CarouselContainerBackground, Scope=UiKitImageGallery}" />
        <uikit:UIKitSetter Id="ImageGallery_CarouselContainer_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="ImageGallery_CarouselContainer_Margin" Value="0,0,0,16" />
        <uikit:UIKitSetter Id="ImageGallery_CarouselContainer_Padding" Value="8,4" />
        <uikit:UIKitSetter Id="ImageGallery_CarouselStyle" Value="{StaticResource CarouselStyle}" />
        <uikit:UIKitSetter Id="ImageGallery_CloseButton_Margin" Value="0,8,8,0" />
        <uikit:UIKitSetter Id="ImageGallery_CloseButtonStyle" Value="{StaticResource CloseButtonStyle}" />
        <uikit:UIKitSetter Id="ImageGallery_CounterContainer_Background" Value="{Res CounterContainerBackground, Scope=UiKitImageGallery}" />
        <uikit:UIKitSetter Id="ImageGallery_CounterContainer_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="ImageGallery_CounterContainer_Margin" Value="0,0,0,16" />
        <uikit:UIKitSetter Id="ImageGallery_CounterContainer_Padding" Value="8,4" />
        <uikit:UIKitSetter Id="ImageGallery_CounterTextStyle" Value="{StaticResource CounterTextStyle}" />
        <uikit:UIKitSetter Id="ImageGallery_LeftButton_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="ImageGallery_LeftButtonStyle" Value="{StaticResource LeftButtonStyle}" />
        <uikit:UIKitSetter Id="ImageGallery_RightButton_Margin" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="ImageGallery_RightButtonStyle" Value="{StaticResource RightButtonStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region ImageGalleryListButtons-->
    <!--  [UiKitImageGalleryListButton]  -->
    <Style x:Key="UiKitImageGalleryListButton"
           BasedOn="{StaticResource ImageGalleryListButtonUniversal}"
           TargetType="{x:Type visuals:ImageGalleryListButton}">
        <uikit:UIKitSetter Id="ImageGalleryListButton_Background" Value="{Res BackgroundNormal, Scope=UiKitImageGalleryListButton}" />
        <uikit:UIKitSetter Id="ImageGalleryListButton_BorderBrush" Value="{Res BorderNormal, Scope=UiKitImageGalleryListButton}" />
        <uikit:UIKitSetter Id="ImageGalleryListButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="ImageGalleryListButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitImageGalleryListButton}"
                                     CornerRadius="8"
                                     Margin="2"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="ImageGalleryListButton_Background" Value="{Res BackgroundHover, Scope=UiKitImageGalleryListButton}" />
                <uikit:UIKitSetter Id="ImageGalleryListButton_BorderBrush" Value="{Res BorderHover, Scope=UiKitImageGalleryListButton}" />
                <uikit:UIKitSetter Id="ImageGalleryListButton_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="ImageGalleryListButton_Background" Value="{Res BackgroundPressed, Scope=UiKitImageGalleryListButton}" />
                <uikit:UIKitSetter Id="ImageGalleryListButton_BorderBrush" Value="{Res BorderPressed, Scope=UiKitImageGalleryListButton}" />
                <uikit:UIKitSetter Id="ImageGalleryListButton_BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ImageGalleryLists-->
    <!--  [UiKitImageGalleryList]  -->
    <Style x:Key="UiKitImageGalleryList"
           BasedOn="{StaticResource ImageGalleryListUniversal}"
           TargetType="{x:Type visuals:ImageGalleryList}">
        <Style.Resources>
            <Style x:Key="ImageButtonStyle"
                   BasedOn="{StaticResource UiKitImageGalleryListButton}"
                   TargetType="{x:Type visuals:ImageGalleryListButton}" />
            <Style x:Key="LeftButtonStyle"
                   BasedOn="{StaticResource UiKitImageGalleryButton}"
                   TargetType="{x:Type visuals:ImageGalleryButton}">
                <Setter Property="Icon" Value="ArrowLeft" />
            </Style>
            <Style x:Key="RightButtonStyle"
                   BasedOn="{StaticResource UiKitImageGalleryButton}"
                   TargetType="{x:Type visuals:ImageGalleryButton}">
                <Setter Property="Icon" Value="ArrowRight" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ImageGalleryList_ImageButtonStyle" Value="{StaticResource ImageButtonStyle}" />
        <uikit:UIKitSetter Id="ImageGalleryList_ImageGap" Value="12" />
        <uikit:UIKitSetter Id="ImageGalleryList_LeftButton_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="ImageGalleryList_LeftButtonStyle" Value="{StaticResource LeftButtonStyle}" />
        <uikit:UIKitSetter Id="ImageGalleryList_RightButton_Margin" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="ImageGalleryList_RightButtonStyle" Value="{StaticResource RightButtonStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region DateTimePopupFooterButtons-->
    <!--  [UiKitDateTimePopupFooterButton]  -->
    <Style x:Key="UiKitDateTimePopupFooterButton"
           BasedOn="{StaticResource DateTimePopupFooterButtonUniversal}"
           TargetType="{x:Type visuals:DateTimePopupFooterButton}">
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_Background" Value="{Res BackgroundNormal, Scope=UiKitDateTimePopupFooterButton}" />
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitDateTimePopupFooterButton}" />
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitDateTimePopupFooterButton}"
                                     CornerRadius="10"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_Height" Value="40" />
        <uikit:UIKitSetter Id="DateTimePopupFooterButton_IconBrush" Value="{Res IconBrush, Scope=UiKitDateTimePopupFooterButton}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="DateTimePopupFooterButton_Background" Value="{Res BackgroundHover, Scope=UiKitDateTimePopupFooterButton}" />
                <uikit:UIKitSetter Id="DateTimePopupFooterButton_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitDateTimePopupFooterButton}" />
                <uikit:UIKitSetter Id="DateTimePopupFooterButton_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="DateTimePopupFooterButton_Background" Value="{Res BackgroundPressed, Scope=UiKitDateTimePopupFooterButton}" />
                <uikit:UIKitSetter Id="DateTimePopupFooterButton_BorderBrush" Value="{Res BorderColorPressed, Scope=UiKitDateTimePopupFooterButton}" />
                <uikit:UIKitSetter Id="DateTimePopupFooterButton_BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region DateTimePopupItemButtons-->
    <!--  [UiKitDateTimePopupItemButton]  -->
    <Style x:Key="UiKitDateTimePopupItemButton"
           BasedOn="{StaticResource DateTimePopupItemButtonUniversal}"
           TargetType="{x:Type visuals:DateTimePopupItemButton}">
        <uikit:UIKitSetter Id="DateTimePopupItemButton_Background" Value="{Res BackgroundNormal, Scope=UiKitDateTimePopupItemButton}" />
        <uikit:UIKitSetter Id="DateTimePopupItemButton_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitDateTimePopupItemButton}" />
        <uikit:UIKitSetter Id="DateTimePopupItemButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="DateTimePopupItemButton_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="DateTimePopupItemButton_Margin" Value="4,0" />
        <uikit:UIKitSetter Id="DateTimePopupItemButton_Padding" Value="8,4" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="DateTimePopupItemButton_Background" Value="{Res BackgroundHover, Scope=UiKitDateTimePopupItemButton}" />
                <uikit:UIKitSetter Id="DateTimePopupItemButton_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitDateTimePopupItemButton}" />
                <uikit:UIKitSetter Id="DateTimePopupItemButton_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="DateTimePopupItemButton_Background" Value="{Res BackgroundPressed, Scope=UiKitDateTimePopupItemButton}" />
                <uikit:UIKitSetter Id="DateTimePopupItemButton_BorderBrush" Value="{Res BorderColorPressed, Scope=UiKitDateTimePopupItemButton}" />
                <uikit:UIKitSetter Id="DateTimePopupItemButton_BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region DateTimePopupPresenters-->
    <!--  [UiKitDateTimePopupPresenter]  -->
    <Style x:Key="UiKitDateTimePopupPresenter"
           BasedOn="{StaticResource DateTimePopupPresenterUniversal}"
           TargetType="{x:Type visuals:DateTimePopupPresenter}">
        <Style.Resources>
            <Style x:Key="ItemButtonTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ItemButtonTextForeground, Scope=UiKitDateTimePopupPresenter}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="DateTimePopupPresenter_FooterButton_Cancel_IconName" Value="Clear" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_FooterButton_Cancel_Margin" Value="2,4,4,4" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_FooterButton_Confirm_IconName" Value="Check" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_FooterButton_Confirm_Margin" Value="4,4,2,4" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_FooterButtonStyle" Value="{StaticResource UiKitDateTimePopupFooterButton}" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectionMarker_Background" Value="{Res MarkerBackground, Scope=UiKitDateTimePopupPresenter}" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectionMarker_BorderBrush" Value="{Res MarkerBorderColor, Scope=UiKitDateTimePopupPresenter}" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectionMarker_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectionMarker_CornerRadius" Value="4" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectionMarker_Height" Value="32" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectionMarker_Margin" Value="4,0" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectorItem_ButtonStyle" Value="{StaticResource UiKitDateTimePopupItemButton}" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectorItem_Height" Value="32" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectorItem_Padding" Value="12,6" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectorItem_TextStyle" Value="{StaticResource ItemButtonTextStyle}" />
        <uikit:UIKitSetter Id="DateTimePopupPresenter_SelectorItem_Width" Value="98" />
    </Style>
    <!--#endregion-->
    <!--#region DateTimeInputs-->
    <!--  [UiKitDateTimeInput]  -->
    <Style x:Key="UiKitDateTimeInput"
           BasedOn="{StaticResource DateTimeInputUniversal}"
           TargetType="{x:Type visuals:DateTimeInput}">
        <Style.Resources>
            <Style x:Key="PopupDecoratorStyle"
                   BasedOn="{StaticResource PopupDecoratorUniversal}"
                   TargetType="{x:Type visuals:DateTimePopupDecorator}">
                <uikit:UIKitSetter Id="PopupDecorator_Background" Value="{Res PopupDecoratorBackground, Scope=UiKitDateTimeInput}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderBrush" Value="{Res PopupDecoratorBorderColor, Scope=UiKitDateTimeInput}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="PopupDecorator_CornerRadius" Value="5" />
                <uikit:UIKitSetter Id="PopupDecorator_Padding" Value="0" />
                <uikit:UIKitSetter Id="PopupDecorator_Shadow" Value="{Res PopupDecoratorShadow, Scope=UiKitDateTimeInput}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="DateTimeInput_ActionDate_IconName" Value="Calendar" />
        <uikit:UIKitSetter Id="DateTimeInput_ActionTime_IconName" Value="RingClock" />
        <uikit:UIKitSetter Id="DateTimeInput_PopupDecoratorStyle" Value="{StaticResource PopupDecoratorStyle}" />
        <uikit:UIKitSetter Id="DateTimeInput_PopupPresenterStyle" Value="{StaticResource UiKitDateTimePopupPresenter}" />
    </Style>
    <!--#endregion-->
    <!--#region SelectItems-->
    <!--  [UiKitSelectItem]  -->
    <Style x:Key="UiKitSelectItem"
           BasedOn="{StaticResource SelectItemUniversal}"
           TargetType="{x:Type visuals:SelectItem}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitSelectItem}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SelectItem_Icon_Foreground" Value="{Res IconForeground, Scope=UiKitSelectItem}" />
        <uikit:UIKitSetter Id="SelectItem_Icon_Margin" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="SelectItem_Padding" Value="12,8" />
        <uikit:UIKitSetter Id="SelectItem_SelectionBackground" Value="{Res SelectionBackground, Scope=UiKitSelectItem}" />
        <uikit:UIKitSetter Id="SelectItem_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="SelectItem_StateBackground" Value="{Res BackgroundHover, Scope=UiKitSelectItem}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Normal">
                <uikit:UIKitSetter Id="SelectItem_StateBackground" Value="{Res BackgroundNormal, Scope=UiKitSelectItem}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="SelectItem_StateBackground" Value="{Res BackgroundPressed, Scope=UiKitSelectItem}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region SelectPresenters-->
    <!--  [UiKitSelectPresenter]  -->
    <Style x:Key="UiKitSelectPresenter"
           BasedOn="{StaticResource SelectPresenterUniversal}"
           TargetType="{x:Type visuals:SelectPresenter}">
        <Style.Resources>
            <Style x:Key="TextInputStyle"
                   TargetType="{x:Type visuals:TextInput}">
                <uikit:UIKitSetter Id="SelectPresenter_TextInput_CaretBrush" Value="{Res CaretBrush, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_TextInput_Placeholder_Foreground" Value="{Res PlaceholderForeground, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_TextInput_Placeholder_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
                <uikit:UIKitSetter Id="SelectPresenter_TextInput_Foreground" Value="{Res TextForeground, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_TextInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SelectPresenter_ArrowIcon_Foreground" Value="{Res ArrowIconForeground, Scope=UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="SelectPresenter_ArrowIcon_Margin" Value="4,0,0,0" />
        <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundNormal, Scope=UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="SelectPresenter_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="SelectPresenter_Height" Value="32" />
        <uikit:UIKitSetter Id="SelectPresenter_ItemHeader_Foreground" Value="{Res TextForeground, Scope=UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="SelectPresenter_ItemHeader_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
        <uikit:UIKitSetter Id="SelectPresenter_ItemIcon_Foreground" Value="{Res IconForeground, Scope=UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="SelectPresenter_ItemIcon_Margin" Value="0,0,4,0" />
        <uikit:UIKitSetter Id="SelectPresenter_Padding" Value="12,6" />
        <uikit:UIKitSetter Id="SelectPresenter_Placeholder_Foreground" Value="{Res PlaceholderForeground, Scope=UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="SelectPresenter_Placeholder_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
        <uikit:UIKitSetter Id="SelectPresenter_TextInputStyle" Value="{StaticResource TextInputStyle}" />
        <Style.Triggers>
            <Trigger Property="IsActive" Value="True">
                <uikit:UIKitSetter Id="SelectPresenter_ArrowIcon_Name" Value="ArrowUp" />
            </Trigger>
            <Trigger Property="IsActive" Value="False">
                <uikit:UIKitSetter Id="SelectPresenter_ArrowIcon_Name" Value="ArrowDown" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundDisabled, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="SelectPresenter_ArrowIcon_Foreground" Value="{Res ArrowIconForegroundDisabled, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_ItemHeader_Foreground" Value="{Res TextForegroundDisabled, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_ItemIcon_Foreground" Value="{Res IconForegroundDisabled, Scope=UiKitSelectPresenter}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Hover">
                <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundHover, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Focus">
                <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundFocus, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorFocus, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidNormal">
                <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorInvalidNormal, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidHover">
                <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorInvalidHover, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidFocus">
                <uikit:UIKitSetter Id="SelectPresenter_Background" Value="{Res BackgroundInvalidFocus, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderBrush" Value="{Res BorderColorInvalidFocus, Scope=UiKitSelectPresenter}" />
                <uikit:UIKitSetter Id="SelectPresenter_BorderThickness" Value="2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Selects-->
    <!--  [UiKitSelect]  -->
    <Style x:Key="UiKitSelect"
           BasedOn="{StaticResource SelectUniversal}"
           TargetType="{x:Type visuals:Select}">
        <Style.Resources>
            <Style x:Key="CaptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CaptionForeground, Scope=UiKitSelect}" />
            </Style>
            <Style x:Key="LabelStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res LabelForeground, Scope=UiKitSelect}" />
            </Style>
            <Style x:Key="PopupDecoratorStyle"
                   BasedOn="{StaticResource PopupDecoratorUniversal}"
                   TargetType="{x:Type visuals:SelectPopupDecorator}">
                <uikit:UIKitSetter Id="PopupDecorator_Background" Value="{Res PopupDecoratorBackground, Scope=UiKitSelect}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderBrush" Value="{Res PopupDecoratorBorderColor, Scope=UiKitSelect}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="PopupDecorator_CornerRadius" Value="5" />
                <uikit:UIKitSetter Id="PopupDecorator_Padding" Value="0,6" />
                <uikit:UIKitSetter Id="PopupDecorator_Shadow" Value="{Res PopupDecoratorShadow, Scope=UiKitSelect}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Select_Caption_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="Select_CaptionStyle" Value="{StaticResource CaptionStyle}" />
        <uikit:UIKitSetter Id="Select_ItemContainerStyle" Value="{StaticResource UiKitSelectItem}" />
        <uikit:UIKitSetter Id="Select_Label_Margin" Value="0,0,0,6" />
        <uikit:UIKitSetter Id="Select_LabelStyle" Value="{StaticResource LabelStyle}" />
        <uikit:UIKitSetter Id="Select_PopupDecoratorStyle" Value="{StaticResource PopupDecoratorStyle}" />
        <uikit:UIKitSetter Id="Select_SelectPresenterStyle" Value="{StaticResource UiKitSelectPresenter}" />
        <uikit:UIKitSetter Id="Select_ValidationPopupStyle" Value="{StaticResource UiKitPopupDanger}" />
    </Style>
    <!--#endregion-->
    <!--#region InteractivityOverlays-->
    <!--  [UiKitInteractivityOverlayModal]  -->
    <Style x:Key="UiKitInteractivityOverlayModal"
           BasedOn="{StaticResource InteractivityOverlayUniversal}"
           TargetType="{x:Type visuals:InteractivityOverlay}">
        <uikit:UIKitSetter Id="InteractivityOverlay_Background" Value="{Res Background, Scope=UiKitInteractivityOverlayModal}" />
    </Style>
    <!--  [UiKitInteractivityOverlayPromo]  -->
    <Style x:Key="UiKitInteractivityOverlayPromo"
           BasedOn="{StaticResource InteractivityOverlayUniversal}"
           TargetType="{x:Type visuals:InteractivityOverlay}">
        <uikit:UIKitSetter Id="InteractivityOverlay_Background" Value="{Res Background, Scope=UiKitInteractivityOverlayPromo}" />
    </Style>
    <!--#endregion-->
    <!--#region InteractivityDialogs-->
    <!--  [UiKitInteractivityDialog]  -->
    <Style x:Key="UiKitInteractivityDialog"
           BasedOn="{StaticResource InteractivityDialogUniversal}"
           TargetType="{x:Type visuals:InteractivityDialog}">
        <Style.Resources>
            <Style x:Key="ButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton16}"
                   TargetType="{x:Type visuals:IconButton}">
                <Setter Property="IconForeground" Value="{Res ButtonForeground, Scope=UiKitInteractivityDialog}" />
            </Style>
            <Style x:Key="FooterStyle"
                   BasedOn="{StaticResource InteractivityDialogFooterUniversal}"
                   TargetType="{x:Type visuals:InteractivityDialogFooter}">
                <uikit:UIKitSetter Id="InteractivityDialogFooter_ButtonMargin" Value="16,0,0,0" />
                <uikit:UIKitSetter Id="InteractivityDialogFooter_PrimaryButtonStyle" Value="{StaticResource UiKitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="InteractivityDialogFooter_ReferenceButtonStyle" Value="{StaticResource UiKitButtonBaseGhost}" />
                <uikit:UIKitSetter Id="InteractivityDialogFooter_SecondaryButtonStyle" Value="{StaticResource UiKitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleHeader3}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res HeaderForeground, Scope=UiKitInteractivityDialog}" />
            </Style>
            <Style x:Key="SubHeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseTextSemibold}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res SubHeaderForeground, Scope=UiKitInteractivityDialog}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitInteractivityDialog}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="InteractivityDialog_Background" Value="{Res Background, Scope=UiKitInteractivityDialog}" />
        <uikit:UIKitSetter Id="InteractivityDialog_BorderBrush" Value="{Res BorderColor, Scope=UiKitInteractivityDialog}" />
        <uikit:UIKitSetter Id="InteractivityDialog_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="InteractivityDialog_Button_CloseIcon" Value="Clear" />
        <uikit:UIKitSetter Id="InteractivityDialog_Button_HelpIcon" Value="StatusQuestion" />
        <uikit:UIKitSetter Id="InteractivityDialog_Button_Margin" Value="12,0,0,0" />
        <uikit:UIKitSetter Id="InteractivityDialog_Button_Style" Value="{StaticResource ButtonStyle}" />
        <uikit:UIKitSetter Id="InteractivityDialog_ButtonsContainer_Margin" Value="12" />
        <uikit:UIKitSetter Id="InteractivityDialog_ContentContainer_Margin" Value="32,0,32,16" />
        <uikit:UIKitSetter Id="InteractivityDialog_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="InteractivityDialog_DescriptionStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="InteractivityDialog_Description_Margin" Value="0,4,0,0" />
        <uikit:UIKitSetter Id="InteractivityDialog_FooterContainer_Margin" Value="32,0,32,32" />
        <uikit:UIKitSetter Id="InteractivityDialog_FooterStyle" Value="{StaticResource FooterStyle}" />
        <uikit:UIKitSetter Id="InteractivityDialog_HeaderContainer_Margin" Value="32,32,32,24" />
        <uikit:UIKitSetter Id="InteractivityDialog_Header_Margin" Value="0" />
        <uikit:UIKitSetter Id="InteractivityDialog_HeaderStyle" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="InteractivityDialog_Icon_Height" Value="48" />
        <uikit:UIKitSetter Id="InteractivityDialog_Icon_Margin" Value="0,0,20,0" />
        <uikit:UIKitSetter Id="InteractivityDialog_Icon_Width" Value="48" />
        <uikit:UIKitSetter Id="InteractivityDialog_InteractivityOverlayStyle" Value="{StaticResource UiKitInteractivityOverlayModal}" />
        <uikit:UIKitSetter Id="InteractivityDialog_Spinner_Style" Value="{StaticResource UiKitSpinner24}" />
        <uikit:UIKitSetter Id="InteractivityDialog_Status_Background_Height" Value="48" />
        <uikit:UIKitSetter Id="InteractivityDialog_Status_Background_Width" Value="48" />
        <uikit:UIKitSetter Id="InteractivityDialog_SubHeader_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="InteractivityDialog_SubHeaderStyle" Value="{StaticResource SubHeaderStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Background" Value="{Res StatusBackgroundDanger, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Foreground" Value="{Res StatusForegroundDanger, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_IconName" Value="StatusDangerSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Background" Value="{Res StatusBackgroundInfo, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Foreground" Value="{Res StatusForegroundInfo, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_IconName" Value="StatusInfoSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Loading">
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Background" Value="{Res StatusBackgroundLoading, Scope=UiKitInteractivityDialog}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Background" Value="{Res StatusBackgroundPositive, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Foreground" Value="{Res StatusForegroundPositive, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_IconName" Value="StatusPositiveSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Background" Value="{Res StatusBackgroundWarning, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_Foreground" Value="{Res StatusForegroundWarning, Scope=UiKitInteractivityDialog}" />
                <uikit:UIKitSetter Id="InteractivityDialog_Status_IconName" Value="StatusWarningSolid" />
            </Trigger>
            <Trigger Property="DialogSize" Value="Standard">
                <uikit:UIKitSetter Id="InteractivityDialog_Width" Value="550" />
            </Trigger>
            <Trigger Property="DialogSize" Value="Medium">
                <uikit:UIKitSetter Id="InteractivityDialog_Width" Value="650" />
            </Trigger>
            <Trigger Property="DialogSize" Value="Wide">
                <uikit:UIKitSetter Id="InteractivityDialog_Width" Value="800" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region InteractivityNotifications-->
    <!--  [UiKitInteractivityNotification]  -->
    <Style x:Key="UiKitInteractivityNotification"
           BasedOn="{StaticResource InteractivityNotificationUniversal}"
           TargetType="{x:Type visuals:InteractivityNotification}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitInteractivityNotification}" />
            </Style>
            <Style x:Key="CloseButtonStyle"
                   BasedOn="{StaticResource UiKitIconButton16}"
                   TargetType="{x:Type visuals:IconButton}">
                <Setter Property="Icon" Value="Clear" />
                <Setter Property="IconForeground" Value="{Res CloseButtonForeground, Scope=UiKitInteractivityNotification}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="InteractivityNotification_ActionButton_ButtonStyle" Value="{StaticResource UiKitButtonStaticWhiteOutlineSecondary}" />
        <uikit:UIKitSetter Id="InteractivityNotification_ActionButton_Margin" Value="8" />
        <uikit:UIKitSetter Id="InteractivityNotification_ActionButton_MaxWidth" Value="180" />
        <uikit:UIKitSetter Id="InteractivityNotification_Background" Value="{Res Background, Scope=UiKitInteractivityNotification}" />
        <uikit:UIKitSetter Id="InteractivityNotification_BorderBrush" Value="{Res BorderColor, Scope=UiKitInteractivityNotification}" />
        <uikit:UIKitSetter Id="InteractivityNotification_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="InteractivityNotification_CloseButtton_Margin" Value="0,12" />
        <uikit:UIKitSetter Id="InteractivityNotification_CloseButttonStyle" Value="{StaticResource CloseButtonStyle}" />
        <uikit:UIKitSetter Id="InteractivityNotification_Content_Margin" Value="8,12" />
        <uikit:UIKitSetter Id="InteractivityNotification_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="InteractivityNotification_Icon_Foreground" Value="{Res IconForeground, Scope=UiKitInteractivityNotification}" />
        <uikit:UIKitSetter Id="InteractivityNotification_Icon_Margin" Value="0,0,12,0" />
        <uikit:UIKitSetter Id="InteractivityNotification_Margin" Value="0,0,0,24" />
        <uikit:UIKitSetter Id="InteractivityNotification_Padding" Value="8,0" />
        <uikit:UIKitSetter Id="InteractivityNotification_Shadow" Value="{Res Shadow, Scope=UiKitInteractivityNotification}" />
        <uikit:UIKitSetter Id="InteractivityNotification_Text_Margin" Value="0,2" />
        <uikit:UIKitSetter Id="InteractivityNotification_Text_MaxWidth" Value="412" />
        <uikit:UIKitSetter Id="InteractivityNotification_Text_MaxHeight" Value="62" />
        <uikit:UIKitSetter Id="InteractivityNotification_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="InteractivityNotification_Status_Foreground" Value="{Res StatusForegroundDanger, Scope=UiKitInteractivityNotification}" />
                <uikit:UIKitSetter Id="InteractivityNotification_Status_IconName" Value="StatusDangerSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="InteractivityNotification_Status_Foreground" Value="{Res StatusForegroundInfo, Scope=UiKitInteractivityNotification}" />
                <uikit:UIKitSetter Id="InteractivityNotification_Status_IconName" Value="StatusInfoSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="InteractivityNotification_Status_Foreground" Value="{Res StatusForegroundPositive, Scope=UiKitInteractivityNotification}" />
                <uikit:UIKitSetter Id="InteractivityNotification_Status_IconName" Value="StatusPositiveSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="InteractivityNotification_Status_Foreground" Value="{Res StatusForegroundWarning, Scope=UiKitInteractivityNotification}" />
                <uikit:UIKitSetter Id="InteractivityNotification_Status_IconName" Value="StatusWarningSolid" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region CheckBoxes-->
    <!--  [UiKitCheckbox]  -->
    <Style x:Key="UiKitCheckbox"
           BasedOn="{StaticResource CheckableUniversal}"
           TargetType="{x:Type ToggleButton}">
        <Style.Resources>
            <Style x:Key="DescriptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForeground, Scope=UiKitCheckbox}" />
            </Style>
            <Style x:Key="DescriptionStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForegroundDisabled, Scope=UiKitCheckbox}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitCheckbox}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForegroundDisabled, Scope=UiKitCheckbox}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Checkable_DescriptionStyle" Value="{StaticResource DescriptionStyle}" />
        <uikit:UIKitSetter Id="Checkable_DescriptionStyleDisabled" Value="{StaticResource DescriptionStyleDisabled}" />
        <uikit:UIKitSetter Id="Checkable_Description_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="Checkable_Mark_Source" Value="{Img UiKitCheckbox_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_CornerRadius" Value="4" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_Height" Value="16" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_Margin" Value="0,2" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_Width" Value="16" />
        <uikit:UIKitSetter Id="Checkable_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitCheckbox}"
                                     CornerRadius="8"
                                     Margin="-4,-2"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Checkable_Padding" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Checkable_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Checkable_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <uikit:UIKitSetter Id="Checkable_Mark_Source" Value="{Img UiKitCheckbox_IconPartial.svg, Scope=Svg, Mode=SvgImage}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorPartialInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPartialInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPartialInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedDisabled, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedInvalidHover, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedInvalidNormal, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedInvalidPressed, Scope=UiKitCheckbox}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region CodeInputs-->
    <!--  [UiKitCodeInput]  -->
    <Style x:Key="UiKitCodeInput"
           BasedOn="{StaticResource TextInputUniversal}"
           TargetType="{x:Type visuals:CodeInput}">
        <Style.Resources>
            <Style x:Key="CaptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CaptionForeground, Scope=UiKitCodeInput}" />
            </Style>
            <Style x:Key="LabelStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res LabelForeground, Scope=UiKitCodeInput}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundNormal, Scope=UiKitCodeInput}" />
        <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitCodeInput}" />
        <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="TextInput_CaretBrush" Value="{Res CaretBrush, Scope=UiKitCodeInput}" />
        <uikit:UIKitSetter Id="TextInput_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="TextInput_Height" Value="44" />
        <uikit:UIKitSetter Id="TextInput_Padding" Value="12,10" />
        <uikit:UIKitSetter Id="TextInput_Placeholder_Foreground" Value="{Res PlaceholderForeground, Scope=UiKitCodeInput}" />
        <uikit:UIKitSetter Id="TextInput_PlaceholderStyle" Value="{StaticResource UiKitTextStyleHeader3}" />
        <uikit:UIKitSetter Id="TextInput_CaptionStyle" Value="{StaticResource CaptionStyle}" />
        <uikit:UIKitSetter Id="TextInput_Caption_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="TextInput_LabelStyle" Value="{StaticResource LabelStyle}" />
        <uikit:UIKitSetter Id="TextInput_Label_Margin" Value="0,0,0,6" />
        <uikit:UIKitSetter Id="TextInput_TextForeground" Value="{Res TextForeground, Scope=UiKitCodeInput}" />
        <uikit:UIKitSetter Id="TextInput_ValidationPopupStyle" Value="{StaticResource UiKitPopupDanger}" />
        <Style.Triggers>
            <Trigger Property="FontMode" Value="Regular">
                <uikit:UIKitSetter Id="TextInput_TextStyle" Value="{StaticResource UiKitTextStyleHeader3}" />
            </Trigger>
            <Trigger Property="FontMode" Value="Monospace">
                <uikit:UIKitSetter Id="TextInput_TextStyle" Value="{StaticResource UiKitTextStyleHeader3Monospace}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundDisabled, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="TextInput_TextForeground" Value="{Res TextForegroundDisabled, Scope=UiKitCodeInput}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Hover">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundHover, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Focus">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundFocus, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorFocus, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidNormal">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidNormal, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidHover">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidHover, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidFocus">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidFocus, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidFocus, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="ReadOnly">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundReadOnly, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorReadOnly, Scope=UiKitCodeInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ContentButtons-->
    <!--  [UiKitContentButton]  -->
    <Style x:Key="UiKitContentButton"
           BasedOn="{StaticResource ContentButtonUniversal}"
           TargetType="{x:Type visuals:ContentButton}">
        <uikit:UIKitSetter Id="ContentButton_Background" Value="{Res BackgroundNormal, Scope=UiKitContentButton}" />
        <uikit:UIKitSetter Id="ContentButton_BorderBrush" Value="{Res BorderNormal, Scope=UiKitContentButton}" />
        <uikit:UIKitSetter Id="ContentButton_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="ContentButton_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="ContentButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitContentButton}"
                                     CornerRadius="8"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="ContentButton_Background" Value="{Res BackgroundDisabled, Scope=UiKitContentButton}" />
                <uikit:UIKitSetter Id="ContentButton_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitContentButton}" />
                <uikit:UIKitSetter Id="ContentButton_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="ContentButton_Background" Value="{Res BackgroundHover, Scope=UiKitContentButton}" />
                <uikit:UIKitSetter Id="ContentButton_BorderBrush" Value="{Res BorderHover, Scope=UiKitContentButton}" />
                <uikit:UIKitSetter Id="ContentButton_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="ContentButton_Background" Value="{Res BackgroundPressed, Scope=UiKitContentButton}" />
                <uikit:UIKitSetter Id="ContentButton_BorderBrush" Value="{Res BorderPressed, Scope=UiKitContentButton}" />
                <uikit:UIKitSetter Id="ContentButton_BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ContextMenus-->
    <!--  [UiKitContextMenu]  -->
    <Style x:Key="UiKitContextMenu"
           BasedOn="{StaticResource ContextMenuUniversal}"
           TargetType="{x:Type visuals:ContextMenu}">
        <Style.Resources>
            <Style x:Key="PopupDecoratorStyle"
                   BasedOn="{StaticResource PopupDecoratorUniversal}"
                   TargetType="{x:Type visuals:ContextMenuPopupDecorator}">
                <uikit:UIKitSetter Id="PopupDecorator_Background" Value="{Res PopupDecoratorBackground, Scope=UiKitContextMenu}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderBrush" Value="{Res PopupDecoratorBorderColor, Scope=UiKitContextMenu}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="PopupDecorator_CornerRadius" Value="5" />
                <uikit:UIKitSetter Id="PopupDecorator_Padding" Value="0,6" />
                <uikit:UIKitSetter Id="PopupDecorator_Shadow" Value="{Res PopupDecoratorShadow, Scope=UiKitContextMenu}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ContextMenu_PopupDecoratorStyle" Value="{StaticResource PopupDecoratorStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region Dividers-->
    <!--  [UiKitDividerMedium]  -->
    <Style x:Key="UiKitDividerMedium"
           BasedOn="{StaticResource DividerUniversal}"
           TargetType="{x:Type visuals:Divider}">
        <uikit:UIKitSetter Id="Divider_Background" Value="{Res Background, Scope=UiKitDividerMedium}" />
        <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res Foreground, Scope=UiKitDividerMedium}" />
        <uikit:UIKitSetter Id="Divider_Thickness" Value="1" />
    </Style>
    <!--  [UiKitDividerRegular]  -->
    <Style x:Key="UiKitDividerRegular"
           BasedOn="{StaticResource DividerUniversal}"
           TargetType="{x:Type visuals:Divider}">
        <uikit:UIKitSetter Id="Divider_Background" Value="{Res Background, Scope=UiKitDividerRegular}" />
        <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res Foreground, Scope=UiKitDividerRegular}" />
        <uikit:UIKitSetter Id="Divider_Thickness" Value="1" />
    </Style>
    <!--#endregion-->
    <!--#region Hyperlinks-->
    <!--  [UiKitHyperlinkDanger]  -->
    <Style x:Key="UiKitHyperlinkDanger"
           BasedOn="{StaticResource HyperlinkUniversal}"
           TargetType="{x:Type Hyperlink}">
        <uikit:UIKitSetter Id="Hyperlink_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitHyperlinkDanger}"
                                     CornerRadius="8"
                                     Margin="-8,-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundNormal, Scope=UiKitHyperlinkDanger}" />
        <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsNormal, Scope=UiKitHyperlinkDanger}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitHyperlinkDanger}" />
                <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsDisabled, Scope=UiKitHyperlinkDanger}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundHover, Scope=UiKitHyperlinkDanger}" />
                <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsHover, Scope=UiKitHyperlinkDanger}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundPressed, Scope=UiKitHyperlinkDanger}" />
                <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsPressed, Scope=UiKitHyperlinkDanger}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitHyperlinkDefault]  -->
    <Style x:Key="UiKitHyperlinkDefault"
           BasedOn="{StaticResource HyperlinkUniversal}"
           TargetType="{x:Type Hyperlink}">
        <uikit:UIKitSetter Id="Hyperlink_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitHyperlinkDefault}"
                                     CornerRadius="8"
                                     Margin="-8,-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundNormal, Scope=UiKitHyperlinkDefault}" />
        <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsNormal, Scope=UiKitHyperlinkDefault}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundDisabled, Scope=UiKitHyperlinkDefault}" />
                <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsDisabled, Scope=UiKitHyperlinkDefault}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundHover, Scope=UiKitHyperlinkDefault}" />
                <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsHover, Scope=UiKitHyperlinkDefault}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundPressed, Scope=UiKitHyperlinkDefault}" />
                <uikit:UIKitSetter Id="Hyperlink_TextDecoration" Value="{Res TextDecorationsPressed, Scope=UiKitHyperlinkDefault}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Icons-->
    <!--  [UiKitIcon12]  -->
    <Style x:Key="UiKitIcon12"
           BasedOn="{StaticResource IconUniversal}"
           TargetType="{x:Type visuals:IconBase}">
        <uikit:UIKitSetter Id="Icon_Foreground" Value="{Res Foreground, Scope=UiKitIcon12}" />
    </Style>
    <!--  [UiKitIcon16]  -->
    <Style x:Key="UiKitIcon16"
           BasedOn="{StaticResource IconUniversal}"
           TargetType="{x:Type visuals:IconBase}">
        <uikit:UIKitSetter Id="Icon_Foreground" Value="{Res Foreground, Scope=UiKitIcon16}" />
    </Style>
    <!--  [UiKitIcon24]  -->
    <Style x:Key="UiKitIcon24"
           BasedOn="{StaticResource IconUniversal}"
           TargetType="{x:Type visuals:IconBase}">
        <uikit:UIKitSetter Id="Icon_Foreground" Value="{Res Foreground, Scope=UiKitIcon24}" />
    </Style>
    <!--  [UiKitIcon32]  -->
    <Style x:Key="UiKitIcon32"
           BasedOn="{StaticResource IconUniversal}"
           TargetType="{x:Type visuals:IconBase}">
        <uikit:UIKitSetter Id="Icon_Foreground" Value="{Res Foreground, Scope=UiKitIcon32}" />
    </Style>
    <!--  [UiKitIcon48]  -->
    <Style x:Key="UiKitIcon48"
           BasedOn="{StaticResource IconUniversal}"
           TargetType="{x:Type visuals:IconBase}">
        <uikit:UIKitSetter Id="Icon_Foreground" Value="{Res Foreground, Scope=UiKitIcon48}" />
    </Style>
    <!--#endregion-->
    <!--#region IslandButtons-->
    <!--  [UiKitIslandButton]  -->
    <Style x:Key="UiKitIslandButton"
           BasedOn="{StaticResource IslandButtonUniversal}"
           TargetType="{x:Type visuals:IslandButton}">
        <uikit:UIKitSetter Id="IslandButton_Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="Level" Value="First">
                <uikit:UIKitSetter Id="IslandButton_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitIslandButton}"
                                             CornerRadius="16"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <uikit:UIKitSetter Id="IslandButton_CornerRadius" Value="12" />
            </Trigger>
            <Trigger Property="Level" Value="Second">
                <uikit:UIKitSetter Id="IslandButton_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitIslandButton}"
                                             CornerRadius="12"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <uikit:UIKitSetter Id="IslandButton_CornerRadius" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationNormalLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationNormalLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationHoverLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationHoverLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationPressedLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationPressedLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationDisabledLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationDisabledLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationNormalLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationNormalLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationHoverLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationHoverLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationPressedLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationPressedLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundElevationDisabledLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorElevationDisabledLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryNormalLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryNormalLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryHoverLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryHoverLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryPressedLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryPressedLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryDisabledLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryDisabledLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryNormalLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryNormalLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryHoverLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryHoverLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryPressedLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryPressedLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundPrimaryDisabledLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorPrimaryDisabledLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryNormalLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryNormalLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryHoverLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryHoverLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryPressedLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryPressedLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryDisabledLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryDisabledLevel1, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryNormalLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryNormalLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryHoverLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryHoverLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryPressedLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryPressedLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandButton_Background" Value="{Res BackgroundSecondaryDisabledLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderBrush" Value="{Res BorderColorSecondaryDisabledLevel2, Scope=UiKitIslandButton}" />
                <uikit:UIKitSetter Id="IslandButton_BorderThickness" Value="1" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region IslandToggleButtons-->
    <!--  [UiKitIslandToggleButton]  -->
    <Style x:Key="UiKitIslandToggleButton"
           BasedOn="{StaticResource IslandToggleButtonUniversal}"
           TargetType="{x:Type visuals:IslandToggleButton}">
        <uikit:UIKitSetter Id="IslandToggleButton_Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="Level" Value="First">
                <uikit:UIKitSetter Id="IslandToggleButton_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitIslandToggleButton}"
                                             CornerRadius="16"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <uikit:UIKitSetter Id="IslandToggleButton_CornerRadius" Value="12" />
            </Trigger>
            <Trigger Property="Level" Value="Second">
                <uikit:UIKitSetter Id="IslandToggleButton_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitIslandToggleButton}"
                                             CornerRadius="12"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <uikit:UIKitSetter Id="IslandToggleButton_CornerRadius" Value="8" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Normal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationNormalLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationNormalLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Hover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationHoverLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationHoverLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Pressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationPressedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationPressedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Disabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationDisabledLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationDisabledLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedNormal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationNormalCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationNormalCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedHover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationHoverCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationHoverCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedPressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationPressedCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationPressedCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedDisabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationDisabledCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationDisabledCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Normal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationNormalLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationNormalLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Hover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationHoverLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationHoverLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Pressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationPressedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationPressedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Disabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationDisabledLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationDisabledLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedNormal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationNormalCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationNormalCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedHover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationHoverCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationHoverCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedPressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationPressedCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationPressedCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedDisabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundElevationDisabledCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorElevationDisabledCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Normal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryNormalLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryNormalLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Hover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryHoverLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryHoverLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Pressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryPressedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryPressedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Disabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryDisabledLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryDisabledLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedNormal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryNormalCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryNormalCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedHover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryHoverCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryHoverCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedPressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryPressedCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryPressedCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedDisabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryDisabledCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryDisabledCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Normal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryNormalLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryNormalLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Hover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryHoverLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryHoverLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Pressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryPressedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryPressedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Disabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryDisabledLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryDisabledLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedNormal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryNormalCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryNormalCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedHover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryHoverCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryHoverCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedPressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryPressedCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryPressedCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedDisabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundPrimaryDisabledCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorPrimaryDisabledCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Normal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryNormalLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryNormalLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Hover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryHoverLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryHoverLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Pressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryPressedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryPressedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Disabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryDisabledLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryDisabledLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedNormal" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryNormalCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryNormalCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedHover" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryHoverCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryHoverCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedPressed" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryPressedCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryPressedCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedDisabled" />
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryDisabledCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryDisabledCheckedLevel1, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Normal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryNormalLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryNormalLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Hover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryHoverLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryHoverLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Pressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryPressedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryPressedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="Disabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryDisabledLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryDisabledLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedNormal" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryNormalCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryNormalCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedHover" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryHoverCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryHoverCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedPressed" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryPressedCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryPressedCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="visuals:StateService.SelectableState" Value="SelectedDisabled" />
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="IslandToggleButton_Background" Value="{Res BackgroundSecondaryDisabledCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderBrush" Value="{Res BorderColorSecondaryDisabledCheckedLevel2, Scope=UiKitIslandToggleButton}" />
                <uikit:UIKitSetter Id="IslandToggleButton_BorderThickness" Value="1" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Islands-->
    <!--  [UiKitIsland]  -->
    <Style x:Key="UiKitIsland"
           BasedOn="{StaticResource IslandUniversal}"
           TargetType="{x:Type visuals:Island}">
        <uikit:UIKitSetter Id="Island_Padding" Value="0" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Island_Background" Value="{Res BackgroundElevationLevel1, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderBrush" Value="{Res BorderColorElevationLevel1, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Island_CornerRadius" Value="12" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Elevation" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Island_Background" Value="{Res BackgroundElevationLevel2, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderBrush" Value="{Res BorderColorElevationLevel2, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Island_CornerRadius" Value="8" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Island_Background" Value="{Res BackgroundPrimaryLevel1, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderBrush" Value="{Res BorderColorPrimaryLevel1, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Island_CornerRadius" Value="12" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Primary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Island_Background" Value="{Res BackgroundPrimaryLevel2, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderBrush" Value="{Res BorderColorPrimaryLevel2, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Island_CornerRadius" Value="8" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="First" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Island_Background" Value="{Res BackgroundSecondaryLevel1, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderBrush" Value="{Res BorderColorSecondaryLevel1, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Island_CornerRadius" Value="12" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Level" Value="Second" />
                    <Condition Property="Type" Value="Secondary" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Island_Background" Value="{Res BackgroundSecondaryLevel2, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderBrush" Value="{Res BorderColorSecondaryLevel2, Scope=UiKitIsland}" />
                <uikit:UIKitSetter Id="Island_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Island_CornerRadius" Value="8" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ListMenuItems-->
    <!--  [UiKitListMenuItem]  -->
    <Style x:Key="UiKitListMenuItem"
           BasedOn="{StaticResource ListMenuItemUniversal}"
           TargetType="{x:Type visuals:ListMenuItem}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitListMenuItem}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitListMenuItem}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitListMenuItem}" />
            </Style>
            <Style x:Key="TextStyleSelectedNormal"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitListMenuItem}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ListMenuItem_Background" Value="{Res BackgroundNormal, Scope=UiKitListMenuItem}" />
        <uikit:UIKitSetter Id="ListMenuItem_BorderBrush" Value="{Res BorderNormal, Scope=UiKitListMenuItem}" />
        <uikit:UIKitSetter Id="ListMenuItem_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="ListMenuItem_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="ListMenuItem_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitListMenuItem}"
                                     CornerRadius="6"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="ListMenuItem_Padding" Value="12,10" />
        <uikit:UIKitSetter Id="ListMenuItem_Icon_Foreground" Value="{Res IconForegroundNormal, Scope=UiKitListMenuItem}" />
        <uikit:UIKitSetter Id="ListMenuItem_Icon_Margin" Value="0,0,8,0" />
        <uikit:UIKitSetter Id="ListMenuItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="ListMenuItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="ListMenuItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="ListMenuItem_TextStyleSelectedNormal" Value="{StaticResource TextStyleSelectedNormal}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.SelectableState" Value="Disabled">
                <uikit:UIKitSetter Id="ListMenuItem_Background" Value="{Res BackgroundDisabled, Scope=UiKitListMenuItem}" />
                <uikit:UIKitSetter Id="ListMenuItem_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitListMenuItem}" />
                <uikit:UIKitSetter Id="ListMenuItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ListMenuItem_Icon_Foreground" Value="{Res IconForegroundDisabled, Scope=UiKitListMenuItem}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="Hover">
                <uikit:UIKitSetter Id="ListMenuItem_Background" Value="{Res BackgroundHover, Scope=UiKitListMenuItem}" />
                <uikit:UIKitSetter Id="ListMenuItem_BorderBrush" Value="{Res BorderHover, Scope=UiKitListMenuItem}" />
                <uikit:UIKitSetter Id="ListMenuItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ListMenuItem_Icon_Foreground" Value="{Res IconForegroundHover, Scope=UiKitListMenuItem}" />
            </Trigger>
            <Trigger Property="visuals:StateService.SelectableState" Value="SelectedNormal">
                <uikit:UIKitSetter Id="ListMenuItem_Background" Value="{Res BackgroundPressed, Scope=UiKitListMenuItem}" />
                <uikit:UIKitSetter Id="ListMenuItem_BorderBrush" Value="{Res BorderPressed, Scope=UiKitListMenuItem}" />
                <uikit:UIKitSetter Id="ListMenuItem_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="ListMenuItem_Icon_Foreground" Value="{Res IconForegroundPressed, Scope=UiKitListMenuItem}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitListMenu]  -->
    <Style x:Key="UiKitListMenu"
           BasedOn="{StaticResource ListMenuUniversal}"
           TargetType="{x:Type visuals:ListMenu}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource UiKitListMenuItem}" />
    </Style>
    <!--#endregion-->
    <!--#region MenuItems-->
    <!--  [UiKitMenuItem]  -->
    <Style x:Key="UiKitMenuItem"
           BasedOn="{StaticResource MenuItemUniversal}"
           TargetType="{x:Type visuals:MenuItemBase}">
        <Style.Resources>
            <Style x:Key="DescriptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForegroundNormal, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="DescriptionStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForegroundDisabled, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="DescriptionStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForegroundHover, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="DescriptionStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForegroundPressed, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="GroupHeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res GroupHeaderForeground, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="PopupDecoratorStyle"
                   BasedOn="{StaticResource PopupDecoratorUniversal}"
                   TargetType="{x:Type visuals:ContextMenuPopupDecorator}">
                <uikit:UIKitSetter Id="PopupDecorator_Background" Value="{Res PopupDecoratorBackground, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderBrush" Value="{Res PopupDecoratorBorderColor, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="PopupDecorator_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="PopupDecorator_CornerRadius" Value="5" />
                <uikit:UIKitSetter Id="PopupDecorator_Padding" Value="0,6" />
                <uikit:UIKitSetter Id="PopupDecorator_Shadow" Value="{Res PopupDecoratorShadow, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitMenuItem}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitMenuItem}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="MenuItem_Background" Value="{Res BackgroundNormal, Scope=UiKitMenuItem}" />
        <uikit:UIKitSetter Id="MenuItem_Badge_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="MenuItem_CheckBoxMarkIcon_Foreground" Value="{Res CheckBoxMarkIconForegroundNormal, Scope=UiKitMenuItem}" />
        <uikit:UIKitSetter Id="MenuItem_CheckBoxMarkIcon_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="MenuItem_CheckBoxMarkIcon_Name" Value="Check" />
        <uikit:UIKitSetter Id="MenuItem_Description_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="MenuItem_DescriptionStyle" Value="{StaticResource DescriptionStyle}" />
        <uikit:UIKitSetter Id="MenuItem_DescriptionStyleDisabled" Value="{StaticResource DescriptionStyleDisabled}" />
        <uikit:UIKitSetter Id="MenuItem_DescriptionStyleHover" Value="{StaticResource DescriptionStyleHover}" />
        <uikit:UIKitSetter Id="MenuItem_DescriptionStylePressed" Value="{StaticResource DescriptionStylePressed}" />
        <uikit:UIKitSetter Id="MenuItem_GroupHeader_Margin" Value="12,6" />
        <uikit:UIKitSetter Id="MenuItem_GroupHeaderStyle" Value="{StaticResource GroupHeaderStyle}" />
        <uikit:UIKitSetter Id="MenuItem_Icon_Foreground" Value="{Res IconForegroundNormal, Scope=UiKitMenuItem}" />
        <uikit:UIKitSetter Id="MenuItem_Icon_Margin" Value="0,2,8,0" />
        <uikit:UIKitSetter Id="MenuItem_MinHeight" Value="36" />
        <uikit:UIKitSetter Id="MenuItem_Padding" Value="12,8" />
        <uikit:UIKitSetter Id="MenuItem_PopupDecoratorStyle" Value="{StaticResource PopupDecoratorStyle}" />
        <uikit:UIKitSetter Id="MenuItem_SubmenuIcon_Name" Value="ArrowRight" />
        <uikit:UIKitSetter Id="MenuItem_SubmenuIcon_Foreground" Value="{Res SubmenuIconForegroundNormal, Scope=UiKitMenuItem}" />
        <uikit:UIKitSetter Id="MenuItem_SubmenuIcon_Margin" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="MenuItem_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="MenuItem_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="MenuItem_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="MenuItem_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="MenuItem_Background" Value="{Res BackgroundDisabled, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_CheckBoxMarkIcon_Foreground" Value="{Res CheckBoxMarkIconForegroundDisabled, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_Icon_Foreground" Value="{Res IconForegroundDisabled, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_SubmenuIcon_Foreground" Value="{Res SubmenuIconForegroundDisabled, Scope=UiKitMenuItem}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="MenuItem_Background" Value="{Res BackgroundHover, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_CheckBoxMarkIcon_Foreground" Value="{Res CheckBoxMarkIconForegroundHover, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_Icon_Foreground" Value="{Res IconForegroundHover, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_SubmenuIcon_Foreground" Value="{Res SubmenuIconForegroundHover, Scope=UiKitMenuItem}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="MenuItem_Background" Value="{Res BackgroundPressed, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_CheckBoxMarkIcon_Foreground" Value="{Res CheckBoxMarkIconForegroundPressed, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_Icon_Foreground" Value="{Res IconForegroundPressed, Scope=UiKitMenuItem}" />
                <uikit:UIKitSetter Id="MenuItem_SubmenuIcon_Foreground" Value="{Res SubmenuIconForegroundPressed, Scope=UiKitMenuItem}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region NavigationMenuButtons-->
    <!--  [UiKitNavigationMenuButton]  -->
    <Style x:Key="UiKitNavigationMenuButton"
           BasedOn="{StaticResource NavigationMenuButtonUniversal}"
           TargetType="{x:Type visuals:NavigationMenuButton}">
        <Style.Resources>
            <Style x:Key="CaptionTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitNavigationMenuButton}" />
            </Style>
            <Style x:Key="CaptionTextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitNavigationMenuButton}" />
            </Style>
            <Style x:Key="CaptionTextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitNavigationMenuButton}" />
            </Style>
            <Style x:Key="DescriptionTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSecondLineNormal, Scope=UiKitNavigationMenuButton}" />
            </Style>
            <Style x:Key="DescriptionTextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSecondLineHover, Scope=UiKitNavigationMenuButton}" />
            </Style>
            <Style x:Key="DescriptionTextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundSecondLinePressed, Scope=UiKitNavigationMenuButton}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="NavigationMenuButton_Background" Value="{Res Background, Scope=UiKitNavigationMenuButton}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Badge_Margin" Value="12,0,0,0" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Badge_Style" Value="{StaticResource UiKitBadge}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_CaptionTextStyle" Value="{StaticResource CaptionTextStyle}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_CaptionTextStyleHover" Value="{StaticResource CaptionTextStyleHover}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_CaptionTextStylePressed" Value="{StaticResource CaptionTextStylePressed}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_Background" Value="{Res ContainerBackgroundNormal, Scope=UiKitNavigationMenuButton}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitNavigationMenuButton}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_Padding" Value="12,0" />
        <uikit:UIKitSetter Id="NavigationMenuButton_DescriptionTextStyle" Value="{StaticResource DescriptionTextStyle}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_DescriptionTextStyleHover" Value="{StaticResource DescriptionTextStyleHover}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_DescriptionTextStylePressed" Value="{StaticResource DescriptionTextStylePressed}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitNavigationMenuButton}"
                                     CornerRadius="6"
                                     Margin="16,0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="NavigationMenuButton_Icon_Foreground" Value="{Res IconForegroundNormal, Scope=UiKitNavigationMenuButton}" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Icon_Margin" Value="0,0,12,0" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Height" Value="48" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_MarginLevel1" Value="16,0" />
        <uikit:UIKitSetter Id="NavigationMenuButton_Container_MarginLevel2" Value="44,0,16,0" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="NavigationMenuButton_Container_Background" Value="{Res ContainerBackgroundHover, Scope=UiKitNavigationMenuButton}" />
                <uikit:UIKitSetter Id="NavigationMenuButton_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitNavigationMenuButton}" />
                <uikit:UIKitSetter Id="NavigationMenuButton_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NavigationMenuButton_Icon_Foreground" Value="{Res IconForegroundHover, Scope=UiKitNavigationMenuButton}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="NavigationMenuButton_Container_Background" Value="{Res ContainerBackgroundPressed, Scope=UiKitNavigationMenuButton}" />
                <uikit:UIKitSetter Id="NavigationMenuButton_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitNavigationMenuButton}" />
                <uikit:UIKitSetter Id="NavigationMenuButton_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NavigationMenuButton_Icon_Foreground" Value="{Res IconForegroundPressed, Scope=UiKitNavigationMenuButton}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region NavigationMenuFooterButtons-->
    <!--  [UiKitNavigationMenuFooterButton]  -->
    <Style x:Key="UiKitNavigationMenuFooterButton"
           BasedOn="{StaticResource NavigationMenuFooterButtonUniversal}"
           TargetType="{x:Type visuals:NavigationMenuFooterButton}">
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Badge_Margin" Value="0,4,4,0" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Badge_Style" Value="{StaticResource UiKitBadge}" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BackgroundBrush" Value="{Res BackgroundNormal, Scope=UiKitNavigationMenuFooterButton}" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitNavigationMenuFooterButton}" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitNavigationMenuFooterButton}"
                                     CornerRadius="6"
                                     Margin="0"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Height" Value="40" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Icon_Brush" Value="{Res IconForegroundNormal, Scope=UiKitNavigationMenuFooterButton}" />
        <uikit:UIKitSetter Id="NavigationMenuFooterButton_Width" Value="40" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BackgroundBrush" Value="{Res BackgroundHover, Scope=UiKitNavigationMenuFooterButton}" />
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitNavigationMenuFooterButton}" />
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Icon_Brush" Value="{Res IconForegroundHover, Scope=UiKitNavigationMenuFooterButton}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BackgroundBrush" Value="{Res BackgroundPressed, Scope=UiKitNavigationMenuFooterButton}" />
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitNavigationMenuFooterButton}" />
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NavigationMenuFooterButton_Icon_Brush" Value="{Res IconForegroundPressed, Scope=UiKitNavigationMenuFooterButton}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region NotificationHints-->
    <!--  [UiKitNotificationHint]  -->
    <Style x:Key="UiKitNotificationHint"
           BasedOn="{StaticResource NotificationHintUniversal}"
           TargetType="{x:Type visuals:NotificationHint}">
        <Style.Resources>
            <Style x:Key="TextStyleDanger"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDanger, Scope=UiKitNotificationHint}" />
            </Style>
            <Style x:Key="TextStyleInfo"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundInfo, Scope=UiKitNotificationHint}" />
            </Style>
            <Style x:Key="TextStylePositive"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPositive, Scope=UiKitNotificationHint}" />
            </Style>
            <Style x:Key="TextStyleWarning"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundWarning, Scope=UiKitNotificationHint}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationHint_Icon_Margin" Value="0,2,8,0" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="NotificationHint_Icon_Color" Value="{Res IconForegroundDanger, Scope=UiKitNotificationHint}" />
                <uikit:UIKitSetter Id="NotificationHint_Icon_Name" Value="StatusDanger" />
                <uikit:UIKitSetter Id="NotificationHint_TextStyle" Value="{StaticResource TextStyleDanger}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="NotificationHint_Icon_Color" Value="{Res IconForegroundInfo, Scope=UiKitNotificationHint}" />
                <uikit:UIKitSetter Id="NotificationHint_Icon_Name" Value="StatusInfo" />
                <uikit:UIKitSetter Id="NotificationHint_TextStyle" Value="{StaticResource TextStyleInfo}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="NotificationHint_Icon_Color" Value="{Res IconForegroundPositive, Scope=UiKitNotificationHint}" />
                <uikit:UIKitSetter Id="NotificationHint_Icon_Name" Value="StatusPositive" />
                <uikit:UIKitSetter Id="NotificationHint_TextStyle" Value="{StaticResource TextStylePositive}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="NotificationHint_Icon_Color" Value="{Res IconForegroundWarning, Scope=UiKitNotificationHint}" />
                <uikit:UIKitSetter Id="NotificationHint_Icon_Name" Value="StatusWarning" />
                <uikit:UIKitSetter Id="NotificationHint_TextStyle" Value="{StaticResource TextStyleWarning}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region NotificationSpinners-->
    <!--  [UiKitNotificationSpinnerHorizontalBig]  -->
    <Style x:Key="UiKitNotificationSpinnerHorizontalBig"
           BasedOn="{StaticResource NotificationSpinnerUniversal}"
           TargetType="{x:Type visuals:NotificationSpinner}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleHeader5}"
                   TargetType="{x:Type TextBlock}" />
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}" />
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}" />
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationSpinner_Header_Style" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Orientation" Value="HORIZONTAL" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Margin" Value="0,2,16,0" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Style" Value="{StaticResource TextStyle}" />
    </Style>
    <!--  [UiKitNotificationSpinnerHorizontalSmall]  -->
    <Style x:Key="UiKitNotificationSpinnerHorizontalSmall"
           BasedOn="{StaticResource NotificationSpinnerUniversal}"
           TargetType="{x:Type visuals:NotificationSpinner}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}" />
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner16}"
                   TargetType="{x:Type visuals:Spinner}" />
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}" />
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationSpinner_Header_Style" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Orientation" Value="HORIZONTAL" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Margin" Value="0,2,16,0" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Style" Value="{StaticResource TextStyle}" />
    </Style>
    <!--  [UiKitNotificationSpinnerVerticalBig]  -->
    <Style x:Key="UiKitNotificationSpinnerVerticalBig"
           BasedOn="{StaticResource NotificationSpinnerUniversal}"
           TargetType="{x:Type visuals:NotificationSpinner}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleHeader3}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextBlock.TextAlignment" Value="CENTER" />
            </Style>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner48}"
                   TargetType="{x:Type visuals:Spinner}" />
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextBlock.TextAlignment" Value="CENTER" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationSpinner_Header_Style" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Orientation" Value="VERTICAL" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Margin" Value="0,0,0,16" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Margin" Value="0,4,0,0" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Style" Value="{StaticResource TextStyle}" />
    </Style>
    <!--  [UiKitNotificationSpinnerVerticalSmall]  -->
    <Style x:Key="UiKitNotificationSpinnerVerticalSmall"
           BasedOn="{StaticResource NotificationSpinnerUniversal}"
           TargetType="{x:Type visuals:NotificationSpinner}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextBlock.TextAlignment" Value="CENTER" />
            </Style>
            <Style x:Key="SpinnerStyle"
                   BasedOn="{StaticResource UiKitSpinner24}"
                   TargetType="{x:Type visuals:Spinner}" />
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextBlock.TextAlignment" Value="CENTER" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationSpinner_Header_Style" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Orientation" Value="VERTICAL" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Margin" Value="0,0,0,16" />
        <uikit:UIKitSetter Id="NotificationSpinner_Spinner_Style" Value="{StaticResource SpinnerStyle}" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="NotificationSpinner_Text_Style" Value="{StaticResource TextStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region NumberInputs-->
    <!--  [UiKitNumberInput]  -->
    <Style x:Key="UiKitNumberInput"
           BasedOn="{StaticResource NumberInputUniversal}"
           TargetType="{x:Type visuals:NumberInput}">
        <uikit:UIKitSetter Id="NumberInput_ActionDecrease_IconName" Value="ArrowDown" />
        <uikit:UIKitSetter Id="NumberInput_ActionIncrease_IconName" Value="ArrowUp" />
    </Style>
    <!--#endregion-->
    <!--#region PasswordInputs-->
    <!--  [UiKitPasswordInput]  -->
    <Style x:Key="UiKitPasswordInput"
           BasedOn="{StaticResource PasswordInputUniversal}"
           TargetType="{x:Type visuals:PasswordInput}">
        <Style.Resources>
            <Style x:Key="CaptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CaptionForeground, Scope=UiKitPasswordInput}" />
            </Style>
            <Style x:Key="LabelStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res LabelForeground, Scope=UiKitPasswordInput}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="PasswordInput_ActionBar_Margin" Value="0,4,8,4" />
        <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundNormal, Scope=UiKitPasswordInput}" />
        <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitPasswordInput}" />
        <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="PasswordInput_CaretBrush" Value="{Res CaretBrush, Scope=UiKitPasswordInput}" />
        <uikit:UIKitSetter Id="PasswordInput_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="PasswordInput_Height" Value="32" />
        <uikit:UIKitSetter Id="PasswordInput_Padding" Value="12,6,4,6" />
        <uikit:UIKitSetter Id="PasswordInput_Placeholder_Foreground" Value="{Res PlaceholderForeground, Scope=UiKitPasswordInput}" />
        <uikit:UIKitSetter Id="PasswordInput_PlaceholderStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
        <uikit:UIKitSetter Id="PasswordInput_CaptionStyle" Value="{StaticResource CaptionStyle}" />
        <uikit:UIKitSetter Id="PasswordInput_Caption_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="PasswordInput_LabelStyle" Value="{StaticResource LabelStyle}" />
        <uikit:UIKitSetter Id="PasswordInput_Label_Margin" Value="0,0,0,6" />
        <uikit:UIKitSetter Id="PasswordInput_TextForeground" Value="{Res TextForeground, Scope=UiKitPasswordInput}" />
        <uikit:UIKitSetter Id="PasswordInput_ValidationPopupStyle" Value="{StaticResource UiKitPopupDanger}" />
        <Style.Triggers>
            <Trigger Property="FontMode" Value="Regular">
                <uikit:UIKitSetter Id="PasswordInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
            </Trigger>
            <Trigger Property="FontMode" Value="Monospace">
                <uikit:UIKitSetter Id="PasswordInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseTextMonospace}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundDisabled, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="PasswordInput_TextForeground" Value="{Res TextForegroundDisabled, Scope=UiKitPasswordInput}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Hover">
                <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundHover, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Focus">
                <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundFocus, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorFocus, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidNormal">
                <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorInvalidNormal, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidHover">
                <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorInvalidHover, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidFocus">
                <uikit:UIKitSetter Id="PasswordInput_Background" Value="{Res BackgroundInvalidFocus, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderBrush" Value="{Res BorderColorInvalidFocus, Scope=UiKitPasswordInput}" />
                <uikit:UIKitSetter Id="PasswordInput_BorderThickness" Value="2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ProgressBars-->
    <!--  [UiKitProgressBarSmall]  -->
    <Style x:Key="UiKitProgressBarSmall"
           BasedOn="{StaticResource ProgressBarUniversal}"
           TargetType="{x:Type visuals:ProgressBar}">
        <Style.Resources>
            <Style x:Key="EstimationTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res EstimationForeground, Scope=UiKitProgressBarSmall}" />
            </Style>
            <Style x:Key="EstimationTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res EstimationForegroundDisabled, Scope=UiKitProgressBarSmall}" />
            </Style>
            <Style x:Key="StateTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res StateForeground, Scope=UiKitProgressBarSmall}" />
            </Style>
            <Style x:Key="StateTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res StateForegroundDisabled, Scope=UiKitProgressBarSmall}" />
            </Style>
            <Style x:Key="ValueTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ValueForeground, Scope=UiKitProgressBarSmall}" />
            </Style>
            <Style x:Key="ValueTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ValueForegroundDisabled, Scope=UiKitProgressBarSmall}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ProgressBar_EstimationTextStyle" Value="{StaticResource EstimationTextStyle}" />
        <uikit:UIKitSetter Id="ProgressBar_Glow_Brush" Value="{Res GlowColor, Scope=UiKitProgressBarSmall}" />
        <uikit:UIKitSetter Id="ProgressBar_Glow_Width" Value="64" />
        <uikit:UIKitSetter Id="ProgressBar_Padding" Value="0,4,0,0" />
        <uikit:UIKitSetter Id="ProgressBar_Track_Background" Value="{Res Background, Scope=UiKitProgressBarSmall}" />
        <uikit:UIKitSetter Id="ProgressBar_Track_CornerRadius" Value="2" />
        <uikit:UIKitSetter Id="ProgressBar_Track_Height" Value="4" />
        <uikit:UIKitSetter Id="ProgressBar_State_Margin" Value="0,0,2,0" />
        <uikit:UIKitSetter Id="ProgressBar_StateTextStyle" Value="{StaticResource StateTextStyle}" />
        <uikit:UIKitSetter Id="ProgressBar_ValueTextStyle" Value="{StaticResource ValueTextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorDanger, Scope=UiKitProgressBarSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorInfo, Scope=UiKitProgressBarSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorNeutral, Scope=UiKitProgressBarSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorPositive, Scope=UiKitProgressBarSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorWarning, Scope=UiKitProgressBarSmall}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="ProgressBar_EstimationTextStyle" Value="{StaticResource EstimationTextDisabledStyle}" />
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorDisabled, Scope=UiKitProgressBarSmall}" />
                <uikit:UIKitSetter Id="ProgressBar_StateTextStyle" Value="{StaticResource StateTextDisabledStyle}" />
                <uikit:UIKitSetter Id="ProgressBar_ValueTextStyle" Value="{StaticResource ValueTextDisabledStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitProgressBarStandart]  -->
    <Style x:Key="UiKitProgressBarStandart"
           BasedOn="{StaticResource ProgressBarUniversal}"
           TargetType="{x:Type visuals:ProgressBar}">
        <Style.Resources>
            <Style x:Key="EstimationTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res EstimationForeground, Scope=UiKitProgressBarStandart}" />
            </Style>
            <Style x:Key="EstimationTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res EstimationForegroundDisabled, Scope=UiKitProgressBarStandart}" />
            </Style>
            <Style x:Key="StateTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res StateForeground, Scope=UiKitProgressBarStandart}" />
            </Style>
            <Style x:Key="StateTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res StateForegroundDisabled, Scope=UiKitProgressBarStandart}" />
            </Style>
            <Style x:Key="ValueTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseTextSemibold}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ValueForeground, Scope=UiKitProgressBarStandart}" />
            </Style>
            <Style x:Key="ValueTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseTextSemibold}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ValueForegroundDisabled, Scope=UiKitProgressBarStandart}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ProgressBar_EstimationTextStyle" Value="{StaticResource EstimationTextStyle}" />
        <uikit:UIKitSetter Id="ProgressBar_Glow_Brush" Value="{Res GlowColor, Scope=UiKitProgressBarStandart}" />
        <uikit:UIKitSetter Id="ProgressBar_Glow_Width" Value="64" />
        <uikit:UIKitSetter Id="ProgressBar_Padding" Value="0,4,0,0" />
        <uikit:UIKitSetter Id="ProgressBar_Track_Background" Value="{Res Background, Scope=UiKitProgressBarStandart}" />
        <uikit:UIKitSetter Id="ProgressBar_Track_CornerRadius" Value="4" />
        <uikit:UIKitSetter Id="ProgressBar_Track_Height" Value="8" />
        <uikit:UIKitSetter Id="ProgressBar_State_Margin" Value="0,0,2,0" />
        <uikit:UIKitSetter Id="ProgressBar_StateTextStyle" Value="{StaticResource StateTextStyle}" />
        <uikit:UIKitSetter Id="ProgressBar_ValueTextStyle" Value="{StaticResource ValueTextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorDanger, Scope=UiKitProgressBarStandart}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorInfo, Scope=UiKitProgressBarStandart}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorNeutral, Scope=UiKitProgressBarStandart}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorPositive, Scope=UiKitProgressBarStandart}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorWarning, Scope=UiKitProgressBarStandart}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="ProgressBar_EstimationTextStyle" Value="{StaticResource EstimationTextDisabledStyle}" />
                <uikit:UIKitSetter Id="ProgressBar_Indicator_Foreground" Value="{Res IndicatorColorDisabled, Scope=UiKitProgressBarStandart}" />
                <uikit:UIKitSetter Id="ProgressBar_StateTextStyle" Value="{StaticResource StateTextDisabledStyle}" />
                <uikit:UIKitSetter Id="ProgressBar_ValueTextStyle" Value="{StaticResource ValueTextDisabledStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region RadioButtons-->
    <!--  [UiKitRadiobutton]  -->
    <Style x:Key="UiKitRadiobutton"
           BasedOn="{StaticResource CheckableUniversal}"
           TargetType="{x:Type ToggleButton}">
        <Style.Resources>
            <Style x:Key="DescriptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForeground, Scope=UiKitRadiobutton}" />
            </Style>
            <Style x:Key="DescriptionStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res DescriptionForegroundDisabled, Scope=UiKitRadiobutton}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitRadiobutton}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForegroundDisabled, Scope=UiKitRadiobutton}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Checkable_DescriptionStyle" Value="{StaticResource DescriptionStyle}" />
        <uikit:UIKitSetter Id="Checkable_DescriptionStyleDisabled" Value="{StaticResource DescriptionStyleDisabled}" />
        <uikit:UIKitSetter Id="Checkable_Description_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="Checkable_Mark_Source" Value="{Img UiKitRadiobutton_Icon.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_Height" Value="16" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_Margin" Value="0,2" />
        <uikit:UIKitSetter Id="Checkable_MarkContainer_Width" Value="16" />
        <uikit:UIKitSetter Id="Checkable_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitRadiobutton}"
                                     CornerRadius="8"
                                     Margin="-4,-2"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Checkable_Padding" Value="8,0,0,0" />
        <uikit:UIKitSetter Id="Checkable_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Checkable_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundDisabled, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderInvalidNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderInvalidHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundInvalidPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderInvalidPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="{x:Null}" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="0" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedDisabled, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedDisabled, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedDisabled, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedInvalidHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedInvalidHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedInvalidHover, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedInvalidNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedInvalidNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedInvalidNormal, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                    <Condition Property="visuals:CheckableInternals.IsInvalidState" Value="True" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Checkable_Mark_Brush" Value="{Res MarkColorCheckedInvalidPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_Background" Value="{Res BackgroundCheckedInvalidPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderBrush" Value="{Res BorderCheckedInvalidPressed, Scope=UiKitRadiobutton}" />
                <uikit:UIKitSetter Id="Checkable_MarkContainer_BorderThickness" Value="1.5" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region RoundProgresses-->
    <!--  [UiKitRoundProgress]  -->
    <Style x:Key="UiKitRoundProgress"
           BasedOn="{StaticResource RoundProgressUniversal}"
           TargetType="{x:Type visuals:RoundProgress}">
        <Style.Resources>
            <Style x:Key="ValueTextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ValueForeground, Scope=UiKitRoundProgress}" />
            </Style>
            <Style x:Key="ValueTextDisabledStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ValueForegroundDisabled, Scope=UiKitRoundProgress}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="RoundProgress_Diameter" Value="60" />
        <uikit:UIKitSetter Id="RoundProgress_Indicator" Value="{Res Indicator, Scope=UiKitRoundProgress}" />
        <uikit:UIKitSetter Id="RoundProgress_StrokeThickness" Value="4" />
        <uikit:UIKitSetter Id="RoundProgress_Track" Value="{Res Track, Scope=UiKitRoundProgress}" />
        <uikit:UIKitSetter Id="RoundProgress_ValueTextStyle" Value="{StaticResource ValueTextStyle}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="RoundProgress_Indicator" Value="{Res IndicatorDisabled, Scope=UiKitRoundProgress}" />
                <uikit:UIKitSetter Id="RoundProgress_Track" Value="{Res TrackDisabled, Scope=UiKitRoundProgress}" />
                <uikit:UIKitSetter Id="RoundProgress_ValueTextStyle" Value="{StaticResource ValueTextDisabledStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region RoundTimers-->
    <!--  [UiKitRoundTimer]  -->
    <Style x:Key="UiKitRoundTimer"
           BasedOn="{StaticResource RoundTimerUniversal}"
           TargetType="{x:Type visuals:RoundTimer}">
        <uikit:UIKitSetter Id="RoundTimer_Diameter" Value="24" />
        <uikit:UIKitSetter Id="RoundTimer_Indicator" Value="{Res Indicator, Scope=UiKitRoundTimer}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="RoundTimer_Indicator" Value="{Res IndicatorColorDanger, Scope=UiKitRoundTimer}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="RoundTimer_Indicator" Value="{Res IndicatorColorInfo, Scope=UiKitRoundTimer}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="RoundTimer_Indicator" Value="{Res IndicatorColorPositive, Scope=UiKitRoundTimer}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="RoundTimer_Indicator" Value="{Res IndicatorColorWarning, Scope=UiKitRoundTimer}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="RoundTimer_Indicator" Value="{Res IndicatorColorDisabled, Scope=UiKitRoundTimer}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region ScrollBars-->
    <!--  [UiKitScrollBar]  -->
    <Style x:Key="UiKitScrollBar"
           BasedOn="{StaticResource ScrollBarUniversal}"
           TargetType="{x:Type ScrollBar}">
        <Style.Resources>
            <Style x:Key="ThumbStyle"
                   BasedOn="{StaticResource ScrollBarThumbUniversal}"
                   TargetType="{x:Type Thumb}">
                <uikit:UIKitSetter Id="ScrollBarThumb_Background" Value="{Res ThumbColorNormal, Scope=UiKitScrollBar}" />
                <uikit:UIKitSetter Id="ScrollBarThumb_CornerRadius" Value="2" />
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="ScrollBarThumb_Background" Value="{Res ThumbColorDisabled, Scope=UiKitScrollBar}" />
                        <uikit:UIKitSetter Id="ScrollBarThumb_CornerRadius" Value="2" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="ScrollBarThumb_Background" Value="{Res ThumbColorHover, Scope=UiKitScrollBar}" />
                        <uikit:UIKitSetter Id="ScrollBarThumb_CornerRadius" Value="4" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="ScrollBarThumb_Background" Value="{Res ThumbColorPressed, Scope=UiKitScrollBar}" />
                        <uikit:UIKitSetter Id="ScrollBarThumb_CornerRadius" Value="4" />
                    </Trigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Horizontal" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Disabled" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="8,2,8,8" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Horizontal" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Hover" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="8,0,8,6" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Horizontal" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Normal" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="8,2,8,8" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Horizontal" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Pressed" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="8,0,8,6" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Vertical" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Disabled" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="2,8,8,8" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Vertical" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Hover" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="0,8,6,8" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Vertical" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Normal" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="2,8,8,8" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Orientation, RelativeSource={RelativeSource AncestorType={x:Type ScrollBar}}}" Value="Vertical" />
                            <Condition Binding="{Binding Path=(visuals:StateService.State), RelativeSource={RelativeSource Self}}" Value="Pressed" />
                        </MultiDataTrigger.Conditions>
                        <uikit:UIKitSetter Id="ScrollBarThumb_Margin" Value="0,8,6,8" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ScrollBar_Background" Value="{Res BackgroundNormal, Scope=UiKitScrollBar}" />
        <uikit:UIKitSetter Id="ScrollBar_Size" Value="14" />
        <uikit:UIKitSetter Id="ScrollBar_ThumbStyle" Value="{StaticResource ThumbStyle}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="ScrollBar_Size" Value="14" />
                <uikit:UIKitSetter Id="ScrollBar_Background" Value="{Res BackgroundDisabled, Scope=UiKitScrollBar}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="ScrollBar_Size" Value="14" />
                <uikit:UIKitSetter Id="ScrollBar_Background" Value="{Res BackgroundHover, Scope=UiKitScrollBar}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="ScrollBar_Size" Value="14" />
                <uikit:UIKitSetter Id="ScrollBar_Background" Value="{Res BackgroundPressed, Scope=UiKitScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Searches-->
    <!--  [UiKitSearch]  -->
    <Style x:Key="UiKitSearch"
           BasedOn="{StaticResource SearchUniversal}"
           TargetType="{x:Type visuals:Search}">
        <Style.Resources>
            <Style x:Key="TextInputStyle"
                   TargetType="{x:Type visuals:TextInput}">
                <uikit:UIKitSetter Id="Search_TextInput_CaretBrush" Value="{Res CaretBrush, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_TextInput_Padding" Value="8,6" />
                <uikit:UIKitSetter Id="Search_TextInput_PlaceholderForeground" Value="{Res PlaceholderForeground, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_TextInput_PlaceholderStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
                <uikit:UIKitSetter Id="Search_TextInput_TextForeground" Value="{Res TextForeground, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_TextInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                        <uikit:UIKitSetter Id="Search_TextInput_PlaceholderForeground" Value="{Res PlaceholderForegroundDisabled, Scope=UiKitSearch}" />
                        <uikit:UIKitSetter Id="Search_TextInput_TextForeground" Value="{Res TextForegroundDisabled, Scope=UiKitSearch}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Search_Background" Value="{Res BackgroundNormal, Scope=UiKitSearch}" />
        <uikit:UIKitSetter Id="Search_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitSearch}" />
        <uikit:UIKitSetter Id="Search_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Search_ClearButtonIcon" Value="Clear" />
        <uikit:UIKitSetter Id="Search_ClearButtonMargin" Value="0,4,8,4" />
        <uikit:UIKitSetter Id="Search_ClearButtonStyle" Value="{StaticResource UiKitIconButton16}" />
        <uikit:UIKitSetter Id="Search_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="Search_Height" Value="32" />
        <uikit:UIKitSetter Id="Search_Icon" Value="Search" />
        <uikit:UIKitSetter Id="Search_IconForeground" Value="{Res SearchIconForeground, Scope=UiKitSearch}" />
        <uikit:UIKitSetter Id="Search_IconMargin" Value="12,8,0,8" />
        <uikit:UIKitSetter Id="Search_TextInputStyle" Value="{StaticResource TextInputStyle}" />
        <uikit:UIKitSetter Id="Search_SpinnerMargin" Value="12,8,0,8" />
        <uikit:UIKitSetter Id="Search_SpinnerStyle" Value="{StaticResource UiKitSpinner16}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                <uikit:UIKitSetter Id="Search_Background" Value="{Res BackgroundDisabled, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Search_IconForeground" Value="{Res SearchIconForegroundDisabled, Scope=UiKitSearch}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Hover">
                <uikit:UIKitSetter Id="Search_Background" Value="{Res BackgroundHover, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Focus">
                <uikit:UIKitSetter Id="Search_Background" Value="{Res BackgroundFocus, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_BorderBrush" Value="{Res BorderColorFocus, Scope=UiKitSearch}" />
                <uikit:UIKitSetter Id="Search_BorderThickness" Value="2" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region SelectableTexts-->
    <!--  [UiKitSelectableText]  -->
    <Style x:Key="UiKitSelectableText"
           BasedOn="{StaticResource SelectableTextUniversal}"
           TargetType="{x:Type visuals:SelectableText}">
        <Style.Resources>
            <Style x:Key="HyperlinkStyle"
                   BasedOn="{StaticResource HyperlinkUniversal}"
                   TargetType="{x:Type Hyperlink}">
                <uikit:UIKitSetter Id="Hyperlink_Background" Value="{Res BackgroundNormal, Scope=UiKitSelectableText}" />
                <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundNormal, Scope=UiKitSelectableText}" />
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Hyperlink_Background" Value="{Res BackgroundHover, Scope=UiKitSelectableText}" />
                        <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundHover, Scope=UiKitSelectableText}" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Hyperlink_Background" Value="{Res BackgroundPressed, Scope=UiKitSelectableText}" />
                        <uikit:UIKitSetter Id="Hyperlink_Foreground" Value="{Res ForegroundPressed, Scope=UiKitSelectableText}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SelectableText_FontStyle" Value="{visuals:UIKitFontStyle UiKitTextStyleHeader4}" />
        <uikit:UIKitSetter Id="SelectableText_HyperlinkStyle" Value="{StaticResource HyperlinkStyle}" />
        <uikit:UIKitSetter Id="SelectableText_HyperlinkBackgroundPressed" Value="{Res BackgroundPressed, Scope=UiKitSelectableText}" />
        <uikit:UIKitSetter Id="SelectableText_PopupStyle" Value="{StaticResource UiKitPopupStandard}" />
    </Style>
    <!--#endregion-->
    <!--#region SplitButtons-->
    <!--  [UiKitSplitButtonBaseOutlineSecondary]  -->
    <Style x:Key="UiKitSplitButtonBaseOutlineSecondary"
           BasedOn="{StaticResource SplitButtonUniversal}"
           TargetType="{x:Type visuals:SplitButton}">
        <Style.Resources>
            <Style x:Key="DividerStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackground, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForeground, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="DividerDisabledAllStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledAll, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledAll, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="DividerDisabledSomeStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledSome, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledSome, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="DividerPressedStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundPressed, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundPressed, Scope=UiKitSplitButtonBaseOutlineSecondary}" />
            </Style>
            <Style x:Key="MainButtonStyle"
                   BasedOn="{StaticResource UiKitButtonBaseOutlineSecondary}"
                   TargetType="{x:Type Button}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6,0,0,6" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res MainButtonFocusVisualBrush, Scope=UiKitSplitButtonBaseOutlineSecondary}"
                                             CornerRadius="10,0,0,10"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ToggleButtonStyle"
                   BasedOn="{StaticResource UiKitToggleButtonBaseOutlineSecondary}"
                   TargetType="{x:Type ToggleButton}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="0,6,6,0" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res ToggleButtonFocusVisualBrush, Scope=UiKitSplitButtonBaseOutlineSecondary}"
                                             CornerRadius="0,10,10,0"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerStyle}" />
        <uikit:UIKitSetter Id="SplitButton_MainButton_Style" Value="{StaticResource MainButtonStyle}" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuClosedIcon" Value="ArrowDown" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuOpenedIcon" Value="ArrowUp" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_Style" Value="{StaticResource ToggleButtonStyle}" />
        <Style.Triggers>
            <Trigger Property="State" Value="Disabled">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledAllStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSplitButtonBasePrimary]  -->
    <Style x:Key="UiKitSplitButtonBasePrimary"
           BasedOn="{StaticResource SplitButtonUniversal}"
           TargetType="{x:Type visuals:SplitButton}">
        <Style.Resources>
            <Style x:Key="DividerStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackground, Scope=UiKitSplitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForeground, Scope=UiKitSplitButtonBasePrimary}" />
            </Style>
            <Style x:Key="DividerDisabledAllStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledAll, Scope=UiKitSplitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledAll, Scope=UiKitSplitButtonBasePrimary}" />
            </Style>
            <Style x:Key="DividerDisabledSomeStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledSome, Scope=UiKitSplitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledSome, Scope=UiKitSplitButtonBasePrimary}" />
            </Style>
            <Style x:Key="DividerPressedStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundPressed, Scope=UiKitSplitButtonBasePrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundPressed, Scope=UiKitSplitButtonBasePrimary}" />
            </Style>
            <Style x:Key="MainButtonStyle"
                   BasedOn="{StaticResource UiKitButtonBasePrimary}"
                   TargetType="{x:Type Button}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6,0,0,6" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res MainButtonFocusVisualBrush, Scope=UiKitSplitButtonBasePrimary}"
                                             CornerRadius="10,0,0,10"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ToggleButtonStyle"
                   BasedOn="{StaticResource UiKitToggleButtonBasePrimary}"
                   TargetType="{x:Type ToggleButton}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="0,6,6,0" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res ToggleButtonFocusVisualBrush, Scope=UiKitSplitButtonBasePrimary}"
                                             CornerRadius="0,10,10,0"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerStyle}" />
        <uikit:UIKitSetter Id="SplitButton_MainButton_Style" Value="{StaticResource MainButtonStyle}" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuClosedIcon" Value="ArrowDown" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuOpenedIcon" Value="ArrowUp" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_Style" Value="{StaticResource ToggleButtonStyle}" />
        <Style.Triggers>
            <Trigger Property="State" Value="Disabled">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledAllStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSplitButtonBaseSecondary]  -->
    <Style x:Key="UiKitSplitButtonBaseSecondary"
           BasedOn="{StaticResource SplitButtonUniversal}"
           TargetType="{x:Type visuals:SplitButton}">
        <Style.Resources>
            <Style x:Key="DividerStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackground, Scope=UiKitSplitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForeground, Scope=UiKitSplitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="DividerDisabledAllStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledAll, Scope=UiKitSplitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledAll, Scope=UiKitSplitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="DividerDisabledSomeStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledSome, Scope=UiKitSplitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledSome, Scope=UiKitSplitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="DividerPressedStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundPressed, Scope=UiKitSplitButtonBaseSecondary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundPressed, Scope=UiKitSplitButtonBaseSecondary}" />
            </Style>
            <Style x:Key="MainButtonStyle"
                   BasedOn="{StaticResource UiKitButtonBaseSecondary}"
                   TargetType="{x:Type Button}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6,0,0,6" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res MainButtonFocusVisualBrush, Scope=UiKitSplitButtonBaseSecondary}"
                                             CornerRadius="10,0,0,10"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ToggleButtonStyle"
                   BasedOn="{StaticResource UiKitToggleButtonBaseSecondary}"
                   TargetType="{x:Type ToggleButton}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="0,6,6,0" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res ToggleButtonFocusVisualBrush, Scope=UiKitSplitButtonBaseSecondary}"
                                             CornerRadius="0,10,10,0"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerStyle}" />
        <uikit:UIKitSetter Id="SplitButton_MainButton_Style" Value="{StaticResource MainButtonStyle}" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuClosedIcon" Value="ArrowDown" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuOpenedIcon" Value="ArrowUp" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_Style" Value="{StaticResource ToggleButtonStyle}" />
        <Style.Triggers>
            <Trigger Property="State" Value="Disabled">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledAllStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSplitButtonDangerPrimary]  -->
    <Style x:Key="UiKitSplitButtonDangerPrimary"
           BasedOn="{StaticResource SplitButtonUniversal}"
           TargetType="{x:Type visuals:SplitButton}">
        <Style.Resources>
            <Style x:Key="DividerStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackground, Scope=UiKitSplitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForeground, Scope=UiKitSplitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="DividerDisabledAllStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledAll, Scope=UiKitSplitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledAll, Scope=UiKitSplitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="DividerDisabledSomeStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledSome, Scope=UiKitSplitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledSome, Scope=UiKitSplitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="DividerPressedStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundPressed, Scope=UiKitSplitButtonDangerPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundPressed, Scope=UiKitSplitButtonDangerPrimary}" />
            </Style>
            <Style x:Key="MainButtonStyle"
                   BasedOn="{StaticResource UiKitButtonDangerPrimary}"
                   TargetType="{x:Type Button}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6,0,0,6" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res MainButtonFocusVisualBrush, Scope=UiKitSplitButtonDangerPrimary}"
                                             CornerRadius="10,0,0,10"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ToggleButtonStyle"
                   BasedOn="{StaticResource UiKitToggleButtonDangerPrimary}"
                   TargetType="{x:Type ToggleButton}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="0,6,6,0" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res ToggleButtonFocusVisualBrush, Scope=UiKitSplitButtonDangerPrimary}"
                                             CornerRadius="0,10,10,0"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerStyle}" />
        <uikit:UIKitSetter Id="SplitButton_MainButton_Style" Value="{StaticResource MainButtonStyle}" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuClosedIcon" Value="ArrowDown" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuOpenedIcon" Value="ArrowUp" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_Style" Value="{StaticResource ToggleButtonStyle}" />
        <Style.Triggers>
            <Trigger Property="State" Value="Disabled">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledAllStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSplitButtonNeutralPrimary]  -->
    <Style x:Key="UiKitSplitButtonNeutralPrimary"
           BasedOn="{StaticResource SplitButtonUniversal}"
           TargetType="{x:Type visuals:SplitButton}">
        <Style.Resources>
            <Style x:Key="DividerStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackground, Scope=UiKitSplitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForeground, Scope=UiKitSplitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="DividerDisabledAllStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledAll, Scope=UiKitSplitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledAll, Scope=UiKitSplitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="DividerDisabledSomeStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundDisabledSome, Scope=UiKitSplitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundDisabledSome, Scope=UiKitSplitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="DividerPressedStyle"
                   BasedOn="{StaticResource UiKitDividerMedium}"
                   TargetType="{x:Type visuals:Divider}">
                <uikit:UIKitSetter Id="Divider_Background" Value="{Res DividerBackgroundPressed, Scope=UiKitSplitButtonNeutralPrimary}" />
                <uikit:UIKitSetter Id="Divider_Foreground" Value="{Res DividerForegroundPressed, Scope=UiKitSplitButtonNeutralPrimary}" />
            </Style>
            <Style x:Key="MainButtonStyle"
                   BasedOn="{StaticResource UiKitButtonNeutralPrimary}"
                   TargetType="{x:Type Button}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6,0,0,6" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res MainButtonFocusVisualBrush, Scope=UiKitSplitButtonNeutralPrimary}"
                                             CornerRadius="10,0,0,10"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1,1,0,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="ToggleButtonStyle"
                   BasedOn="{StaticResource UiKitToggleButtonNeutralPrimary}"
                   TargetType="{x:Type ToggleButton}">
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="0,6,6,0" />
                <uikit:UIKitSetter Id="Button_FocusVisualStyle">
                    <uikit:UIKitSetter.Value>
                        <visuals:FocusVisual Brush="{Res ToggleButtonFocusVisualBrush, Scope=UiKitSplitButtonNeutralPrimary}"
                                             CornerRadius="0,10,10,0"
                                             Margin="-4"
                                             Thickness="2"
                                             Type="RECTANGLE" />
                    </uikit:UIKitSetter.Value>
                </uikit:UIKitSetter>
                <Style.Triggers>
                    <Trigger Property="visuals:StateService.State" Value="Hover">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Pressed">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                    </Trigger>
                    <Trigger Property="visuals:StateService.State" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </Trigger>
                    <DataTrigger Binding="{Binding State, RelativeSource={RelativeSource AncestorType={x:Type visuals:SplitButton}}}" Value="Disabled">
                        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0,1,1,1" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerStyle}" />
        <uikit:UIKitSetter Id="SplitButton_MainButton_Style" Value="{StaticResource MainButtonStyle}" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuClosedIcon" Value="ArrowDown" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_MenuOpenedIcon" Value="ArrowUp" />
        <uikit:UIKitSetter Id="SplitButton_ToggleButton_Style" Value="{StaticResource ToggleButtonStyle}" />
        <Style.Triggers>
            <Trigger Property="State" Value="Disabled">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledAllStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="DisabledContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerDisabledSomeStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedMain">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
            <Trigger Property="State" Value="PressedContextMenu">
                <uikit:UIKitSetter Id="SplitButton_Divider_Style" Value="{StaticResource DividerPressedStyle}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region SsoButtons-->
    <!--  [UiKitSsoButtonAppleColor]  -->
    <Style x:Key="UiKitSsoButtonAppleColor"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonAppleColor}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonAppleColor}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonAppleColor}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonAppleColor}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonAppleColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonAppleColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonAppleColor}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonAppleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonAppleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonAppleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonAppleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonAppleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonAppleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonAppleWhite]  -->
    <Style x:Key="UiKitSsoButtonAppleWhite"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonAppleWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonAppleWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonAppleWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonAppleWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonAppleWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonAppleWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonAppleWhite}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonAppleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonAppleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonAppleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonAppleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonAppleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonAppleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonFacebookColor]  -->
    <Style x:Key="UiKitSsoButtonFacebookColor"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonFacebookColor}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonFacebookColor}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonFacebookColor}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonFacebookColor}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonFacebookColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonFacebookColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonFacebookColor}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonFacebookColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonFacebookColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonFacebookColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonFacebookColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonFacebookColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonFacebookColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonFacebookWhite]  -->
    <Style x:Key="UiKitSsoButtonFacebookWhite"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonFacebookWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonFacebookWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonFacebookWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonFacebookWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonFacebookWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonFacebookWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonFacebookWhite}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonFacebookWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonFacebookWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonFacebookWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonFacebookWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonFacebookWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonFacebookWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonGoogleColor]  -->
    <Style x:Key="UiKitSsoButtonGoogleColor"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonGoogleColor}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonGoogleColor}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonGoogleColor}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonGoogleColor}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonGoogleColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonGoogleColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonGoogleColor}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonGoogleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonGoogleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonGoogleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonGoogleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonGoogleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonGoogleColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonGoogleWhite]  -->
    <Style x:Key="UiKitSsoButtonGoogleWhite"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonGoogleWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonGoogleWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonGoogleWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonGoogleWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonGoogleWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonGoogleWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonGoogleWhite}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonGoogleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonGoogleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonGoogleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonGoogleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonGoogleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonGoogleWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonVKColor]  -->
    <Style x:Key="UiKitSsoButtonVKColor"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonVKColor}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonVKColor}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonVKColor}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonVKColor}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonVKColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonVKColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonVKColor}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonVKColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonVKColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonVKColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonVKColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonVKColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonVKColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonVKWhite]  -->
    <Style x:Key="UiKitSsoButtonVKWhite"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonVKWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonVKWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonVKWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonVKWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonVKWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonVKWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonVKWhite}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonVKWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonVKWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonVKWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonVKWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonVKWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonVKWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonYandexIntColor]  -->
    <Style x:Key="UiKitSsoButtonYandexIntColor"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonYandexIntColor}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonYandexIntColor}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonYandexIntColor}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonYandexIntColor}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonYandexIntColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonYandexIntColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonYandexIntColor}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonYandexIntColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonYandexIntColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonYandexIntColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonYandexIntColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonYandexIntColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonYandexIntColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonYandexIntWhite]  -->
    <Style x:Key="UiKitSsoButtonYandexIntWhite"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonYandexIntWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonYandexIntWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonYandexIntWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonYandexIntWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonYandexIntWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonYandexIntWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonYandexIntWhite}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonYandexIntWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonYandexIntWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonYandexIntWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonYandexIntWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonYandexIntWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonYandexIntWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonYandexRuColor]  -->
    <Style x:Key="UiKitSsoButtonYandexRuColor"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonYandexRuColor}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonYandexRuColor}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonYandexRuColor}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonYandexRuColor}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonYandexRuColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonYandexRuColor}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonYandexRuColor}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonYandexRuColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonYandexRuColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonYandexRuColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonYandexRuColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonYandexRuColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonYandexRuColor}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSsoButtonYandexRuWhite]  -->
    <Style x:Key="UiKitSsoButtonYandexRuWhite"
           BasedOn="{StaticResource SsoButtonUniversal}"
           TargetType="{x:Type visuals:SsoButton}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNormal, Scope=UiKitSsoButtonYandexRuWhite}" />
            </Style>
            <Style x:Key="TextStyleDisabled"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDisabled, Scope=UiKitSsoButtonYandexRuWhite}" />
            </Style>
            <Style x:Key="TextStyleHover"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundHover, Scope=UiKitSsoButtonYandexRuWhite}" />
            </Style>
            <Style x:Key="TextStylePressed"
                   BasedOn="{StaticResource UiKitTextStyleButton}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPressed, Scope=UiKitSsoButtonYandexRuWhite}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundNormal, Scope=UiKitSsoButtonYandexRuWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderNormal, Scope=UiKitSsoButtonYandexRuWhite}" />
        <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="Button_Container_CornerRadius" Value="6" />
        <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSsoButtonYandexRuWhite}"
                                     CornerRadius="8"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Button_Height" Value="32" />
        <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Button_Padding" Value="16,6" />
        <uikit:UIKitSetter Id="Button_TextStyle" Value="{StaticResource TextStyle}" />
        <uikit:UIKitSetter Id="Button_TextStyleDisabled" Value="{StaticResource TextStyleDisabled}" />
        <uikit:UIKitSetter Id="Button_TextStyleHover" Value="{StaticResource TextStyleHover}" />
        <uikit:UIKitSetter Id="Button_TextStylePressed" Value="{StaticResource TextStylePressed}" />
        <uikit:UIKitSetter Id="SsoButton_Icon_Name" Value="UIKitUnset" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundDisabled, Scope=UiKitSsoButtonYandexRuWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderDisabled, Scope=UiKitSsoButtonYandexRuWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Hover">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundHover, Scope=UiKitSsoButtonYandexRuWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderHover, Scope=UiKitSsoButtonYandexRuWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Pressed">
                <uikit:UIKitSetter Id="Button_Container_Background" Value="{Res BackgroundPressed, Scope=UiKitSsoButtonYandexRuWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderBrush" Value="{Res BorderPressed, Scope=UiKitSsoButtonYandexRuWhite}" />
                <uikit:UIKitSetter Id="Button_Container_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Button_Icon_Opacity" Value="1" />
                <uikit:UIKitSetter Id="Button_Opacity" Value="1" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <uikit:UIKitSetter Id="Button_Padding" Value="0" />
                <uikit:UIKitSetter Id="Button_Icon_MarginLeft" Value="8" />
                <uikit:UIKitSetter Id="Button_Icon_MarginRight" Value="8" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region StatusBullets-->
    <!--  [UiKitStatusBulletSmall]  -->
    <Style x:Key="UiKitStatusBulletSmall"
           BasedOn="{StaticResource StatusBulletUniversal}"
           TargetType="{x:Type visuals:StatusBullet}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitStatusBulletSmall}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="StatusBullet_Margin" Value="0,4,8,0" />
        <uikit:UIKitSetter Id="StatusBullet_Mark" Value="{Img UiKitStatusBulletSmall_BulletMark.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="StatusBullet_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorDanger, Scope=UiKitStatusBulletSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorInfo, Scope=UiKitStatusBulletSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorNeutral, Scope=UiKitStatusBulletSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorPositive, Scope=UiKitStatusBulletSmall}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorWarning, Scope=UiKitStatusBulletSmall}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitStatusBulletStandard]  -->
    <Style x:Key="UiKitStatusBulletStandard"
           BasedOn="{StaticResource StatusBulletUniversal}"
           TargetType="{x:Type visuals:StatusBullet}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitStatusBulletStandard}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="StatusBullet_Margin" Value="0,6,8,0" />
        <uikit:UIKitSetter Id="StatusBullet_Mark" Value="{Img UiKitStatusBulletStandard_BulletMark.svg, Scope=Svg, Mode=SvgImage}" />
        <uikit:UIKitSetter Id="StatusBullet_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorDanger, Scope=UiKitStatusBulletStandard}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorInfo, Scope=UiKitStatusBulletStandard}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorNeutral, Scope=UiKitStatusBulletStandard}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorPositive, Scope=UiKitStatusBulletStandard}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="StatusBullet_Color" Value="{Res BulletColorWarning, Scope=UiKitStatusBulletStandard}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region StatusTags-->
    <!--  [UiKitStatusTag]  -->
    <Style x:Key="UiKitStatusTag"
           BasedOn="{StaticResource StatusTagUniversal}"
           TargetType="{x:Type visuals:StatusTag}">
        <Style.Resources>
            <Style x:Key="TextStyleDanger"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundDanger, Scope=UiKitStatusTag}" />
            </Style>
            <Style x:Key="TextStyleInfo"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundInfo, Scope=UiKitStatusTag}" />
            </Style>
            <Style x:Key="TextStyleNeutral"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNeutral, Scope=UiKitStatusTag}" />
            </Style>
            <Style x:Key="TextStylePositive"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPositive, Scope=UiKitStatusTag}" />
            </Style>
            <Style x:Key="TextStyleWarning"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundWarning, Scope=UiKitStatusTag}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="StatusTag_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="StatusTag_Height" Value="24" />
        <uikit:UIKitSetter Id="StatusTag_Icon_Margin" Value="0,0,4,0" />
        <uikit:UIKitSetter Id="StatusTag_Padding" Value="8,4" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="StatusTag_Background" Value="{Res BackgroundDanger, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderBrush" Value="{Res BorderColorDanger, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Color" Value="{Res IconForegroundDanger, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Name" Value="StatusDangerSolid" />
                <uikit:UIKitSetter Id="StatusTag_TextStyle" Value="{StaticResource TextStyleDanger}" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="StatusTag_Background" Value="{Res BackgroundInfo, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderBrush" Value="{Res BorderColorInfo, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Color" Value="{Res IconForegroundInfo, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Name" Value="StatusInfoSolid" />
                <uikit:UIKitSetter Id="StatusTag_TextStyle" Value="{StaticResource TextStyleInfo}" />
            </Trigger>
            <Trigger Property="Type" Value="Neutral">
                <uikit:UIKitSetter Id="StatusTag_Background" Value="{Res BackgroundNeutral, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderBrush" Value="{Res BorderColorNeutral, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Color" Value="{Res IconForegroundNeutral, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Name" Value="StatusQuestionSolid" />
                <uikit:UIKitSetter Id="StatusTag_TextStyle" Value="{StaticResource TextStyleNeutral}" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="StatusTag_Background" Value="{Res BackgroundPositive, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderBrush" Value="{Res BorderColorPositive, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Color" Value="{Res IconForegroundPositive, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Name" Value="StatusPositiveSolid" />
                <uikit:UIKitSetter Id="StatusTag_TextStyle" Value="{StaticResource TextStylePositive}" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="StatusTag_Background" Value="{Res BackgroundWarning, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderBrush" Value="{Res BorderColorWarning, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Color" Value="{Res IconForegroundWarning, Scope=UiKitStatusTag}" />
                <uikit:UIKitSetter Id="StatusTag_Icon_Name" Value="StatusWarningSolid" />
                <uikit:UIKitSetter Id="StatusTag_TextStyle" Value="{StaticResource TextStyleWarning}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Switches-->
    <!--  [UiKitSwitchBig]  -->
    <Style x:Key="UiKitSwitchBig"
           BasedOn="{StaticResource SwitchUniversal}"
           TargetType="{x:Type visuals:Switch}">
        <uikit:UIKitSetter Id="Switch_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="Switch_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSwitchBig}"
                                     CornerRadius="16"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Switch_Height" Value="24" />
        <uikit:UIKitSetter Id="Switch_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Switch_Thumb_Height" Value="16" />
        <uikit:UIKitSetter Id="Switch_Thumb_Margin" Value="4" />
        <uikit:UIKitSetter Id="Switch_Thumb_Width" Value="16" />
        <uikit:UIKitSetter Id="Switch_Width" Value="44" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <uikit:UIKitSetter Id="Switch_Thumb_Shadow" Value="{Res ThumbShadowOff, Scope=UiKitSwitchBig}" />
                <uikit:UIKitSetter Id="Switch_Thumb_Background" Value="{Res ThumbColorOff, Scope=UiKitSwitchBig}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <uikit:UIKitSetter Id="Switch_Thumb_Shadow" Value="{Res ThumbShadowOn, Scope=UiKitSwitchBig}" />
                <uikit:UIKitSetter Id="Switch_Thumb_Background" Value="{Res ThumbColorOn, Scope=UiKitSwitchBig}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Switch_Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffDisabled, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffNormal, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffHover, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffPressed, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnDisabled, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnNormal, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnHover, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnPressed, Scope=UiKitSwitchBig}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitSwitchSmall]  -->
    <Style x:Key="UiKitSwitchSmall"
           BasedOn="{StaticResource SwitchUniversal}"
           TargetType="{x:Type visuals:Switch}">
        <uikit:UIKitSetter Id="Switch_CornerRadius" Value="8" />
        <uikit:UIKitSetter Id="Switch_FocusVisualStyle">
            <uikit:UIKitSetter.Value>
                <visuals:FocusVisual Brush="{Res FocusVisualBrush, Scope=UiKitSwitchSmall}"
                                     CornerRadius="12"
                                     Margin="-4"
                                     Thickness="2"
                                     Type="RECTANGLE" />
            </uikit:UIKitSetter.Value>
        </uikit:UIKitSetter>
        <uikit:UIKitSetter Id="Switch_Height" Value="16" />
        <uikit:UIKitSetter Id="Switch_Opacity" Value="1" />
        <uikit:UIKitSetter Id="Switch_Thumb_Height" Value="12" />
        <uikit:UIKitSetter Id="Switch_Thumb_Margin" Value="2" />
        <uikit:UIKitSetter Id="Switch_Thumb_Width" Value="12" />
        <uikit:UIKitSetter Id="Switch_Width" Value="28" />
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <uikit:UIKitSetter Id="Switch_Thumb_Shadow" Value="{Res ThumbShadowOff, Scope=UiKitSwitchSmall}" />
                <uikit:UIKitSetter Id="Switch_Thumb_Background" Value="{Res ThumbColorOff, Scope=UiKitSwitchSmall}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <uikit:UIKitSetter Id="Switch_Thumb_Shadow" Value="{Res ThumbShadowOn, Scope=UiKitSwitchSmall}" />
                <uikit:UIKitSetter Id="Switch_Thumb_Background" Value="{Res ThumbColorOn, Scope=UiKitSwitchSmall}" />
            </Trigger>
            <Trigger Property="visuals:StateService.State" Value="Disabled">
                <uikit:UIKitSetter Id="Switch_Opacity" Value="0.5" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffDisabled, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffNormal, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffHover, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOffPressed, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Disabled" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnDisabled, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Normal" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnNormal, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Hover" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnHover, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="visuals:StateService.State" Value="Pressed" />
                </MultiTrigger.Conditions>
                <uikit:UIKitSetter Id="Switch_Track_Background" Value="{Res TrackColorOnPressed, Scope=UiKitSwitchSmall}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region Tags-->
    <!--  [UiKitTagDefault]  -->
    <Style x:Key="UiKitTagDefault"
           BasedOn="{StaticResource TagUniversal}"
           TargetType="{x:Type visuals:Tag}">
        <Style.Resources>
            <Style x:Key="TextStyleEmerald"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundEmerald, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleGrass"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundGrass, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleMarina"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundMarina, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleMarengo"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundMarengo, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleNeutral"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNeutral, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleOrange"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundOrange, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStylePurple"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPurple, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleRed"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundRed, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleViolet"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundViolet, Scope=UiKitTagDefault}" />
            </Style>
            <Style x:Key="TextStyleYellow"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundYellow, Scope=UiKitTagDefault}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Tag_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="Tag_Height" Value="24" />
        <uikit:UIKitSetter Id="Tag_Icon_Margin" Value="0,0,6,0" />
        <uikit:UIKitSetter Id="Tag_Padding" Value="8,4" />
        <Style.Triggers>
            <Trigger Property="Color" Value="Emerald">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundEmerald, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorEmerald, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundEmerald, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleEmerald}" />
            </Trigger>
            <Trigger Property="Color" Value="Grass">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundGrass, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorGrass, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundGrass, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleGrass}" />
            </Trigger>
            <Trigger Property="Color" Value="Marina">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundMarina, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorMarina, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundMarina, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleMarina}" />
            </Trigger>
            <Trigger Property="Color" Value="Marengo">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundMarengo, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorMarengo, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundMarengo, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleMarengo}" />
            </Trigger>
            <Trigger Property="Color" Value="Neutral">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundNeutral, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorNeutral, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundNeutral, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleNeutral}" />
            </Trigger>
            <Trigger Property="Color" Value="Orange">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundOrange, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorOrange, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundOrange, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleOrange}" />
            </Trigger>
            <Trigger Property="Color" Value="Purple">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundPurple, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorPurple, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundPurple, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStylePurple}" />
            </Trigger>
            <Trigger Property="Color" Value="Red">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundRed, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorRed, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundRed, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleRed}" />
            </Trigger>
            <Trigger Property="Color" Value="Violet">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundViolet, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorViolet, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundViolet, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleViolet}" />
            </Trigger>
            <Trigger Property="Color" Value="Yellow">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundYellow, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorYellow, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundYellow, Scope=UiKitTagDefault}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleYellow}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitTagOutline]  -->
    <Style x:Key="UiKitTagOutline"
           BasedOn="{StaticResource TagUniversal}"
           TargetType="{x:Type visuals:Tag}">
        <Style.Resources>
            <Style x:Key="TextStyleEmerald"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundEmerald, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleGrass"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundGrass, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleMarina"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundMarina, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleMarengo"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundMarengo, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleNeutral"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundNeutral, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleOrange"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundOrange, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStylePurple"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundPurple, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleRed"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundRed, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleViolet"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundViolet, Scope=UiKitTagOutline}" />
            </Style>
            <Style x:Key="TextStyleYellow"
                   BasedOn="{StaticResource UiKitTextStyleSmallTextMedium}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res ForegroundYellow, Scope=UiKitTagOutline}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="Tag_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="Tag_Height" Value="24" />
        <uikit:UIKitSetter Id="Tag_Icon_Margin" Value="0,0,6,0" />
        <uikit:UIKitSetter Id="Tag_Padding" Value="8,4" />
        <Style.Triggers>
            <Trigger Property="Color" Value="Emerald">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundEmerald, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorEmerald, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundEmerald, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleEmerald}" />
            </Trigger>
            <Trigger Property="Color" Value="Grass">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundGrass, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorGrass, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundGrass, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleGrass}" />
            </Trigger>
            <Trigger Property="Color" Value="Marina">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundMarina, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorMarina, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundMarina, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleMarina}" />
            </Trigger>
            <Trigger Property="Color" Value="Marengo">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundMarengo, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorMarengo, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundMarengo, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleMarengo}" />
            </Trigger>
            <Trigger Property="Color" Value="Neutral">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundNeutral, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorNeutral, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundNeutral, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleNeutral}" />
            </Trigger>
            <Trigger Property="Color" Value="Orange">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundOrange, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorOrange, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundOrange, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleOrange}" />
            </Trigger>
            <Trigger Property="Color" Value="Purple">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundPurple, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorPurple, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundPurple, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStylePurple}" />
            </Trigger>
            <Trigger Property="Color" Value="Red">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundRed, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorRed, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundRed, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleRed}" />
            </Trigger>
            <Trigger Property="Color" Value="Violet">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundViolet, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorViolet, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundViolet, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleViolet}" />
            </Trigger>
            <Trigger Property="Color" Value="Yellow">
                <uikit:UIKitSetter Id="Tag_Background" Value="{Res BackgroundYellow, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderBrush" Value="{Res BorderColorYellow, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="Tag_Icon_Color" Value="{Res IconForegroundYellow, Scope=UiKitTagOutline}" />
                <uikit:UIKitSetter Id="Tag_TextStyle" Value="{StaticResource TextStyleYellow}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region TextAreas-->
    <!--  [UiKitTextArea]  -->
    <Style x:Key="UiKitTextArea"
           BasedOn="{StaticResource TextInputUniversal}"
           TargetType="{x:Type visuals:TextArea}">
        <Style.Resources>
            <Style x:Key="CaptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CaptionForeground, Scope=UiKitTextArea}" />
            </Style>
            <Style x:Key="CounterStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CounterForeground, Scope=UiKitTextArea}" />
            </Style>
            <Style x:Key="CounterFullStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CounterForegroundFull, Scope=UiKitTextArea}" />
            </Style>
            <Style x:Key="LabelStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res LabelForeground, Scope=UiKitTextArea}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundNormal, Scope=UiKitTextArea}" />
        <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitTextArea}" />
        <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="TextInput_CaptionStyle" Value="{StaticResource CaptionStyle}" />
        <uikit:UIKitSetter Id="TextInput_Caption_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="TextInput_CaretBrush" Value="{Res CaretBrush, Scope=UiKitTextArea}" />
        <uikit:UIKitSetter Id="TextInput_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="TextInput_CounterStyle" Value="{StaticResource CounterStyle}" />
        <uikit:UIKitSetter Id="TextInput_Counter_Margin" Value="4,0,0,6" />
        <uikit:UIKitSetter Id="TextInput_Height" Value="72" />
        <uikit:UIKitSetter Id="TextInput_Padding" Value="12,6,16,6" />
        <uikit:UIKitSetter Id="TextInput_Placeholder_Foreground" Value="{Res PlaceholderForeground, Scope=UiKitTextArea}" />
        <uikit:UIKitSetter Id="TextInput_PlaceholderStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
        <uikit:UIKitSetter Id="TextInput_LabelStyle" Value="{StaticResource LabelStyle}" />
        <uikit:UIKitSetter Id="TextInput_Label_Margin" Value="0,0,0,6" />
        <uikit:UIKitSetter Id="TextInput_TextForeground" Value="{Res TextForeground, Scope=UiKitTextArea}" />
        <uikit:UIKitSetter Id="TextInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
        <uikit:UIKitSetter Id="TextInput_ValidationPopupStyle" Value="{StaticResource UiKitPopupDanger}" />
        <Style.Triggers>
            <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundDisabled, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="TextInput_TextForeground" Value="{Res TextForegroundDisabled, Scope=UiKitTextArea}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Hover">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundHover, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Focus">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundFocus, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorFocus, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidNormal">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidNormal, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidHover">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidHover, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidFocus">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidFocus, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidFocus, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="ReadOnly">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundReadOnly, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorReadOnly, Scope=UiKitTextArea}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <DataTrigger Binding="{visuals:CompactMultiBinding Binding1={Binding Text.Length, RelativeSource={RelativeSource Self}}, Binding2={Binding MaxLength, RelativeSource={RelativeSource Self}}, Converter={visuals:MultiValueEqualityToBooleanConverter}}" Value="True">
                <uikit:UIKitSetter Id="TextInput_CounterStyle" Value="{StaticResource CounterFullStyle}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region TextInputs-->
    <!--  [UiKitTextInput]  -->
    <Style x:Key="UiKitTextInput"
           BasedOn="{StaticResource TextInputUniversal}"
           TargetType="{x:Type visuals:TextInput}">
        <Style.Resources>
            <Style x:Key="CaptionStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res CaptionForeground, Scope=UiKitTextInput}" />
            </Style>
            <Style x:Key="LabelStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res LabelForeground, Scope=UiKitTextInput}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TextInput_ActionBar_Margin" Value="0,4,8,4" />
        <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundNormal, Scope=UiKitTextInput}" />
        <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorNormal, Scope=UiKitTextInput}" />
        <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
        <uikit:UIKitSetter Id="TextInput_CaretBrush" Value="{Res CaretBrush, Scope=UiKitTextInput}" />
        <uikit:UIKitSetter Id="TextInput_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="TextInput_Height" Value="32" />
        <uikit:UIKitSetter Id="TextInput_Padding" Value="12,6,4,6" />
        <uikit:UIKitSetter Id="TextInput_Placeholder_Foreground" Value="{Res PlaceholderForeground, Scope=UiKitTextInput}" />
        <uikit:UIKitSetter Id="TextInput_PlaceholderStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
        <uikit:UIKitSetter Id="TextInput_CaptionStyle" Value="{StaticResource CaptionStyle}" />
        <uikit:UIKitSetter Id="TextInput_Caption_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="TextInput_LabelStyle" Value="{StaticResource LabelStyle}" />
        <uikit:UIKitSetter Id="TextInput_Label_Margin" Value="0,0,0,6" />
        <uikit:UIKitSetter Id="TextInput_TextForeground" Value="{Res TextForeground, Scope=UiKitTextInput}" />
        <uikit:UIKitSetter Id="TextInput_ValidationPopupStyle" Value="{StaticResource UiKitPopupDanger}" />
        <Style.Triggers>
            <Trigger Property="FontMode" Value="Regular">
                <uikit:UIKitSetter Id="TextInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseText}" />
            </Trigger>
            <Trigger Property="FontMode" Value="Monospace">
                <uikit:UIKitSetter Id="TextInput_TextStyle" Value="{StaticResource UiKitTextStyleBaseTextMonospace}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Disabled">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundDisabled, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorDisabled, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
                <uikit:UIKitSetter Id="TextInput_TextForeground" Value="{Res TextForegroundDisabled, Scope=UiKitTextInput}" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Hover">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundHover, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorHover, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="Focus">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundFocus, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorFocus, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidNormal">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidNormal, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidNormal, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidHover">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidHover, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidHover, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="InvalidFocus">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundInvalidFocus, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorInvalidFocus, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="visuals:StateService.TextInputState" Value="ReadOnly">
                <uikit:UIKitSetter Id="TextInput_Background" Value="{Res BackgroundReadOnly, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderBrush" Value="{Res BorderColorReadOnly, Scope=UiKitTextInput}" />
                <uikit:UIKitSetter Id="TextInput_BorderThickness" Value="1" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
    <!--#region TextViewers-->
    <!--  [UiKitTextViewer]  -->
    <Style x:Key="UiKitTextViewer"
           BasedOn="{StaticResource TextViewerUniversal}"
           TargetType="{x:Type visuals:TextViewer}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBox}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitTextViewer}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="TextViewer_IslandStyle" Value="{StaticResource UiKitIsland}" />
        <uikit:UIKitSetter Id="TextViewer_Padding" Value="24,16,24,32" />
        <uikit:UIKitSetter Id="TextViewer_TextStyle" Value="{StaticResource TextStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region ToolTips-->
    <!--  [UiKitTooltipStandard]  -->
    <Style x:Key="UiKitTooltipStandard"
           BasedOn="{StaticResource ToolTipUniversal}"
           TargetType="{x:Type ToolTip}">
        <Style.Resources>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleSmallText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res Foreground, Scope=UiKitTooltipStandard}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="ToolTip_Background" Value="{Res Background, Scope=UiKitTooltipStandard}" />
        <uikit:UIKitSetter Id="ToolTip_BorderBrush" Value="{Res BorderColor, Scope=UiKitTooltipStandard}" />
        <uikit:UIKitSetter Id="ToolTip_BorderThickness" Value="0" />
        <uikit:UIKitSetter Id="ToolTip_CornerRadius" Value="5" />
        <uikit:UIKitSetter Id="ToolTip_Padding" Value="8,6" />
        <uikit:UIKitSetter Id="ToolTip_TextStyle" Value="{StaticResource TextStyle}" />
    </Style>
    <!--#endregion-->
    <!--#region NotificationPanels-->
    <!--  [UiKitNotificationPanelColorful]  -->
    <Style x:Key="UiKitNotificationPanelColorful"
           BasedOn="{StaticResource NotificationPanelUniversal}"
           TargetType="{x:Type visuals:NotificationPanel}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleHeader4}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res HeaderForeground, Scope=UiKitNotificationPanelColorful}" />
            </Style>
            <Style x:Key="SubHeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res SubHeaderForeground, Scope=UiKitNotificationPanelColorful}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitNotificationPanelColorful}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationPanel_ButtonStyle" Value="{StaticResource UiKitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="NotificationPanel_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="NotificationPanel_Header_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="NotificationPanel_HeaderStyle" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationPanel_Icon_Height" Value="24" />
        <uikit:UIKitSetter Id="NotificationPanel_Icon_Margin" Value="0,4,12,4" />
        <uikit:UIKitSetter Id="NotificationPanel_Icon_Width" Value="24" />
        <uikit:UIKitSetter Id="NotificationPanel_Padding" Value="24,20" />
        <uikit:UIKitSetter Id="NotificationPanel_RightBar_Margin" Value="24,0,0,0" />
        <uikit:UIKitSetter Id="NotificationPanel_SplitButtonStyle" Value="{StaticResource UiKitSplitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="NotificationPanel_SubHeader_Margin" Value="0,4,0,8" />
        <uikit:UIKitSetter Id="NotificationPanel_SubHeaderStyle" Value="{StaticResource SubHeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationPanel_TextContainer_Margin" Value="0,4" />
        <uikit:UIKitSetter Id="NotificationPanel_Text_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="NotificationPanel_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundDanger, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorDanger, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundDanger, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusDangerSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundInfo, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorInfo, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundInfo, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusInfoSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundPositive, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorPositive, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundPositive, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusPositiveSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundWarning, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorWarning, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundWarning, Scope=UiKitNotificationPanelColorful}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusWarningSolid" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--  [UiKitNotificationPanelPlain]  -->
    <Style x:Key="UiKitNotificationPanelPlain"
           BasedOn="{StaticResource NotificationPanelUniversal}"
           TargetType="{x:Type visuals:NotificationPanel}">
        <Style.Resources>
            <Style x:Key="HeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleHeader4}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res HeaderForeground, Scope=UiKitNotificationPanelPlain}" />
            </Style>
            <Style x:Key="SubHeaderStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res SubHeaderForeground, Scope=UiKitNotificationPanelPlain}" />
            </Style>
            <Style x:Key="TextStyle"
                   BasedOn="{StaticResource UiKitTextStyleBaseText}"
                   TargetType="{x:Type TextBlock}">
                <Setter Property="TextElement.Foreground" Value="{Res TextForeground, Scope=UiKitNotificationPanelPlain}" />
            </Style>
        </Style.Resources>
        <uikit:UIKitSetter Id="NotificationPanel_ButtonStyle" Value="{StaticResource UiKitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="NotificationPanel_CornerRadius" Value="12" />
        <uikit:UIKitSetter Id="NotificationPanel_Header_Margin" Value="0,2,0,0" />
        <uikit:UIKitSetter Id="NotificationPanel_HeaderStyle" Value="{StaticResource HeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationPanel_Icon_Height" Value="24" />
        <uikit:UIKitSetter Id="NotificationPanel_Icon_Margin" Value="0,4,12,4" />
        <uikit:UIKitSetter Id="NotificationPanel_Icon_Width" Value="24" />
        <uikit:UIKitSetter Id="NotificationPanel_Padding" Value="24,20" />
        <uikit:UIKitSetter Id="NotificationPanel_RightBar_Margin" Value="24,0,0,0" />
        <uikit:UIKitSetter Id="NotificationPanel_SplitButtonStyle" Value="{StaticResource UiKitSplitButtonBaseOutlineSecondary}" />
        <uikit:UIKitSetter Id="NotificationPanel_SubHeader_Margin" Value="0,4,0,8" />
        <uikit:UIKitSetter Id="NotificationPanel_SubHeaderStyle" Value="{StaticResource SubHeaderStyle}" />
        <uikit:UIKitSetter Id="NotificationPanel_TextContainer_Margin" Value="0,4" />
        <uikit:UIKitSetter Id="NotificationPanel_Text_Margin" Value="0,8,0,0" />
        <uikit:UIKitSetter Id="NotificationPanel_TextStyle" Value="{StaticResource TextStyle}" />
        <Style.Triggers>
            <Trigger Property="Type" Value="Danger">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundDanger, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorDanger, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundDanger, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusDangerSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Info">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundInfo, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorInfo, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundInfo, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusInfoSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Positive">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundPositive, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorPositive, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundPositive, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusPositiveSolid" />
            </Trigger>
            <Trigger Property="Type" Value="Warning">
                <uikit:UIKitSetter Id="NotificationPanel_Background" Value="{Res BackgroundWarning, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderBrush" Value="{Res BorderColorWarning, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_BorderThickness" Value="0" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Color" Value="{Res IconForegroundWarning, Scope=UiKitNotificationPanelPlain}" />
                <uikit:UIKitSetter Id="NotificationPanel_Icon_Name" Value="StatusWarningSolid" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
</ResourceDictionary>